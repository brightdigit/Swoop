// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
package protocol APIProtocol: Sendable {
    /// List containers
    ///
    /// Returns a list of containers. For details on the format, see the
    /// [inspect endpoint](#operation/ContainerInspect).
    ///
    /// Note that it uses a different, smaller representation of a container
    /// than inspecting a single container. For example, the list of linked
    /// containers is not propagated .
    ///
    ///
    /// - Remark: HTTP `GET /containers/json`.
    /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)`.
    func ContainerList(_ input: Operations.ContainerList.Input) async throws -> Operations.ContainerList.Output
    /// Create a container
    ///
    /// - Remark: HTTP `POST /containers/create`.
    /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)`.
    func ContainerCreate(_ input: Operations.ContainerCreate.Input) async throws -> Operations.ContainerCreate.Output
    /// Inspect a container
    ///
    /// Return low-level information about a container.
    ///
    /// - Remark: HTTP `GET /containers/{id}/json`.
    /// - Remark: Generated from `#/paths//containers/{id}/json/get(ContainerInspect)`.
    func ContainerInspect(_ input: Operations.ContainerInspect.Input) async throws -> Operations.ContainerInspect.Output
    /// List processes running inside a container
    ///
    /// On Unix systems, this is done by running the `ps` command. This endpoint
    /// is not supported on Windows.
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/top`.
    /// - Remark: Generated from `#/paths//containers/{id}/top/get(ContainerTop)`.
    func ContainerTop(_ input: Operations.ContainerTop.Input) async throws -> Operations.ContainerTop.Output
    /// Get container logs
    ///
    /// Get `stdout` and `stderr` logs from a container.
    ///
    /// Note: This endpoint works only for containers with the `json-file` or
    /// `journald` logging driver.
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/logs`.
    /// - Remark: Generated from `#/paths//containers/{id}/logs/get(ContainerLogs)`.
    func ContainerLogs(_ input: Operations.ContainerLogs.Input) async throws -> Operations.ContainerLogs.Output
    /// Get changes on a container’s filesystem
    ///
    /// Returns which files in a container's filesystem have been added, deleted,
    /// or modified. The `Kind` of modification can be one of:
    ///
    /// - `0`: Modified ("C")
    /// - `1`: Added ("A")
    /// - `2`: Deleted ("D")
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/changes`.
    /// - Remark: Generated from `#/paths//containers/{id}/changes/get(ContainerChanges)`.
    func ContainerChanges(_ input: Operations.ContainerChanges.Input) async throws -> Operations.ContainerChanges.Output
    /// Export a container
    ///
    /// Export the contents of a container as a tarball.
    ///
    /// - Remark: HTTP `GET /containers/{id}/export`.
    /// - Remark: Generated from `#/paths//containers/{id}/export/get(ContainerExport)`.
    func ContainerExport(_ input: Operations.ContainerExport.Input) async throws -> Operations.ContainerExport.Output
    /// Get container stats based on resource usage
    ///
    /// This endpoint returns a live stream of a container’s resource usage
    /// statistics.
    ///
    /// The `precpu_stats` is the CPU statistic of the *previous* read, and is
    /// used to calculate the CPU usage percentage. It is not an exact copy
    /// of the `cpu_stats` field.
    ///
    /// If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
    /// nil then for compatibility with older daemons the length of the
    /// corresponding `cpu_usage.percpu_usage` array should be used.
    ///
    /// On a cgroup v2 host, the following fields are not set
    /// * `blkio_stats`: all fields other than `io_service_bytes_recursive`
    /// * `cpu_stats`: `cpu_usage.percpu_usage`
    /// * `memory_stats`: `max_usage` and `failcnt`
    /// Also, `memory_stats.stats` fields are incompatible with cgroup v1.
    ///
    /// To calculate the values shown by the `stats` command of the docker cli tool
    /// the following formulas can be used:
    /// * used_memory = `memory_stats.usage - memory_stats.stats.cache`
    /// * available_memory = `memory_stats.limit`
    /// * Memory usage % = `(used_memory / available_memory) * 100.0`
    /// * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`
    /// * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`
    /// * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`
    /// * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/stats`.
    /// - Remark: Generated from `#/paths//containers/{id}/stats/get(ContainerStats)`.
    func ContainerStats(_ input: Operations.ContainerStats.Input) async throws -> Operations.ContainerStats.Output
    /// Resize a container TTY
    ///
    /// Resize the TTY for a container.
    ///
    /// - Remark: HTTP `POST /containers/{id}/resize`.
    /// - Remark: Generated from `#/paths//containers/{id}/resize/post(ContainerResize)`.
    func ContainerResize(_ input: Operations.ContainerResize.Input) async throws -> Operations.ContainerResize.Output
    /// Start a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/start`.
    /// - Remark: Generated from `#/paths//containers/{id}/start/post(ContainerStart)`.
    func ContainerStart(_ input: Operations.ContainerStart.Input) async throws -> Operations.ContainerStart.Output
    /// Stop a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/stop`.
    /// - Remark: Generated from `#/paths//containers/{id}/stop/post(ContainerStop)`.
    func ContainerStop(_ input: Operations.ContainerStop.Input) async throws -> Operations.ContainerStop.Output
    /// Restart a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/restart`.
    /// - Remark: Generated from `#/paths//containers/{id}/restart/post(ContainerRestart)`.
    func ContainerRestart(_ input: Operations.ContainerRestart.Input) async throws -> Operations.ContainerRestart.Output
    /// Kill a container
    ///
    /// Send a POSIX signal to a container, defaulting to killing to the
    /// container.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/kill`.
    /// - Remark: Generated from `#/paths//containers/{id}/kill/post(ContainerKill)`.
    func ContainerKill(_ input: Operations.ContainerKill.Input) async throws -> Operations.ContainerKill.Output
    /// Update a container
    ///
    /// Change various configuration options of a container without having to
    /// recreate it.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/update`.
    /// - Remark: Generated from `#/paths//containers/{id}/update/post(ContainerUpdate)`.
    func ContainerUpdate(_ input: Operations.ContainerUpdate.Input) async throws -> Operations.ContainerUpdate.Output
    /// Rename a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/rename`.
    /// - Remark: Generated from `#/paths//containers/{id}/rename/post(ContainerRename)`.
    func ContainerRename(_ input: Operations.ContainerRename.Input) async throws -> Operations.ContainerRename.Output
    /// Pause a container
    ///
    /// Use the freezer cgroup to suspend all processes in a container.
    ///
    /// Traditionally, when suspending a process the `SIGSTOP` signal is used,
    /// which is observable by the process being suspended. With the freezer
    /// cgroup the process is unaware, and unable to capture, that it is being
    /// suspended, and subsequently resumed.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/pause`.
    /// - Remark: Generated from `#/paths//containers/{id}/pause/post(ContainerPause)`.
    func ContainerPause(_ input: Operations.ContainerPause.Input) async throws -> Operations.ContainerPause.Output
    /// Unpause a container
    ///
    /// Resume a container which has been paused.
    ///
    /// - Remark: HTTP `POST /containers/{id}/unpause`.
    /// - Remark: Generated from `#/paths//containers/{id}/unpause/post(ContainerUnpause)`.
    func ContainerUnpause(_ input: Operations.ContainerUnpause.Input) async throws -> Operations.ContainerUnpause.Output
    /// Attach to a container
    ///
    /// Attach to a container to read its output or send it input. You can attach
    /// to the same container multiple times and you can reattach to containers
    /// that have been detached.
    ///
    /// Either the `stream` or `logs` parameter must be `true` for this endpoint
    /// to do anything.
    ///
    /// See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/)
    /// for more details.
    ///
    /// ### Hijacking
    ///
    /// This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
    /// and `stderr` on the same socket.
    ///
    /// This is the response from the daemon for an attach request:
    ///
    /// ```
    /// HTTP/1.1 200 OK
    /// Content-Type: application/vnd.docker.raw-stream
    ///
    /// [STREAM]
    /// ```
    ///
    /// After the headers and two new lines, the TCP connection can now be used
    /// for raw, bidirectional communication between the client and server.
    ///
    /// To hint potential proxies about connection hijacking, the Docker client
    /// can also optionally send connection upgrade headers.
    ///
    /// For example, the client sends this request to upgrade the connection:
    ///
    /// ```
    /// POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
    /// Upgrade: tcp
    /// Connection: Upgrade
    /// ```
    ///
    /// The Docker daemon will respond with a `101 UPGRADED` response, and will
    /// similarly follow with the raw stream:
    ///
    /// ```
    /// HTTP/1.1 101 UPGRADED
    /// Content-Type: application/vnd.docker.raw-stream
    /// Connection: Upgrade
    /// Upgrade: tcp
    ///
    /// [STREAM]
    /// ```
    ///
    /// ### Stream format
    ///
    /// When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),
    /// the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream
    /// and the stream over the hijacked connected is multiplexed to separate out
    /// `stdout` and `stderr`. The stream consists of a series of frames, each
    /// containing a header and a payload.
    ///
    /// The header contains the information which the stream writes (`stdout` or
    /// `stderr`). It also contains the size of the associated frame encoded in
    /// the last four bytes (`uint32`).
    ///
    /// It is encoded on the first eight bytes like this:
    ///
    /// ```go
    /// header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
    /// ```
    ///
    /// `STREAM_TYPE` can be:
    ///
    /// - 0: `stdin` (is written on `stdout`)
    /// - 1: `stdout`
    /// - 2: `stderr`
    ///
    /// `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
    /// encoded as big endian.
    ///
    /// Following the header is the payload, which is the specified number of
    /// bytes of `STREAM_TYPE`.
    ///
    /// The simplest way to implement this protocol is the following:
    ///
    /// 1. Read 8 bytes.
    /// 2. Choose `stdout` or `stderr` depending on the first byte.
    /// 3. Extract the frame size from the last four bytes.
    /// 4. Read the extracted size and output it on the correct output.
    /// 5. Goto 1.
    ///
    /// ### Stream format when using a TTY
    ///
    /// When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate),
    /// the stream is not multiplexed. The data exchanged over the hijacked
    /// connection is simply the raw data from the process PTY and client's
    /// `stdin`.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/attach`.
    /// - Remark: Generated from `#/paths//containers/{id}/attach/post(ContainerAttach)`.
    func ContainerAttach(_ input: Operations.ContainerAttach.Input) async throws -> Operations.ContainerAttach.Output
    /// Attach to a container via a websocket
    ///
    /// - Remark: HTTP `GET /containers/{id}/attach/ws`.
    /// - Remark: Generated from `#/paths//containers/{id}/attach/ws/get(ContainerAttachWebsocket)`.
    func ContainerAttachWebsocket(_ input: Operations.ContainerAttachWebsocket.Input) async throws -> Operations.ContainerAttachWebsocket.Output
    /// Wait for a container
    ///
    /// Block until a container stops, then returns the exit code.
    ///
    /// - Remark: HTTP `POST /containers/{id}/wait`.
    /// - Remark: Generated from `#/paths//containers/{id}/wait/post(ContainerWait)`.
    func ContainerWait(_ input: Operations.ContainerWait.Input) async throws -> Operations.ContainerWait.Output
    /// Remove a container
    ///
    /// - Remark: HTTP `DELETE /containers/{id}`.
    /// - Remark: Generated from `#/paths//containers/{id}/delete(ContainerDelete)`.
    func ContainerDelete(_ input: Operations.ContainerDelete.Input) async throws -> Operations.ContainerDelete.Output
    /// Get an archive of a filesystem resource in a container
    ///
    /// Get a tar archive of a resource in the filesystem of container id.
    ///
    /// - Remark: HTTP `GET /containers/{id}/archive`.
    /// - Remark: Generated from `#/paths//containers/{id}/archive/get(ContainerArchive)`.
    func ContainerArchive(_ input: Operations.ContainerArchive.Input) async throws -> Operations.ContainerArchive.Output
    /// Extract an archive of files or folders to a directory in a container
    ///
    /// Upload a tar archive to be extracted to a path in the filesystem of container id.
    /// `path` parameter is asserted to be a directory. If it exists as a file, 400 error
    /// will be returned with message "not a directory".
    ///
    ///
    /// - Remark: HTTP `PUT /containers/{id}/archive`.
    /// - Remark: Generated from `#/paths//containers/{id}/archive/put(PutContainerArchive)`.
    func PutContainerArchive(_ input: Operations.PutContainerArchive.Input) async throws -> Operations.PutContainerArchive.Output
    /// Get information about files in a container
    ///
    /// A response header `X-Docker-Container-Path-Stat` is returned, containing
    /// a base64 - encoded JSON object with some filesystem header information
    /// about the path.
    ///
    ///
    /// - Remark: HTTP `HEAD /containers/{id}/archive`.
    /// - Remark: Generated from `#/paths//containers/{id}/archive/head(ContainerArchiveInfo)`.
    func ContainerArchiveInfo(_ input: Operations.ContainerArchiveInfo.Input) async throws -> Operations.ContainerArchiveInfo.Output
    /// Delete stopped containers
    ///
    /// - Remark: HTTP `POST /containers/prune`.
    /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)`.
    func ContainerPrune(_ input: Operations.ContainerPrune.Input) async throws -> Operations.ContainerPrune.Output
    /// List Images
    ///
    /// Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
    ///
    /// - Remark: HTTP `GET /images/json`.
    /// - Remark: Generated from `#/paths//images/json/get(ImageList)`.
    func ImageList(_ input: Operations.ImageList.Input) async throws -> Operations.ImageList.Output
    /// Build an image
    ///
    /// Build an image from a tar archive with a `Dockerfile` in it.
    ///
    /// The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).
    ///
    /// The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.
    ///
    /// The build is canceled if the client drops the connection by quitting or being killed.
    ///
    ///
    /// - Remark: HTTP `POST /build`.
    /// - Remark: Generated from `#/paths//build/post(ImageBuild)`.
    func ImageBuild(_ input: Operations.ImageBuild.Input) async throws -> Operations.ImageBuild.Output
    /// Delete builder cache
    ///
    /// - Remark: HTTP `POST /build/prune`.
    /// - Remark: Generated from `#/paths//build/prune/post(BuildPrune)`.
    func BuildPrune(_ input: Operations.BuildPrune.Input) async throws -> Operations.BuildPrune.Output
    /// Create an image
    ///
    /// Pull or import an image.
    ///
    /// - Remark: HTTP `POST /images/create`.
    /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)`.
    func ImageCreate(_ input: Operations.ImageCreate.Input) async throws -> Operations.ImageCreate.Output
    /// Inspect an image
    ///
    /// Return low-level information about an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/json`.
    /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)`.
    func ImageInspect(_ input: Operations.ImageInspect.Input) async throws -> Operations.ImageInspect.Output
    /// Get the history of an image
    ///
    /// Return parent layers of an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/history`.
    /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)`.
    func ImageHistory(_ input: Operations.ImageHistory.Input) async throws -> Operations.ImageHistory.Output
    /// Push an image
    ///
    /// Push an image to a registry.
    ///
    /// If you wish to push an image on to a private registry, that image must
    /// already have a tag which references the registry. For example,
    /// `registry.example.com/myimage:latest`.
    ///
    /// The push is cancelled if the HTTP connection is closed.
    ///
    ///
    /// - Remark: HTTP `POST /images/{name}/push`.
    /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)`.
    func ImagePush(_ input: Operations.ImagePush.Input) async throws -> Operations.ImagePush.Output
    /// Tag an image
    ///
    /// Tag an image so that it becomes part of a repository.
    ///
    /// - Remark: HTTP `POST /images/{name}/tag`.
    /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)`.
    func ImageTag(_ input: Operations.ImageTag.Input) async throws -> Operations.ImageTag.Output
    /// Remove an image
    ///
    /// Remove an image, along with any untagged parent images that were
    /// referenced by that image.
    ///
    /// Images can't be removed if they have descendant images, are being
    /// used by a running container or are being used by a build.
    ///
    ///
    /// - Remark: HTTP `DELETE /images/{name}`.
    /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)`.
    func ImageDelete(_ input: Operations.ImageDelete.Input) async throws -> Operations.ImageDelete.Output
    /// Search images
    ///
    /// Search for an image on Docker Hub.
    ///
    /// - Remark: HTTP `GET /images/search`.
    /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)`.
    func ImageSearch(_ input: Operations.ImageSearch.Input) async throws -> Operations.ImageSearch.Output
    /// Delete unused images
    ///
    /// - Remark: HTTP `POST /images/prune`.
    /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)`.
    func ImagePrune(_ input: Operations.ImagePrune.Input) async throws -> Operations.ImagePrune.Output
    /// Check auth configuration
    ///
    /// Validate credentials for a registry and, if available, get an identity
    /// token for accessing the registry without password.
    ///
    ///
    /// - Remark: HTTP `POST /auth`.
    /// - Remark: Generated from `#/paths//auth/post(SystemAuth)`.
    func SystemAuth(_ input: Operations.SystemAuth.Input) async throws -> Operations.SystemAuth.Output
    /// Get system information
    ///
    /// - Remark: HTTP `GET /info`.
    /// - Remark: Generated from `#/paths//info/get(SystemInfo)`.
    func SystemInfo(_ input: Operations.SystemInfo.Input) async throws -> Operations.SystemInfo.Output
    /// Get version
    ///
    /// Returns the version of Docker that is running and various information about the system that Docker is running on.
    ///
    /// - Remark: HTTP `GET /version`.
    /// - Remark: Generated from `#/paths//version/get(SystemVersion)`.
    func SystemVersion(_ input: Operations.SystemVersion.Input) async throws -> Operations.SystemVersion.Output
    /// Ping
    ///
    /// This is a dummy endpoint you can use to test if the server is accessible.
    ///
    /// - Remark: HTTP `GET /_ping`.
    /// - Remark: Generated from `#/paths//_ping/get(SystemPing)`.
    func SystemPing(_ input: Operations.SystemPing.Input) async throws -> Operations.SystemPing.Output
    /// Ping
    ///
    /// This is a dummy endpoint you can use to test if the server is accessible.
    ///
    /// - Remark: HTTP `HEAD /_ping`.
    /// - Remark: Generated from `#/paths//_ping/head(SystemPingHead)`.
    func SystemPingHead(_ input: Operations.SystemPingHead.Input) async throws -> Operations.SystemPingHead.Output
    /// Create a new image from a container
    ///
    /// - Remark: HTTP `POST /commit`.
    /// - Remark: Generated from `#/paths//commit/post(ImageCommit)`.
    func ImageCommit(_ input: Operations.ImageCommit.Input) async throws -> Operations.ImageCommit.Output
    /// Monitor events
    ///
    /// Stream real-time events from the server.
    ///
    /// Various objects within Docker report events when something happens to them.
    ///
    /// Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`
    ///
    /// Images report these events: `create, `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`
    ///
    /// Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`
    ///
    /// Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`
    ///
    /// The Docker daemon reports these events: `reload`
    ///
    /// Services report these events: `create`, `update`, and `remove`
    ///
    /// Nodes report these events: `create`, `update`, and `remove`
    ///
    /// Secrets report these events: `create`, `update`, and `remove`
    ///
    /// Configs report these events: `create`, `update`, and `remove`
    ///
    /// The Builder reports `prune` events
    ///
    ///
    /// - Remark: HTTP `GET /events`.
    /// - Remark: Generated from `#/paths//events/get(SystemEvents)`.
    func SystemEvents(_ input: Operations.SystemEvents.Input) async throws -> Operations.SystemEvents.Output
    /// Get data usage information
    ///
    /// - Remark: HTTP `GET /system/df`.
    /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)`.
    func SystemDataUsage(_ input: Operations.SystemDataUsage.Input) async throws -> Operations.SystemDataUsage.Output
    /// Export an image
    ///
    /// Get a tarball containing all images and metadata for a repository.
    ///
    /// If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.
    ///
    /// ### Image tarball format
    ///
    /// An image tarball contains one directory per image layer (named using its long ID), each containing these files:
    ///
    /// - `VERSION`: currently `1.0` - the file format version
    /// - `json`: detailed layer information, similar to `docker inspect layer_id`
    /// - `layer.tar`: A tarfile containing the filesystem changes in this layer
    ///
    /// The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.
    ///
    /// If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.
    ///
    /// ```json
    /// {
    ///   "hello-world": {
    ///     "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
    ///   }
    /// }
    /// ```
    ///
    ///
    /// - Remark: HTTP `GET /images/{name}/get`.
    /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)`.
    func ImageGet(_ input: Operations.ImageGet.Input) async throws -> Operations.ImageGet.Output
    /// Export several images
    ///
    /// Get a tarball containing all images and metadata for several image
    /// repositories.
    ///
    /// For each value of the `names` parameter: if it is a specific name and
    /// tag (e.g. `ubuntu:latest`), then only that image (and its parents) are
    /// returned; if it is an image ID, similarly only that image (and its parents)
    /// are returned and there would be no names referenced in the 'repositories'
    /// file for this image ID.
    ///
    /// For details on the format, see the [export image endpoint](#operation/ImageGet).
    ///
    ///
    /// - Remark: HTTP `GET /images/get`.
    /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)`.
    func ImageGetAll(_ input: Operations.ImageGetAll.Input) async throws -> Operations.ImageGetAll.Output
    /// Import images
    ///
    /// Load a set of images and tags into a repository.
    ///
    /// For details on the format, see the [export image endpoint](#operation/ImageGet).
    ///
    ///
    /// - Remark: HTTP `POST /images/load`.
    /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)`.
    func ImageLoad(_ input: Operations.ImageLoad.Input) async throws -> Operations.ImageLoad.Output
    /// Create an exec instance
    ///
    /// Run a command inside a running container.
    ///
    /// - Remark: HTTP `POST /containers/{id}/exec`.
    /// - Remark: Generated from `#/paths//containers/{id}/exec/post(ContainerExec)`.
    func ContainerExec(_ input: Operations.ContainerExec.Input) async throws -> Operations.ContainerExec.Output
    /// Start an exec instance
    ///
    /// Starts a previously set up exec instance. If detach is true, this endpoint
    /// returns immediately after starting the command. Otherwise, it sets up an
    /// interactive session with the command.
    ///
    ///
    /// - Remark: HTTP `POST /exec/{id}/start`.
    /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)`.
    func ExecStart(_ input: Operations.ExecStart.Input) async throws -> Operations.ExecStart.Output
    /// Resize an exec instance
    ///
    /// Resize the TTY session used by an exec instance. This endpoint only works
    /// if `tty` was specified as part of creating and starting the exec instance.
    ///
    ///
    /// - Remark: HTTP `POST /exec/{id}/resize`.
    /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)`.
    func ExecResize(_ input: Operations.ExecResize.Input) async throws -> Operations.ExecResize.Output
    /// Inspect an exec instance
    ///
    /// Return low-level information about an exec instance.
    ///
    /// - Remark: HTTP `GET /exec/{id}/json`.
    /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)`.
    func ExecInspect(_ input: Operations.ExecInspect.Input) async throws -> Operations.ExecInspect.Output
    /// List volumes
    ///
    /// - Remark: HTTP `GET /volumes`.
    /// - Remark: Generated from `#/paths//volumes/get(VolumeList)`.
    func VolumeList(_ input: Operations.VolumeList.Input) async throws -> Operations.VolumeList.Output
    /// Create a volume
    ///
    /// - Remark: HTTP `POST /volumes/create`.
    /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)`.
    func VolumeCreate(_ input: Operations.VolumeCreate.Input) async throws -> Operations.VolumeCreate.Output
    /// Inspect a volume
    ///
    /// - Remark: HTTP `GET /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)`.
    func VolumeInspect(_ input: Operations.VolumeInspect.Input) async throws -> Operations.VolumeInspect.Output
    /// "Update a volume. Valid only for Swarm cluster volumes"
    ///
    ///
    /// - Remark: HTTP `PUT /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/put(VolumeUpdate)`.
    func VolumeUpdate(_ input: Operations.VolumeUpdate.Input) async throws -> Operations.VolumeUpdate.Output
    /// Remove a volume
    ///
    /// Instruct the driver to remove the volume.
    ///
    /// - Remark: HTTP `DELETE /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)`.
    func VolumeDelete(_ input: Operations.VolumeDelete.Input) async throws -> Operations.VolumeDelete.Output
    /// Delete unused volumes
    ///
    /// - Remark: HTTP `POST /volumes/prune`.
    /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)`.
    func VolumePrune(_ input: Operations.VolumePrune.Input) async throws -> Operations.VolumePrune.Output
    /// List networks
    ///
    /// Returns a list of networks. For details on the format, see the
    /// [network inspect endpoint](#operation/NetworkInspect).
    ///
    /// Note that it uses a different, smaller representation of a network than
    /// inspecting a single network. For example, the list of containers attached
    /// to the network is not propagated in API versions 1.28 and up.
    ///
    ///
    /// - Remark: HTTP `GET /networks`.
    /// - Remark: Generated from `#/paths//networks/get(NetworkList)`.
    func NetworkList(_ input: Operations.NetworkList.Input) async throws -> Operations.NetworkList.Output
    /// Inspect a network
    ///
    /// - Remark: HTTP `GET /networks/{id}`.
    /// - Remark: Generated from `#/paths//networks/{id}/get(NetworkInspect)`.
    func NetworkInspect(_ input: Operations.NetworkInspect.Input) async throws -> Operations.NetworkInspect.Output
    /// Remove a network
    ///
    /// - Remark: HTTP `DELETE /networks/{id}`.
    /// - Remark: Generated from `#/paths//networks/{id}/delete(NetworkDelete)`.
    func NetworkDelete(_ input: Operations.NetworkDelete.Input) async throws -> Operations.NetworkDelete.Output
    /// Create a network
    ///
    /// - Remark: HTTP `POST /networks/create`.
    /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)`.
    func NetworkCreate(_ input: Operations.NetworkCreate.Input) async throws -> Operations.NetworkCreate.Output
    /// Connect a container to a network
    ///
    /// The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
    ///
    /// - Remark: HTTP `POST /networks/{id}/connect`.
    /// - Remark: Generated from `#/paths//networks/{id}/connect/post(NetworkConnect)`.
    func NetworkConnect(_ input: Operations.NetworkConnect.Input) async throws -> Operations.NetworkConnect.Output
    /// Disconnect a container from a network
    ///
    /// - Remark: HTTP `POST /networks/{id}/disconnect`.
    /// - Remark: Generated from `#/paths//networks/{id}/disconnect/post(NetworkDisconnect)`.
    func NetworkDisconnect(_ input: Operations.NetworkDisconnect.Input) async throws -> Operations.NetworkDisconnect.Output
    /// Delete unused networks
    ///
    /// - Remark: HTTP `POST /networks/prune`.
    /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)`.
    func NetworkPrune(_ input: Operations.NetworkPrune.Input) async throws -> Operations.NetworkPrune.Output
    /// List plugins
    ///
    /// Returns information about installed plugins.
    ///
    /// - Remark: HTTP `GET /plugins`.
    /// - Remark: Generated from `#/paths//plugins/get(PluginList)`.
    func PluginList(_ input: Operations.PluginList.Input) async throws -> Operations.PluginList.Output
    /// Get plugin privileges
    ///
    /// - Remark: HTTP `GET /plugins/privileges`.
    /// - Remark: Generated from `#/paths//plugins/privileges/get(GetPluginPrivileges)`.
    func GetPluginPrivileges(_ input: Operations.GetPluginPrivileges.Input) async throws -> Operations.GetPluginPrivileges.Output
    /// Install a plugin
    ///
    /// Pulls and installs a plugin. After the plugin is installed, it can be
    /// enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).
    ///
    ///
    /// - Remark: HTTP `POST /plugins/pull`.
    /// - Remark: Generated from `#/paths//plugins/pull/post(PluginPull)`.
    func PluginPull(_ input: Operations.PluginPull.Input) async throws -> Operations.PluginPull.Output
    /// Inspect a plugin
    ///
    /// - Remark: HTTP `GET /plugins/{name}/json`.
    /// - Remark: Generated from `#/paths//plugins/{name}/json/get(PluginInspect)`.
    func PluginInspect(_ input: Operations.PluginInspect.Input) async throws -> Operations.PluginInspect.Output
    /// Remove a plugin
    ///
    /// - Remark: HTTP `DELETE /plugins/{name}`.
    /// - Remark: Generated from `#/paths//plugins/{name}/delete(PluginDelete)`.
    func PluginDelete(_ input: Operations.PluginDelete.Input) async throws -> Operations.PluginDelete.Output
    /// Enable a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/enable`.
    /// - Remark: Generated from `#/paths//plugins/{name}/enable/post(PluginEnable)`.
    func PluginEnable(_ input: Operations.PluginEnable.Input) async throws -> Operations.PluginEnable.Output
    /// Disable a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/disable`.
    /// - Remark: Generated from `#/paths//plugins/{name}/disable/post(PluginDisable)`.
    func PluginDisable(_ input: Operations.PluginDisable.Input) async throws -> Operations.PluginDisable.Output
    /// Upgrade a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/upgrade`.
    /// - Remark: Generated from `#/paths//plugins/{name}/upgrade/post(PluginUpgrade)`.
    func PluginUpgrade(_ input: Operations.PluginUpgrade.Input) async throws -> Operations.PluginUpgrade.Output
    /// Create a plugin
    ///
    /// - Remark: HTTP `POST /plugins/create`.
    /// - Remark: Generated from `#/paths//plugins/create/post(PluginCreate)`.
    func PluginCreate(_ input: Operations.PluginCreate.Input) async throws -> Operations.PluginCreate.Output
    /// Push a plugin
    ///
    /// Push a plugin to the registry.
    ///
    ///
    /// - Remark: HTTP `POST /plugins/{name}/push`.
    /// - Remark: Generated from `#/paths//plugins/{name}/push/post(PluginPush)`.
    func PluginPush(_ input: Operations.PluginPush.Input) async throws -> Operations.PluginPush.Output
    /// Configure a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/set`.
    /// - Remark: Generated from `#/paths//plugins/{name}/set/post(PluginSet)`.
    func PluginSet(_ input: Operations.PluginSet.Input) async throws -> Operations.PluginSet.Output
    /// List nodes
    ///
    /// - Remark: HTTP `GET /nodes`.
    /// - Remark: Generated from `#/paths//nodes/get(NodeList)`.
    func NodeList(_ input: Operations.NodeList.Input) async throws -> Operations.NodeList.Output
    /// Inspect a node
    ///
    /// - Remark: HTTP `GET /nodes/{id}`.
    /// - Remark: Generated from `#/paths//nodes/{id}/get(NodeInspect)`.
    func NodeInspect(_ input: Operations.NodeInspect.Input) async throws -> Operations.NodeInspect.Output
    /// Delete a node
    ///
    /// - Remark: HTTP `DELETE /nodes/{id}`.
    /// - Remark: Generated from `#/paths//nodes/{id}/delete(NodeDelete)`.
    func NodeDelete(_ input: Operations.NodeDelete.Input) async throws -> Operations.NodeDelete.Output
    /// Update a node
    ///
    /// - Remark: HTTP `POST /nodes/{id}/update`.
    /// - Remark: Generated from `#/paths//nodes/{id}/update/post(NodeUpdate)`.
    func NodeUpdate(_ input: Operations.NodeUpdate.Input) async throws -> Operations.NodeUpdate.Output
    /// Inspect swarm
    ///
    /// - Remark: HTTP `GET /swarm`.
    /// - Remark: Generated from `#/paths//swarm/get(SwarmInspect)`.
    func SwarmInspect(_ input: Operations.SwarmInspect.Input) async throws -> Operations.SwarmInspect.Output
    /// Initialize a new swarm
    ///
    /// - Remark: HTTP `POST /swarm/init`.
    /// - Remark: Generated from `#/paths//swarm/init/post(SwarmInit)`.
    func SwarmInit(_ input: Operations.SwarmInit.Input) async throws -> Operations.SwarmInit.Output
    /// Join an existing swarm
    ///
    /// - Remark: HTTP `POST /swarm/join`.
    /// - Remark: Generated from `#/paths//swarm/join/post(SwarmJoin)`.
    func SwarmJoin(_ input: Operations.SwarmJoin.Input) async throws -> Operations.SwarmJoin.Output
    /// Leave a swarm
    ///
    /// - Remark: HTTP `POST /swarm/leave`.
    /// - Remark: Generated from `#/paths//swarm/leave/post(SwarmLeave)`.
    func SwarmLeave(_ input: Operations.SwarmLeave.Input) async throws -> Operations.SwarmLeave.Output
    /// Update a swarm
    ///
    /// - Remark: HTTP `POST /swarm/update`.
    /// - Remark: Generated from `#/paths//swarm/update/post(SwarmUpdate)`.
    func SwarmUpdate(_ input: Operations.SwarmUpdate.Input) async throws -> Operations.SwarmUpdate.Output
    /// Get the unlock key
    ///
    /// - Remark: HTTP `GET /swarm/unlockkey`.
    /// - Remark: Generated from `#/paths//swarm/unlockkey/get(SwarmUnlockkey)`.
    func SwarmUnlockkey(_ input: Operations.SwarmUnlockkey.Input) async throws -> Operations.SwarmUnlockkey.Output
    /// Unlock a locked manager
    ///
    /// - Remark: HTTP `POST /swarm/unlock`.
    /// - Remark: Generated from `#/paths//swarm/unlock/post(SwarmUnlock)`.
    func SwarmUnlock(_ input: Operations.SwarmUnlock.Input) async throws -> Operations.SwarmUnlock.Output
    /// List services
    ///
    /// - Remark: HTTP `GET /services`.
    /// - Remark: Generated from `#/paths//services/get(ServiceList)`.
    func ServiceList(_ input: Operations.ServiceList.Input) async throws -> Operations.ServiceList.Output
    /// Create a service
    ///
    /// - Remark: HTTP `POST /services/create`.
    /// - Remark: Generated from `#/paths//services/create/post(ServiceCreate)`.
    func ServiceCreate(_ input: Operations.ServiceCreate.Input) async throws -> Operations.ServiceCreate.Output
    /// Inspect a service
    ///
    /// - Remark: HTTP `GET /services/{id}`.
    /// - Remark: Generated from `#/paths//services/{id}/get(ServiceInspect)`.
    func ServiceInspect(_ input: Operations.ServiceInspect.Input) async throws -> Operations.ServiceInspect.Output
    /// Delete a service
    ///
    /// - Remark: HTTP `DELETE /services/{id}`.
    /// - Remark: Generated from `#/paths//services/{id}/delete(ServiceDelete)`.
    func ServiceDelete(_ input: Operations.ServiceDelete.Input) async throws -> Operations.ServiceDelete.Output
    /// Update a service
    ///
    /// - Remark: HTTP `POST /services/{id}/update`.
    /// - Remark: Generated from `#/paths//services/{id}/update/post(ServiceUpdate)`.
    func ServiceUpdate(_ input: Operations.ServiceUpdate.Input) async throws -> Operations.ServiceUpdate.Output
    /// Get service logs
    ///
    /// Get `stdout` and `stderr` logs from a service. See also
    /// [`/containers/{id}/logs`](#operation/ContainerLogs).
    ///
    /// **Note**: This endpoint works only for services with the `local`,
    /// `json-file` or `journald` logging drivers.
    ///
    ///
    /// - Remark: HTTP `GET /services/{id}/logs`.
    /// - Remark: Generated from `#/paths//services/{id}/logs/get(ServiceLogs)`.
    func ServiceLogs(_ input: Operations.ServiceLogs.Input) async throws -> Operations.ServiceLogs.Output
    /// List tasks
    ///
    /// - Remark: HTTP `GET /tasks`.
    /// - Remark: Generated from `#/paths//tasks/get(TaskList)`.
    func TaskList(_ input: Operations.TaskList.Input) async throws -> Operations.TaskList.Output
    /// Inspect a task
    ///
    /// - Remark: HTTP `GET /tasks/{id}`.
    /// - Remark: Generated from `#/paths//tasks/{id}/get(TaskInspect)`.
    func TaskInspect(_ input: Operations.TaskInspect.Input) async throws -> Operations.TaskInspect.Output
    /// Get task logs
    ///
    /// Get `stdout` and `stderr` logs from a task.
    /// See also [`/containers/{id}/logs`](#operation/ContainerLogs).
    ///
    /// **Note**: This endpoint works only for services with the `local`,
    /// `json-file` or `journald` logging drivers.
    ///
    ///
    /// - Remark: HTTP `GET /tasks/{id}/logs`.
    /// - Remark: Generated from `#/paths//tasks/{id}/logs/get(TaskLogs)`.
    func TaskLogs(_ input: Operations.TaskLogs.Input) async throws -> Operations.TaskLogs.Output
    /// List secrets
    ///
    /// - Remark: HTTP `GET /secrets`.
    /// - Remark: Generated from `#/paths//secrets/get(SecretList)`.
    func SecretList(_ input: Operations.SecretList.Input) async throws -> Operations.SecretList.Output
    /// Create a secret
    ///
    /// - Remark: HTTP `POST /secrets/create`.
    /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)`.
    func SecretCreate(_ input: Operations.SecretCreate.Input) async throws -> Operations.SecretCreate.Output
    /// Inspect a secret
    ///
    /// - Remark: HTTP `GET /secrets/{id}`.
    /// - Remark: Generated from `#/paths//secrets/{id}/get(SecretInspect)`.
    func SecretInspect(_ input: Operations.SecretInspect.Input) async throws -> Operations.SecretInspect.Output
    /// Delete a secret
    ///
    /// - Remark: HTTP `DELETE /secrets/{id}`.
    /// - Remark: Generated from `#/paths//secrets/{id}/delete(SecretDelete)`.
    func SecretDelete(_ input: Operations.SecretDelete.Input) async throws -> Operations.SecretDelete.Output
    /// Update a Secret
    ///
    /// - Remark: HTTP `POST /secrets/{id}/update`.
    /// - Remark: Generated from `#/paths//secrets/{id}/update/post(SecretUpdate)`.
    func SecretUpdate(_ input: Operations.SecretUpdate.Input) async throws -> Operations.SecretUpdate.Output
    /// List configs
    ///
    /// - Remark: HTTP `GET /configs`.
    /// - Remark: Generated from `#/paths//configs/get(ConfigList)`.
    func ConfigList(_ input: Operations.ConfigList.Input) async throws -> Operations.ConfigList.Output
    /// Create a config
    ///
    /// - Remark: HTTP `POST /configs/create`.
    /// - Remark: Generated from `#/paths//configs/create/post(ConfigCreate)`.
    func ConfigCreate(_ input: Operations.ConfigCreate.Input) async throws -> Operations.ConfigCreate.Output
    /// Inspect a config
    ///
    /// - Remark: HTTP `GET /configs/{id}`.
    /// - Remark: Generated from `#/paths//configs/{id}/get(ConfigInspect)`.
    func ConfigInspect(_ input: Operations.ConfigInspect.Input) async throws -> Operations.ConfigInspect.Output
    /// Delete a config
    ///
    /// - Remark: HTTP `DELETE /configs/{id}`.
    /// - Remark: Generated from `#/paths//configs/{id}/delete(ConfigDelete)`.
    func ConfigDelete(_ input: Operations.ConfigDelete.Input) async throws -> Operations.ConfigDelete.Output
    /// Update a Config
    ///
    /// - Remark: HTTP `POST /configs/{id}/update`.
    /// - Remark: Generated from `#/paths//configs/{id}/update/post(ConfigUpdate)`.
    func ConfigUpdate(_ input: Operations.ConfigUpdate.Input) async throws -> Operations.ConfigUpdate.Output
    /// Get image information from the registry
    ///
    /// Return image digest and platform information by contacting the registry.
    ///
    ///
    /// - Remark: HTTP `GET /distribution/{name}/json`.
    /// - Remark: Generated from `#/paths//distribution/{name}/json/get(DistributionInspect)`.
    func DistributionInspect(_ input: Operations.DistributionInspect.Input) async throws -> Operations.DistributionInspect.Output
    /// Initialize interactive session
    ///
    /// Start a new interactive session with a server. Session allows server to
    /// call back to the client for advanced capabilities.
    ///
    /// ### Hijacking
    ///
    /// This endpoint hijacks the HTTP connection to HTTP2 transport that allows
    /// the client to expose gPRC services on that connection.
    ///
    /// For example, the client sends this request to upgrade the connection:
    ///
    /// ```
    /// POST /session HTTP/1.1
    /// Upgrade: h2c
    /// Connection: Upgrade
    /// ```
    ///
    /// The Docker daemon responds with a `101 UPGRADED` response follow with
    /// the raw stream:
    ///
    /// ```
    /// HTTP/1.1 101 UPGRADED
    /// Connection: Upgrade
    /// Upgrade: h2c
    /// ```
    ///
    ///
    /// - Remark: HTTP `POST /session`.
    /// - Remark: Generated from `#/paths//session/post(Session)`.
    func Session(_ input: Operations.Session.Input) async throws -> Operations.Session.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List containers
    ///
    /// Returns a list of containers. For details on the format, see the
    /// [inspect endpoint](#operation/ContainerInspect).
    ///
    /// Note that it uses a different, smaller representation of a container
    /// than inspecting a single container. For example, the list of linked
    /// containers is not propagated .
    ///
    ///
    /// - Remark: HTTP `GET /containers/json`.
    /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)`.
    package func ContainerList(
        query: Operations.ContainerList.Input.Query = .init(),
        headers: Operations.ContainerList.Input.Headers = .init()
    ) async throws -> Operations.ContainerList.Output {
        try await ContainerList(Operations.ContainerList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a container
    ///
    /// - Remark: HTTP `POST /containers/create`.
    /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)`.
    package func ContainerCreate(
        query: Operations.ContainerCreate.Input.Query = .init(),
        headers: Operations.ContainerCreate.Input.Headers = .init(),
        body: Operations.ContainerCreate.Input.Body
    ) async throws -> Operations.ContainerCreate.Output {
        try await ContainerCreate(Operations.ContainerCreate.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Inspect a container
    ///
    /// Return low-level information about a container.
    ///
    /// - Remark: HTTP `GET /containers/{id}/json`.
    /// - Remark: Generated from `#/paths//containers/{id}/json/get(ContainerInspect)`.
    package func ContainerInspect(
        path: Operations.ContainerInspect.Input.Path,
        query: Operations.ContainerInspect.Input.Query = .init(),
        headers: Operations.ContainerInspect.Input.Headers = .init()
    ) async throws -> Operations.ContainerInspect.Output {
        try await ContainerInspect(Operations.ContainerInspect.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List processes running inside a container
    ///
    /// On Unix systems, this is done by running the `ps` command. This endpoint
    /// is not supported on Windows.
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/top`.
    /// - Remark: Generated from `#/paths//containers/{id}/top/get(ContainerTop)`.
    package func ContainerTop(
        path: Operations.ContainerTop.Input.Path,
        query: Operations.ContainerTop.Input.Query = .init(),
        headers: Operations.ContainerTop.Input.Headers = .init()
    ) async throws -> Operations.ContainerTop.Output {
        try await ContainerTop(Operations.ContainerTop.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get container logs
    ///
    /// Get `stdout` and `stderr` logs from a container.
    ///
    /// Note: This endpoint works only for containers with the `json-file` or
    /// `journald` logging driver.
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/logs`.
    /// - Remark: Generated from `#/paths//containers/{id}/logs/get(ContainerLogs)`.
    package func ContainerLogs(
        path: Operations.ContainerLogs.Input.Path,
        query: Operations.ContainerLogs.Input.Query = .init(),
        headers: Operations.ContainerLogs.Input.Headers = .init()
    ) async throws -> Operations.ContainerLogs.Output {
        try await ContainerLogs(Operations.ContainerLogs.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get changes on a container’s filesystem
    ///
    /// Returns which files in a container's filesystem have been added, deleted,
    /// or modified. The `Kind` of modification can be one of:
    ///
    /// - `0`: Modified ("C")
    /// - `1`: Added ("A")
    /// - `2`: Deleted ("D")
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/changes`.
    /// - Remark: Generated from `#/paths//containers/{id}/changes/get(ContainerChanges)`.
    package func ContainerChanges(
        path: Operations.ContainerChanges.Input.Path,
        headers: Operations.ContainerChanges.Input.Headers = .init()
    ) async throws -> Operations.ContainerChanges.Output {
        try await ContainerChanges(Operations.ContainerChanges.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export a container
    ///
    /// Export the contents of a container as a tarball.
    ///
    /// - Remark: HTTP `GET /containers/{id}/export`.
    /// - Remark: Generated from `#/paths//containers/{id}/export/get(ContainerExport)`.
    package func ContainerExport(
        path: Operations.ContainerExport.Input.Path,
        headers: Operations.ContainerExport.Input.Headers = .init()
    ) async throws -> Operations.ContainerExport.Output {
        try await ContainerExport(Operations.ContainerExport.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get container stats based on resource usage
    ///
    /// This endpoint returns a live stream of a container’s resource usage
    /// statistics.
    ///
    /// The `precpu_stats` is the CPU statistic of the *previous* read, and is
    /// used to calculate the CPU usage percentage. It is not an exact copy
    /// of the `cpu_stats` field.
    ///
    /// If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
    /// nil then for compatibility with older daemons the length of the
    /// corresponding `cpu_usage.percpu_usage` array should be used.
    ///
    /// On a cgroup v2 host, the following fields are not set
    /// * `blkio_stats`: all fields other than `io_service_bytes_recursive`
    /// * `cpu_stats`: `cpu_usage.percpu_usage`
    /// * `memory_stats`: `max_usage` and `failcnt`
    /// Also, `memory_stats.stats` fields are incompatible with cgroup v1.
    ///
    /// To calculate the values shown by the `stats` command of the docker cli tool
    /// the following formulas can be used:
    /// * used_memory = `memory_stats.usage - memory_stats.stats.cache`
    /// * available_memory = `memory_stats.limit`
    /// * Memory usage % = `(used_memory / available_memory) * 100.0`
    /// * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`
    /// * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`
    /// * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`
    /// * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/stats`.
    /// - Remark: Generated from `#/paths//containers/{id}/stats/get(ContainerStats)`.
    package func ContainerStats(
        path: Operations.ContainerStats.Input.Path,
        query: Operations.ContainerStats.Input.Query = .init(),
        headers: Operations.ContainerStats.Input.Headers = .init()
    ) async throws -> Operations.ContainerStats.Output {
        try await ContainerStats(Operations.ContainerStats.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Resize a container TTY
    ///
    /// Resize the TTY for a container.
    ///
    /// - Remark: HTTP `POST /containers/{id}/resize`.
    /// - Remark: Generated from `#/paths//containers/{id}/resize/post(ContainerResize)`.
    package func ContainerResize(
        path: Operations.ContainerResize.Input.Path,
        query: Operations.ContainerResize.Input.Query = .init(),
        headers: Operations.ContainerResize.Input.Headers = .init()
    ) async throws -> Operations.ContainerResize.Output {
        try await ContainerResize(Operations.ContainerResize.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Start a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/start`.
    /// - Remark: Generated from `#/paths//containers/{id}/start/post(ContainerStart)`.
    package func ContainerStart(
        path: Operations.ContainerStart.Input.Path,
        query: Operations.ContainerStart.Input.Query = .init(),
        headers: Operations.ContainerStart.Input.Headers = .init()
    ) async throws -> Operations.ContainerStart.Output {
        try await ContainerStart(Operations.ContainerStart.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Stop a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/stop`.
    /// - Remark: Generated from `#/paths//containers/{id}/stop/post(ContainerStop)`.
    package func ContainerStop(
        path: Operations.ContainerStop.Input.Path,
        query: Operations.ContainerStop.Input.Query = .init(),
        headers: Operations.ContainerStop.Input.Headers = .init()
    ) async throws -> Operations.ContainerStop.Output {
        try await ContainerStop(Operations.ContainerStop.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Restart a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/restart`.
    /// - Remark: Generated from `#/paths//containers/{id}/restart/post(ContainerRestart)`.
    package func ContainerRestart(
        path: Operations.ContainerRestart.Input.Path,
        query: Operations.ContainerRestart.Input.Query = .init(),
        headers: Operations.ContainerRestart.Input.Headers = .init()
    ) async throws -> Operations.ContainerRestart.Output {
        try await ContainerRestart(Operations.ContainerRestart.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Kill a container
    ///
    /// Send a POSIX signal to a container, defaulting to killing to the
    /// container.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/kill`.
    /// - Remark: Generated from `#/paths//containers/{id}/kill/post(ContainerKill)`.
    package func ContainerKill(
        path: Operations.ContainerKill.Input.Path,
        query: Operations.ContainerKill.Input.Query = .init(),
        headers: Operations.ContainerKill.Input.Headers = .init()
    ) async throws -> Operations.ContainerKill.Output {
        try await ContainerKill(Operations.ContainerKill.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Update a container
    ///
    /// Change various configuration options of a container without having to
    /// recreate it.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/update`.
    /// - Remark: Generated from `#/paths//containers/{id}/update/post(ContainerUpdate)`.
    package func ContainerUpdate(
        path: Operations.ContainerUpdate.Input.Path,
        headers: Operations.ContainerUpdate.Input.Headers = .init(),
        body: Operations.ContainerUpdate.Input.Body
    ) async throws -> Operations.ContainerUpdate.Output {
        try await ContainerUpdate(Operations.ContainerUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Rename a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/rename`.
    /// - Remark: Generated from `#/paths//containers/{id}/rename/post(ContainerRename)`.
    package func ContainerRename(
        path: Operations.ContainerRename.Input.Path,
        query: Operations.ContainerRename.Input.Query,
        headers: Operations.ContainerRename.Input.Headers = .init()
    ) async throws -> Operations.ContainerRename.Output {
        try await ContainerRename(Operations.ContainerRename.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Pause a container
    ///
    /// Use the freezer cgroup to suspend all processes in a container.
    ///
    /// Traditionally, when suspending a process the `SIGSTOP` signal is used,
    /// which is observable by the process being suspended. With the freezer
    /// cgroup the process is unaware, and unable to capture, that it is being
    /// suspended, and subsequently resumed.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/pause`.
    /// - Remark: Generated from `#/paths//containers/{id}/pause/post(ContainerPause)`.
    package func ContainerPause(
        path: Operations.ContainerPause.Input.Path,
        headers: Operations.ContainerPause.Input.Headers = .init()
    ) async throws -> Operations.ContainerPause.Output {
        try await ContainerPause(Operations.ContainerPause.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unpause a container
    ///
    /// Resume a container which has been paused.
    ///
    /// - Remark: HTTP `POST /containers/{id}/unpause`.
    /// - Remark: Generated from `#/paths//containers/{id}/unpause/post(ContainerUnpause)`.
    package func ContainerUnpause(
        path: Operations.ContainerUnpause.Input.Path,
        headers: Operations.ContainerUnpause.Input.Headers = .init()
    ) async throws -> Operations.ContainerUnpause.Output {
        try await ContainerUnpause(Operations.ContainerUnpause.Input(
            path: path,
            headers: headers
        ))
    }
    /// Attach to a container
    ///
    /// Attach to a container to read its output or send it input. You can attach
    /// to the same container multiple times and you can reattach to containers
    /// that have been detached.
    ///
    /// Either the `stream` or `logs` parameter must be `true` for this endpoint
    /// to do anything.
    ///
    /// See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/)
    /// for more details.
    ///
    /// ### Hijacking
    ///
    /// This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
    /// and `stderr` on the same socket.
    ///
    /// This is the response from the daemon for an attach request:
    ///
    /// ```
    /// HTTP/1.1 200 OK
    /// Content-Type: application/vnd.docker.raw-stream
    ///
    /// [STREAM]
    /// ```
    ///
    /// After the headers and two new lines, the TCP connection can now be used
    /// for raw, bidirectional communication between the client and server.
    ///
    /// To hint potential proxies about connection hijacking, the Docker client
    /// can also optionally send connection upgrade headers.
    ///
    /// For example, the client sends this request to upgrade the connection:
    ///
    /// ```
    /// POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
    /// Upgrade: tcp
    /// Connection: Upgrade
    /// ```
    ///
    /// The Docker daemon will respond with a `101 UPGRADED` response, and will
    /// similarly follow with the raw stream:
    ///
    /// ```
    /// HTTP/1.1 101 UPGRADED
    /// Content-Type: application/vnd.docker.raw-stream
    /// Connection: Upgrade
    /// Upgrade: tcp
    ///
    /// [STREAM]
    /// ```
    ///
    /// ### Stream format
    ///
    /// When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),
    /// the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream
    /// and the stream over the hijacked connected is multiplexed to separate out
    /// `stdout` and `stderr`. The stream consists of a series of frames, each
    /// containing a header and a payload.
    ///
    /// The header contains the information which the stream writes (`stdout` or
    /// `stderr`). It also contains the size of the associated frame encoded in
    /// the last four bytes (`uint32`).
    ///
    /// It is encoded on the first eight bytes like this:
    ///
    /// ```go
    /// header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
    /// ```
    ///
    /// `STREAM_TYPE` can be:
    ///
    /// - 0: `stdin` (is written on `stdout`)
    /// - 1: `stdout`
    /// - 2: `stderr`
    ///
    /// `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
    /// encoded as big endian.
    ///
    /// Following the header is the payload, which is the specified number of
    /// bytes of `STREAM_TYPE`.
    ///
    /// The simplest way to implement this protocol is the following:
    ///
    /// 1. Read 8 bytes.
    /// 2. Choose `stdout` or `stderr` depending on the first byte.
    /// 3. Extract the frame size from the last four bytes.
    /// 4. Read the extracted size and output it on the correct output.
    /// 5. Goto 1.
    ///
    /// ### Stream format when using a TTY
    ///
    /// When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate),
    /// the stream is not multiplexed. The data exchanged over the hijacked
    /// connection is simply the raw data from the process PTY and client's
    /// `stdin`.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/attach`.
    /// - Remark: Generated from `#/paths//containers/{id}/attach/post(ContainerAttach)`.
    package func ContainerAttach(
        path: Operations.ContainerAttach.Input.Path,
        query: Operations.ContainerAttach.Input.Query = .init(),
        headers: Operations.ContainerAttach.Input.Headers = .init()
    ) async throws -> Operations.ContainerAttach.Output {
        try await ContainerAttach(Operations.ContainerAttach.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Attach to a container via a websocket
    ///
    /// - Remark: HTTP `GET /containers/{id}/attach/ws`.
    /// - Remark: Generated from `#/paths//containers/{id}/attach/ws/get(ContainerAttachWebsocket)`.
    package func ContainerAttachWebsocket(
        path: Operations.ContainerAttachWebsocket.Input.Path,
        query: Operations.ContainerAttachWebsocket.Input.Query = .init(),
        headers: Operations.ContainerAttachWebsocket.Input.Headers = .init()
    ) async throws -> Operations.ContainerAttachWebsocket.Output {
        try await ContainerAttachWebsocket(Operations.ContainerAttachWebsocket.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Wait for a container
    ///
    /// Block until a container stops, then returns the exit code.
    ///
    /// - Remark: HTTP `POST /containers/{id}/wait`.
    /// - Remark: Generated from `#/paths//containers/{id}/wait/post(ContainerWait)`.
    package func ContainerWait(
        path: Operations.ContainerWait.Input.Path,
        query: Operations.ContainerWait.Input.Query = .init(),
        headers: Operations.ContainerWait.Input.Headers = .init()
    ) async throws -> Operations.ContainerWait.Output {
        try await ContainerWait(Operations.ContainerWait.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Remove a container
    ///
    /// - Remark: HTTP `DELETE /containers/{id}`.
    /// - Remark: Generated from `#/paths//containers/{id}/delete(ContainerDelete)`.
    package func ContainerDelete(
        path: Operations.ContainerDelete.Input.Path,
        query: Operations.ContainerDelete.Input.Query = .init(),
        headers: Operations.ContainerDelete.Input.Headers = .init()
    ) async throws -> Operations.ContainerDelete.Output {
        try await ContainerDelete(Operations.ContainerDelete.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an archive of a filesystem resource in a container
    ///
    /// Get a tar archive of a resource in the filesystem of container id.
    ///
    /// - Remark: HTTP `GET /containers/{id}/archive`.
    /// - Remark: Generated from `#/paths//containers/{id}/archive/get(ContainerArchive)`.
    package func ContainerArchive(
        path: Operations.ContainerArchive.Input.Path,
        query: Operations.ContainerArchive.Input.Query,
        headers: Operations.ContainerArchive.Input.Headers = .init()
    ) async throws -> Operations.ContainerArchive.Output {
        try await ContainerArchive(Operations.ContainerArchive.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Extract an archive of files or folders to a directory in a container
    ///
    /// Upload a tar archive to be extracted to a path in the filesystem of container id.
    /// `path` parameter is asserted to be a directory. If it exists as a file, 400 error
    /// will be returned with message "not a directory".
    ///
    ///
    /// - Remark: HTTP `PUT /containers/{id}/archive`.
    /// - Remark: Generated from `#/paths//containers/{id}/archive/put(PutContainerArchive)`.
    package func PutContainerArchive(
        path: Operations.PutContainerArchive.Input.Path,
        query: Operations.PutContainerArchive.Input.Query,
        headers: Operations.PutContainerArchive.Input.Headers = .init(),
        body: Operations.PutContainerArchive.Input.Body
    ) async throws -> Operations.PutContainerArchive.Output {
        try await PutContainerArchive(Operations.PutContainerArchive.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Get information about files in a container
    ///
    /// A response header `X-Docker-Container-Path-Stat` is returned, containing
    /// a base64 - encoded JSON object with some filesystem header information
    /// about the path.
    ///
    ///
    /// - Remark: HTTP `HEAD /containers/{id}/archive`.
    /// - Remark: Generated from `#/paths//containers/{id}/archive/head(ContainerArchiveInfo)`.
    package func ContainerArchiveInfo(
        path: Operations.ContainerArchiveInfo.Input.Path,
        query: Operations.ContainerArchiveInfo.Input.Query,
        headers: Operations.ContainerArchiveInfo.Input.Headers = .init()
    ) async throws -> Operations.ContainerArchiveInfo.Output {
        try await ContainerArchiveInfo(Operations.ContainerArchiveInfo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Delete stopped containers
    ///
    /// - Remark: HTTP `POST /containers/prune`.
    /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)`.
    package func ContainerPrune(
        query: Operations.ContainerPrune.Input.Query = .init(),
        headers: Operations.ContainerPrune.Input.Headers = .init()
    ) async throws -> Operations.ContainerPrune.Output {
        try await ContainerPrune(Operations.ContainerPrune.Input(
            query: query,
            headers: headers
        ))
    }
    /// List Images
    ///
    /// Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
    ///
    /// - Remark: HTTP `GET /images/json`.
    /// - Remark: Generated from `#/paths//images/json/get(ImageList)`.
    package func ImageList(
        query: Operations.ImageList.Input.Query = .init(),
        headers: Operations.ImageList.Input.Headers = .init()
    ) async throws -> Operations.ImageList.Output {
        try await ImageList(Operations.ImageList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Build an image
    ///
    /// Build an image from a tar archive with a `Dockerfile` in it.
    ///
    /// The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).
    ///
    /// The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.
    ///
    /// The build is canceled if the client drops the connection by quitting or being killed.
    ///
    ///
    /// - Remark: HTTP `POST /build`.
    /// - Remark: Generated from `#/paths//build/post(ImageBuild)`.
    package func ImageBuild(
        query: Operations.ImageBuild.Input.Query = .init(),
        headers: Operations.ImageBuild.Input.Headers = .init(),
        body: Operations.ImageBuild.Input.Body? = nil
    ) async throws -> Operations.ImageBuild.Output {
        try await ImageBuild(Operations.ImageBuild.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Delete builder cache
    ///
    /// - Remark: HTTP `POST /build/prune`.
    /// - Remark: Generated from `#/paths//build/prune/post(BuildPrune)`.
    package func BuildPrune(
        query: Operations.BuildPrune.Input.Query = .init(),
        headers: Operations.BuildPrune.Input.Headers = .init()
    ) async throws -> Operations.BuildPrune.Output {
        try await BuildPrune(Operations.BuildPrune.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create an image
    ///
    /// Pull or import an image.
    ///
    /// - Remark: HTTP `POST /images/create`.
    /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)`.
    package func ImageCreate(
        query: Operations.ImageCreate.Input.Query = .init(),
        headers: Operations.ImageCreate.Input.Headers = .init(),
        body: Operations.ImageCreate.Input.Body? = nil
    ) async throws -> Operations.ImageCreate.Output {
        try await ImageCreate(Operations.ImageCreate.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Inspect an image
    ///
    /// Return low-level information about an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/json`.
    /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)`.
    package func ImageInspect(
        path: Operations.ImageInspect.Input.Path,
        headers: Operations.ImageInspect.Input.Headers = .init()
    ) async throws -> Operations.ImageInspect.Output {
        try await ImageInspect(Operations.ImageInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get the history of an image
    ///
    /// Return parent layers of an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/history`.
    /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)`.
    package func ImageHistory(
        path: Operations.ImageHistory.Input.Path,
        headers: Operations.ImageHistory.Input.Headers = .init()
    ) async throws -> Operations.ImageHistory.Output {
        try await ImageHistory(Operations.ImageHistory.Input(
            path: path,
            headers: headers
        ))
    }
    /// Push an image
    ///
    /// Push an image to a registry.
    ///
    /// If you wish to push an image on to a private registry, that image must
    /// already have a tag which references the registry. For example,
    /// `registry.example.com/myimage:latest`.
    ///
    /// The push is cancelled if the HTTP connection is closed.
    ///
    ///
    /// - Remark: HTTP `POST /images/{name}/push`.
    /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)`.
    package func ImagePush(
        path: Operations.ImagePush.Input.Path,
        query: Operations.ImagePush.Input.Query = .init(),
        headers: Operations.ImagePush.Input.Headers
    ) async throws -> Operations.ImagePush.Output {
        try await ImagePush(Operations.ImagePush.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Tag an image
    ///
    /// Tag an image so that it becomes part of a repository.
    ///
    /// - Remark: HTTP `POST /images/{name}/tag`.
    /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)`.
    package func ImageTag(
        path: Operations.ImageTag.Input.Path,
        query: Operations.ImageTag.Input.Query = .init(),
        headers: Operations.ImageTag.Input.Headers = .init()
    ) async throws -> Operations.ImageTag.Output {
        try await ImageTag(Operations.ImageTag.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Remove an image
    ///
    /// Remove an image, along with any untagged parent images that were
    /// referenced by that image.
    ///
    /// Images can't be removed if they have descendant images, are being
    /// used by a running container or are being used by a build.
    ///
    ///
    /// - Remark: HTTP `DELETE /images/{name}`.
    /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)`.
    package func ImageDelete(
        path: Operations.ImageDelete.Input.Path,
        query: Operations.ImageDelete.Input.Query = .init(),
        headers: Operations.ImageDelete.Input.Headers = .init()
    ) async throws -> Operations.ImageDelete.Output {
        try await ImageDelete(Operations.ImageDelete.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Search images
    ///
    /// Search for an image on Docker Hub.
    ///
    /// - Remark: HTTP `GET /images/search`.
    /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)`.
    package func ImageSearch(
        query: Operations.ImageSearch.Input.Query,
        headers: Operations.ImageSearch.Input.Headers = .init()
    ) async throws -> Operations.ImageSearch.Output {
        try await ImageSearch(Operations.ImageSearch.Input(
            query: query,
            headers: headers
        ))
    }
    /// Delete unused images
    ///
    /// - Remark: HTTP `POST /images/prune`.
    /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)`.
    package func ImagePrune(
        query: Operations.ImagePrune.Input.Query = .init(),
        headers: Operations.ImagePrune.Input.Headers = .init()
    ) async throws -> Operations.ImagePrune.Output {
        try await ImagePrune(Operations.ImagePrune.Input(
            query: query,
            headers: headers
        ))
    }
    /// Check auth configuration
    ///
    /// Validate credentials for a registry and, if available, get an identity
    /// token for accessing the registry without password.
    ///
    ///
    /// - Remark: HTTP `POST /auth`.
    /// - Remark: Generated from `#/paths//auth/post(SystemAuth)`.
    package func SystemAuth(
        headers: Operations.SystemAuth.Input.Headers = .init(),
        body: Operations.SystemAuth.Input.Body? = nil
    ) async throws -> Operations.SystemAuth.Output {
        try await SystemAuth(Operations.SystemAuth.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get system information
    ///
    /// - Remark: HTTP `GET /info`.
    /// - Remark: Generated from `#/paths//info/get(SystemInfo)`.
    package func SystemInfo(headers: Operations.SystemInfo.Input.Headers = .init()) async throws -> Operations.SystemInfo.Output {
        try await SystemInfo(Operations.SystemInfo.Input(headers: headers))
    }
    /// Get version
    ///
    /// Returns the version of Docker that is running and various information about the system that Docker is running on.
    ///
    /// - Remark: HTTP `GET /version`.
    /// - Remark: Generated from `#/paths//version/get(SystemVersion)`.
    package func SystemVersion(headers: Operations.SystemVersion.Input.Headers = .init()) async throws -> Operations.SystemVersion.Output {
        try await SystemVersion(Operations.SystemVersion.Input(headers: headers))
    }
    /// Ping
    ///
    /// This is a dummy endpoint you can use to test if the server is accessible.
    ///
    /// - Remark: HTTP `GET /_ping`.
    /// - Remark: Generated from `#/paths//_ping/get(SystemPing)`.
    package func SystemPing(headers: Operations.SystemPing.Input.Headers = .init()) async throws -> Operations.SystemPing.Output {
        try await SystemPing(Operations.SystemPing.Input(headers: headers))
    }
    /// Ping
    ///
    /// This is a dummy endpoint you can use to test if the server is accessible.
    ///
    /// - Remark: HTTP `HEAD /_ping`.
    /// - Remark: Generated from `#/paths//_ping/head(SystemPingHead)`.
    package func SystemPingHead(headers: Operations.SystemPingHead.Input.Headers = .init()) async throws -> Operations.SystemPingHead.Output {
        try await SystemPingHead(Operations.SystemPingHead.Input(headers: headers))
    }
    /// Create a new image from a container
    ///
    /// - Remark: HTTP `POST /commit`.
    /// - Remark: Generated from `#/paths//commit/post(ImageCommit)`.
    package func ImageCommit(
        query: Operations.ImageCommit.Input.Query = .init(),
        headers: Operations.ImageCommit.Input.Headers = .init(),
        body: Operations.ImageCommit.Input.Body? = nil
    ) async throws -> Operations.ImageCommit.Output {
        try await ImageCommit(Operations.ImageCommit.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Monitor events
    ///
    /// Stream real-time events from the server.
    ///
    /// Various objects within Docker report events when something happens to them.
    ///
    /// Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`
    ///
    /// Images report these events: `create, `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`
    ///
    /// Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`
    ///
    /// Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`
    ///
    /// The Docker daemon reports these events: `reload`
    ///
    /// Services report these events: `create`, `update`, and `remove`
    ///
    /// Nodes report these events: `create`, `update`, and `remove`
    ///
    /// Secrets report these events: `create`, `update`, and `remove`
    ///
    /// Configs report these events: `create`, `update`, and `remove`
    ///
    /// The Builder reports `prune` events
    ///
    ///
    /// - Remark: HTTP `GET /events`.
    /// - Remark: Generated from `#/paths//events/get(SystemEvents)`.
    package func SystemEvents(
        query: Operations.SystemEvents.Input.Query = .init(),
        headers: Operations.SystemEvents.Input.Headers = .init()
    ) async throws -> Operations.SystemEvents.Output {
        try await SystemEvents(Operations.SystemEvents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get data usage information
    ///
    /// - Remark: HTTP `GET /system/df`.
    /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)`.
    package func SystemDataUsage(
        query: Operations.SystemDataUsage.Input.Query = .init(),
        headers: Operations.SystemDataUsage.Input.Headers = .init()
    ) async throws -> Operations.SystemDataUsage.Output {
        try await SystemDataUsage(Operations.SystemDataUsage.Input(
            query: query,
            headers: headers
        ))
    }
    /// Export an image
    ///
    /// Get a tarball containing all images and metadata for a repository.
    ///
    /// If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.
    ///
    /// ### Image tarball format
    ///
    /// An image tarball contains one directory per image layer (named using its long ID), each containing these files:
    ///
    /// - `VERSION`: currently `1.0` - the file format version
    /// - `json`: detailed layer information, similar to `docker inspect layer_id`
    /// - `layer.tar`: A tarfile containing the filesystem changes in this layer
    ///
    /// The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.
    ///
    /// If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.
    ///
    /// ```json
    /// {
    ///   "hello-world": {
    ///     "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
    ///   }
    /// }
    /// ```
    ///
    ///
    /// - Remark: HTTP `GET /images/{name}/get`.
    /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)`.
    package func ImageGet(
        path: Operations.ImageGet.Input.Path,
        headers: Operations.ImageGet.Input.Headers = .init()
    ) async throws -> Operations.ImageGet.Output {
        try await ImageGet(Operations.ImageGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export several images
    ///
    /// Get a tarball containing all images and metadata for several image
    /// repositories.
    ///
    /// For each value of the `names` parameter: if it is a specific name and
    /// tag (e.g. `ubuntu:latest`), then only that image (and its parents) are
    /// returned; if it is an image ID, similarly only that image (and its parents)
    /// are returned and there would be no names referenced in the 'repositories'
    /// file for this image ID.
    ///
    /// For details on the format, see the [export image endpoint](#operation/ImageGet).
    ///
    ///
    /// - Remark: HTTP `GET /images/get`.
    /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)`.
    package func ImageGetAll(
        query: Operations.ImageGetAll.Input.Query = .init(),
        headers: Operations.ImageGetAll.Input.Headers = .init()
    ) async throws -> Operations.ImageGetAll.Output {
        try await ImageGetAll(Operations.ImageGetAll.Input(
            query: query,
            headers: headers
        ))
    }
    /// Import images
    ///
    /// Load a set of images and tags into a repository.
    ///
    /// For details on the format, see the [export image endpoint](#operation/ImageGet).
    ///
    ///
    /// - Remark: HTTP `POST /images/load`.
    /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)`.
    package func ImageLoad(
        query: Operations.ImageLoad.Input.Query = .init(),
        headers: Operations.ImageLoad.Input.Headers = .init(),
        body: Operations.ImageLoad.Input.Body? = nil
    ) async throws -> Operations.ImageLoad.Output {
        try await ImageLoad(Operations.ImageLoad.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Create an exec instance
    ///
    /// Run a command inside a running container.
    ///
    /// - Remark: HTTP `POST /containers/{id}/exec`.
    /// - Remark: Generated from `#/paths//containers/{id}/exec/post(ContainerExec)`.
    package func ContainerExec(
        path: Operations.ContainerExec.Input.Path,
        headers: Operations.ContainerExec.Input.Headers = .init(),
        body: Operations.ContainerExec.Input.Body
    ) async throws -> Operations.ContainerExec.Output {
        try await ContainerExec(Operations.ContainerExec.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Start an exec instance
    ///
    /// Starts a previously set up exec instance. If detach is true, this endpoint
    /// returns immediately after starting the command. Otherwise, it sets up an
    /// interactive session with the command.
    ///
    ///
    /// - Remark: HTTP `POST /exec/{id}/start`.
    /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)`.
    package func ExecStart(
        path: Operations.ExecStart.Input.Path,
        headers: Operations.ExecStart.Input.Headers = .init(),
        body: Operations.ExecStart.Input.Body? = nil
    ) async throws -> Operations.ExecStart.Output {
        try await ExecStart(Operations.ExecStart.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Resize an exec instance
    ///
    /// Resize the TTY session used by an exec instance. This endpoint only works
    /// if `tty` was specified as part of creating and starting the exec instance.
    ///
    ///
    /// - Remark: HTTP `POST /exec/{id}/resize`.
    /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)`.
    package func ExecResize(
        path: Operations.ExecResize.Input.Path,
        query: Operations.ExecResize.Input.Query = .init(),
        headers: Operations.ExecResize.Input.Headers = .init()
    ) async throws -> Operations.ExecResize.Output {
        try await ExecResize(Operations.ExecResize.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Inspect an exec instance
    ///
    /// Return low-level information about an exec instance.
    ///
    /// - Remark: HTTP `GET /exec/{id}/json`.
    /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)`.
    package func ExecInspect(
        path: Operations.ExecInspect.Input.Path,
        headers: Operations.ExecInspect.Input.Headers = .init()
    ) async throws -> Operations.ExecInspect.Output {
        try await ExecInspect(Operations.ExecInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// List volumes
    ///
    /// - Remark: HTTP `GET /volumes`.
    /// - Remark: Generated from `#/paths//volumes/get(VolumeList)`.
    package func VolumeList(
        query: Operations.VolumeList.Input.Query = .init(),
        headers: Operations.VolumeList.Input.Headers = .init()
    ) async throws -> Operations.VolumeList.Output {
        try await VolumeList(Operations.VolumeList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a volume
    ///
    /// - Remark: HTTP `POST /volumes/create`.
    /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)`.
    package func VolumeCreate(
        headers: Operations.VolumeCreate.Input.Headers = .init(),
        body: Operations.VolumeCreate.Input.Body
    ) async throws -> Operations.VolumeCreate.Output {
        try await VolumeCreate(Operations.VolumeCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Inspect a volume
    ///
    /// - Remark: HTTP `GET /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)`.
    package func VolumeInspect(
        path: Operations.VolumeInspect.Input.Path,
        headers: Operations.VolumeInspect.Input.Headers = .init()
    ) async throws -> Operations.VolumeInspect.Output {
        try await VolumeInspect(Operations.VolumeInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// "Update a volume. Valid only for Swarm cluster volumes"
    ///
    ///
    /// - Remark: HTTP `PUT /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/put(VolumeUpdate)`.
    package func VolumeUpdate(
        path: Operations.VolumeUpdate.Input.Path,
        query: Operations.VolumeUpdate.Input.Query,
        headers: Operations.VolumeUpdate.Input.Headers = .init(),
        body: Operations.VolumeUpdate.Input.Body? = nil
    ) async throws -> Operations.VolumeUpdate.Output {
        try await VolumeUpdate(Operations.VolumeUpdate.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Remove a volume
    ///
    /// Instruct the driver to remove the volume.
    ///
    /// - Remark: HTTP `DELETE /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)`.
    package func VolumeDelete(
        path: Operations.VolumeDelete.Input.Path,
        query: Operations.VolumeDelete.Input.Query = .init(),
        headers: Operations.VolumeDelete.Input.Headers = .init()
    ) async throws -> Operations.VolumeDelete.Output {
        try await VolumeDelete(Operations.VolumeDelete.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Delete unused volumes
    ///
    /// - Remark: HTTP `POST /volumes/prune`.
    /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)`.
    package func VolumePrune(
        query: Operations.VolumePrune.Input.Query = .init(),
        headers: Operations.VolumePrune.Input.Headers = .init()
    ) async throws -> Operations.VolumePrune.Output {
        try await VolumePrune(Operations.VolumePrune.Input(
            query: query,
            headers: headers
        ))
    }
    /// List networks
    ///
    /// Returns a list of networks. For details on the format, see the
    /// [network inspect endpoint](#operation/NetworkInspect).
    ///
    /// Note that it uses a different, smaller representation of a network than
    /// inspecting a single network. For example, the list of containers attached
    /// to the network is not propagated in API versions 1.28 and up.
    ///
    ///
    /// - Remark: HTTP `GET /networks`.
    /// - Remark: Generated from `#/paths//networks/get(NetworkList)`.
    package func NetworkList(
        query: Operations.NetworkList.Input.Query = .init(),
        headers: Operations.NetworkList.Input.Headers = .init()
    ) async throws -> Operations.NetworkList.Output {
        try await NetworkList(Operations.NetworkList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inspect a network
    ///
    /// - Remark: HTTP `GET /networks/{id}`.
    /// - Remark: Generated from `#/paths//networks/{id}/get(NetworkInspect)`.
    package func NetworkInspect(
        path: Operations.NetworkInspect.Input.Path,
        query: Operations.NetworkInspect.Input.Query = .init(),
        headers: Operations.NetworkInspect.Input.Headers = .init()
    ) async throws -> Operations.NetworkInspect.Output {
        try await NetworkInspect(Operations.NetworkInspect.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Remove a network
    ///
    /// - Remark: HTTP `DELETE /networks/{id}`.
    /// - Remark: Generated from `#/paths//networks/{id}/delete(NetworkDelete)`.
    package func NetworkDelete(
        path: Operations.NetworkDelete.Input.Path,
        headers: Operations.NetworkDelete.Input.Headers = .init()
    ) async throws -> Operations.NetworkDelete.Output {
        try await NetworkDelete(Operations.NetworkDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a network
    ///
    /// - Remark: HTTP `POST /networks/create`.
    /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)`.
    package func NetworkCreate(
        headers: Operations.NetworkCreate.Input.Headers = .init(),
        body: Operations.NetworkCreate.Input.Body
    ) async throws -> Operations.NetworkCreate.Output {
        try await NetworkCreate(Operations.NetworkCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Connect a container to a network
    ///
    /// The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
    ///
    /// - Remark: HTTP `POST /networks/{id}/connect`.
    /// - Remark: Generated from `#/paths//networks/{id}/connect/post(NetworkConnect)`.
    package func NetworkConnect(
        path: Operations.NetworkConnect.Input.Path,
        headers: Operations.NetworkConnect.Input.Headers = .init(),
        body: Operations.NetworkConnect.Input.Body
    ) async throws -> Operations.NetworkConnect.Output {
        try await NetworkConnect(Operations.NetworkConnect.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Disconnect a container from a network
    ///
    /// - Remark: HTTP `POST /networks/{id}/disconnect`.
    /// - Remark: Generated from `#/paths//networks/{id}/disconnect/post(NetworkDisconnect)`.
    package func NetworkDisconnect(
        path: Operations.NetworkDisconnect.Input.Path,
        headers: Operations.NetworkDisconnect.Input.Headers = .init(),
        body: Operations.NetworkDisconnect.Input.Body
    ) async throws -> Operations.NetworkDisconnect.Output {
        try await NetworkDisconnect(Operations.NetworkDisconnect.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete unused networks
    ///
    /// - Remark: HTTP `POST /networks/prune`.
    /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)`.
    package func NetworkPrune(
        query: Operations.NetworkPrune.Input.Query = .init(),
        headers: Operations.NetworkPrune.Input.Headers = .init()
    ) async throws -> Operations.NetworkPrune.Output {
        try await NetworkPrune(Operations.NetworkPrune.Input(
            query: query,
            headers: headers
        ))
    }
    /// List plugins
    ///
    /// Returns information about installed plugins.
    ///
    /// - Remark: HTTP `GET /plugins`.
    /// - Remark: Generated from `#/paths//plugins/get(PluginList)`.
    package func PluginList(
        query: Operations.PluginList.Input.Query = .init(),
        headers: Operations.PluginList.Input.Headers = .init()
    ) async throws -> Operations.PluginList.Output {
        try await PluginList(Operations.PluginList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get plugin privileges
    ///
    /// - Remark: HTTP `GET /plugins/privileges`.
    /// - Remark: Generated from `#/paths//plugins/privileges/get(GetPluginPrivileges)`.
    package func GetPluginPrivileges(
        query: Operations.GetPluginPrivileges.Input.Query,
        headers: Operations.GetPluginPrivileges.Input.Headers = .init()
    ) async throws -> Operations.GetPluginPrivileges.Output {
        try await GetPluginPrivileges(Operations.GetPluginPrivileges.Input(
            query: query,
            headers: headers
        ))
    }
    /// Install a plugin
    ///
    /// Pulls and installs a plugin. After the plugin is installed, it can be
    /// enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).
    ///
    ///
    /// - Remark: HTTP `POST /plugins/pull`.
    /// - Remark: Generated from `#/paths//plugins/pull/post(PluginPull)`.
    package func PluginPull(
        query: Operations.PluginPull.Input.Query,
        headers: Operations.PluginPull.Input.Headers = .init(),
        body: Components.RequestBodies.PluginPrivilegeArray? = nil
    ) async throws -> Operations.PluginPull.Output {
        try await PluginPull(Operations.PluginPull.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Inspect a plugin
    ///
    /// - Remark: HTTP `GET /plugins/{name}/json`.
    /// - Remark: Generated from `#/paths//plugins/{name}/json/get(PluginInspect)`.
    package func PluginInspect(
        path: Operations.PluginInspect.Input.Path,
        headers: Operations.PluginInspect.Input.Headers = .init()
    ) async throws -> Operations.PluginInspect.Output {
        try await PluginInspect(Operations.PluginInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove a plugin
    ///
    /// - Remark: HTTP `DELETE /plugins/{name}`.
    /// - Remark: Generated from `#/paths//plugins/{name}/delete(PluginDelete)`.
    package func PluginDelete(
        path: Operations.PluginDelete.Input.Path,
        query: Operations.PluginDelete.Input.Query = .init(),
        headers: Operations.PluginDelete.Input.Headers = .init()
    ) async throws -> Operations.PluginDelete.Output {
        try await PluginDelete(Operations.PluginDelete.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Enable a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/enable`.
    /// - Remark: Generated from `#/paths//plugins/{name}/enable/post(PluginEnable)`.
    package func PluginEnable(
        path: Operations.PluginEnable.Input.Path,
        query: Operations.PluginEnable.Input.Query = .init(),
        headers: Operations.PluginEnable.Input.Headers = .init()
    ) async throws -> Operations.PluginEnable.Output {
        try await PluginEnable(Operations.PluginEnable.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Disable a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/disable`.
    /// - Remark: Generated from `#/paths//plugins/{name}/disable/post(PluginDisable)`.
    package func PluginDisable(
        path: Operations.PluginDisable.Input.Path,
        query: Operations.PluginDisable.Input.Query = .init(),
        headers: Operations.PluginDisable.Input.Headers = .init()
    ) async throws -> Operations.PluginDisable.Output {
        try await PluginDisable(Operations.PluginDisable.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Upgrade a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/upgrade`.
    /// - Remark: Generated from `#/paths//plugins/{name}/upgrade/post(PluginUpgrade)`.
    package func PluginUpgrade(
        path: Operations.PluginUpgrade.Input.Path,
        query: Operations.PluginUpgrade.Input.Query,
        headers: Operations.PluginUpgrade.Input.Headers = .init(),
        body: Components.RequestBodies.PluginPrivilegeArray? = nil
    ) async throws -> Operations.PluginUpgrade.Output {
        try await PluginUpgrade(Operations.PluginUpgrade.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Create a plugin
    ///
    /// - Remark: HTTP `POST /plugins/create`.
    /// - Remark: Generated from `#/paths//plugins/create/post(PluginCreate)`.
    package func PluginCreate(
        query: Operations.PluginCreate.Input.Query,
        headers: Operations.PluginCreate.Input.Headers = .init(),
        body: Operations.PluginCreate.Input.Body? = nil
    ) async throws -> Operations.PluginCreate.Output {
        try await PluginCreate(Operations.PluginCreate.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Push a plugin
    ///
    /// Push a plugin to the registry.
    ///
    ///
    /// - Remark: HTTP `POST /plugins/{name}/push`.
    /// - Remark: Generated from `#/paths//plugins/{name}/push/post(PluginPush)`.
    package func PluginPush(
        path: Operations.PluginPush.Input.Path,
        headers: Operations.PluginPush.Input.Headers = .init()
    ) async throws -> Operations.PluginPush.Output {
        try await PluginPush(Operations.PluginPush.Input(
            path: path,
            headers: headers
        ))
    }
    /// Configure a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/set`.
    /// - Remark: Generated from `#/paths//plugins/{name}/set/post(PluginSet)`.
    package func PluginSet(
        path: Operations.PluginSet.Input.Path,
        headers: Operations.PluginSet.Input.Headers = .init(),
        body: Operations.PluginSet.Input.Body? = nil
    ) async throws -> Operations.PluginSet.Output {
        try await PluginSet(Operations.PluginSet.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List nodes
    ///
    /// - Remark: HTTP `GET /nodes`.
    /// - Remark: Generated from `#/paths//nodes/get(NodeList)`.
    package func NodeList(
        query: Operations.NodeList.Input.Query = .init(),
        headers: Operations.NodeList.Input.Headers = .init()
    ) async throws -> Operations.NodeList.Output {
        try await NodeList(Operations.NodeList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inspect a node
    ///
    /// - Remark: HTTP `GET /nodes/{id}`.
    /// - Remark: Generated from `#/paths//nodes/{id}/get(NodeInspect)`.
    package func NodeInspect(
        path: Operations.NodeInspect.Input.Path,
        headers: Operations.NodeInspect.Input.Headers = .init()
    ) async throws -> Operations.NodeInspect.Output {
        try await NodeInspect(Operations.NodeInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a node
    ///
    /// - Remark: HTTP `DELETE /nodes/{id}`.
    /// - Remark: Generated from `#/paths//nodes/{id}/delete(NodeDelete)`.
    package func NodeDelete(
        path: Operations.NodeDelete.Input.Path,
        query: Operations.NodeDelete.Input.Query = .init(),
        headers: Operations.NodeDelete.Input.Headers = .init()
    ) async throws -> Operations.NodeDelete.Output {
        try await NodeDelete(Operations.NodeDelete.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Update a node
    ///
    /// - Remark: HTTP `POST /nodes/{id}/update`.
    /// - Remark: Generated from `#/paths//nodes/{id}/update/post(NodeUpdate)`.
    package func NodeUpdate(
        path: Operations.NodeUpdate.Input.Path,
        query: Operations.NodeUpdate.Input.Query,
        headers: Operations.NodeUpdate.Input.Headers = .init(),
        body: Operations.NodeUpdate.Input.Body? = nil
    ) async throws -> Operations.NodeUpdate.Output {
        try await NodeUpdate(Operations.NodeUpdate.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Inspect swarm
    ///
    /// - Remark: HTTP `GET /swarm`.
    /// - Remark: Generated from `#/paths//swarm/get(SwarmInspect)`.
    package func SwarmInspect(headers: Operations.SwarmInspect.Input.Headers = .init()) async throws -> Operations.SwarmInspect.Output {
        try await SwarmInspect(Operations.SwarmInspect.Input(headers: headers))
    }
    /// Initialize a new swarm
    ///
    /// - Remark: HTTP `POST /swarm/init`.
    /// - Remark: Generated from `#/paths//swarm/init/post(SwarmInit)`.
    package func SwarmInit(
        headers: Operations.SwarmInit.Input.Headers = .init(),
        body: Operations.SwarmInit.Input.Body
    ) async throws -> Operations.SwarmInit.Output {
        try await SwarmInit(Operations.SwarmInit.Input(
            headers: headers,
            body: body
        ))
    }
    /// Join an existing swarm
    ///
    /// - Remark: HTTP `POST /swarm/join`.
    /// - Remark: Generated from `#/paths//swarm/join/post(SwarmJoin)`.
    package func SwarmJoin(
        headers: Operations.SwarmJoin.Input.Headers = .init(),
        body: Operations.SwarmJoin.Input.Body
    ) async throws -> Operations.SwarmJoin.Output {
        try await SwarmJoin(Operations.SwarmJoin.Input(
            headers: headers,
            body: body
        ))
    }
    /// Leave a swarm
    ///
    /// - Remark: HTTP `POST /swarm/leave`.
    /// - Remark: Generated from `#/paths//swarm/leave/post(SwarmLeave)`.
    package func SwarmLeave(
        query: Operations.SwarmLeave.Input.Query = .init(),
        headers: Operations.SwarmLeave.Input.Headers = .init()
    ) async throws -> Operations.SwarmLeave.Output {
        try await SwarmLeave(Operations.SwarmLeave.Input(
            query: query,
            headers: headers
        ))
    }
    /// Update a swarm
    ///
    /// - Remark: HTTP `POST /swarm/update`.
    /// - Remark: Generated from `#/paths//swarm/update/post(SwarmUpdate)`.
    package func SwarmUpdate(
        query: Operations.SwarmUpdate.Input.Query,
        headers: Operations.SwarmUpdate.Input.Headers = .init(),
        body: Operations.SwarmUpdate.Input.Body
    ) async throws -> Operations.SwarmUpdate.Output {
        try await SwarmUpdate(Operations.SwarmUpdate.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Get the unlock key
    ///
    /// - Remark: HTTP `GET /swarm/unlockkey`.
    /// - Remark: Generated from `#/paths//swarm/unlockkey/get(SwarmUnlockkey)`.
    package func SwarmUnlockkey(headers: Operations.SwarmUnlockkey.Input.Headers = .init()) async throws -> Operations.SwarmUnlockkey.Output {
        try await SwarmUnlockkey(Operations.SwarmUnlockkey.Input(headers: headers))
    }
    /// Unlock a locked manager
    ///
    /// - Remark: HTTP `POST /swarm/unlock`.
    /// - Remark: Generated from `#/paths//swarm/unlock/post(SwarmUnlock)`.
    package func SwarmUnlock(
        headers: Operations.SwarmUnlock.Input.Headers = .init(),
        body: Operations.SwarmUnlock.Input.Body
    ) async throws -> Operations.SwarmUnlock.Output {
        try await SwarmUnlock(Operations.SwarmUnlock.Input(
            headers: headers,
            body: body
        ))
    }
    /// List services
    ///
    /// - Remark: HTTP `GET /services`.
    /// - Remark: Generated from `#/paths//services/get(ServiceList)`.
    package func ServiceList(
        query: Operations.ServiceList.Input.Query = .init(),
        headers: Operations.ServiceList.Input.Headers = .init()
    ) async throws -> Operations.ServiceList.Output {
        try await ServiceList(Operations.ServiceList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a service
    ///
    /// - Remark: HTTP `POST /services/create`.
    /// - Remark: Generated from `#/paths//services/create/post(ServiceCreate)`.
    package func ServiceCreate(
        headers: Operations.ServiceCreate.Input.Headers = .init(),
        body: Operations.ServiceCreate.Input.Body
    ) async throws -> Operations.ServiceCreate.Output {
        try await ServiceCreate(Operations.ServiceCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Inspect a service
    ///
    /// - Remark: HTTP `GET /services/{id}`.
    /// - Remark: Generated from `#/paths//services/{id}/get(ServiceInspect)`.
    package func ServiceInspect(
        path: Operations.ServiceInspect.Input.Path,
        query: Operations.ServiceInspect.Input.Query = .init(),
        headers: Operations.ServiceInspect.Input.Headers = .init()
    ) async throws -> Operations.ServiceInspect.Output {
        try await ServiceInspect(Operations.ServiceInspect.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Delete a service
    ///
    /// - Remark: HTTP `DELETE /services/{id}`.
    /// - Remark: Generated from `#/paths//services/{id}/delete(ServiceDelete)`.
    package func ServiceDelete(
        path: Operations.ServiceDelete.Input.Path,
        headers: Operations.ServiceDelete.Input.Headers = .init()
    ) async throws -> Operations.ServiceDelete.Output {
        try await ServiceDelete(Operations.ServiceDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a service
    ///
    /// - Remark: HTTP `POST /services/{id}/update`.
    /// - Remark: Generated from `#/paths//services/{id}/update/post(ServiceUpdate)`.
    package func ServiceUpdate(
        path: Operations.ServiceUpdate.Input.Path,
        query: Operations.ServiceUpdate.Input.Query,
        headers: Operations.ServiceUpdate.Input.Headers = .init(),
        body: Operations.ServiceUpdate.Input.Body
    ) async throws -> Operations.ServiceUpdate.Output {
        try await ServiceUpdate(Operations.ServiceUpdate.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Get service logs
    ///
    /// Get `stdout` and `stderr` logs from a service. See also
    /// [`/containers/{id}/logs`](#operation/ContainerLogs).
    ///
    /// **Note**: This endpoint works only for services with the `local`,
    /// `json-file` or `journald` logging drivers.
    ///
    ///
    /// - Remark: HTTP `GET /services/{id}/logs`.
    /// - Remark: Generated from `#/paths//services/{id}/logs/get(ServiceLogs)`.
    package func ServiceLogs(
        path: Operations.ServiceLogs.Input.Path,
        query: Operations.ServiceLogs.Input.Query = .init(),
        headers: Operations.ServiceLogs.Input.Headers = .init()
    ) async throws -> Operations.ServiceLogs.Output {
        try await ServiceLogs(Operations.ServiceLogs.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List tasks
    ///
    /// - Remark: HTTP `GET /tasks`.
    /// - Remark: Generated from `#/paths//tasks/get(TaskList)`.
    package func TaskList(
        query: Operations.TaskList.Input.Query = .init(),
        headers: Operations.TaskList.Input.Headers = .init()
    ) async throws -> Operations.TaskList.Output {
        try await TaskList(Operations.TaskList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inspect a task
    ///
    /// - Remark: HTTP `GET /tasks/{id}`.
    /// - Remark: Generated from `#/paths//tasks/{id}/get(TaskInspect)`.
    package func TaskInspect(
        path: Operations.TaskInspect.Input.Path,
        headers: Operations.TaskInspect.Input.Headers = .init()
    ) async throws -> Operations.TaskInspect.Output {
        try await TaskInspect(Operations.TaskInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get task logs
    ///
    /// Get `stdout` and `stderr` logs from a task.
    /// See also [`/containers/{id}/logs`](#operation/ContainerLogs).
    ///
    /// **Note**: This endpoint works only for services with the `local`,
    /// `json-file` or `journald` logging drivers.
    ///
    ///
    /// - Remark: HTTP `GET /tasks/{id}/logs`.
    /// - Remark: Generated from `#/paths//tasks/{id}/logs/get(TaskLogs)`.
    package func TaskLogs(
        path: Operations.TaskLogs.Input.Path,
        query: Operations.TaskLogs.Input.Query = .init(),
        headers: Operations.TaskLogs.Input.Headers = .init()
    ) async throws -> Operations.TaskLogs.Output {
        try await TaskLogs(Operations.TaskLogs.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List secrets
    ///
    /// - Remark: HTTP `GET /secrets`.
    /// - Remark: Generated from `#/paths//secrets/get(SecretList)`.
    package func SecretList(
        query: Operations.SecretList.Input.Query = .init(),
        headers: Operations.SecretList.Input.Headers = .init()
    ) async throws -> Operations.SecretList.Output {
        try await SecretList(Operations.SecretList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a secret
    ///
    /// - Remark: HTTP `POST /secrets/create`.
    /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)`.
    package func SecretCreate(
        headers: Operations.SecretCreate.Input.Headers = .init(),
        body: Operations.SecretCreate.Input.Body? = nil
    ) async throws -> Operations.SecretCreate.Output {
        try await SecretCreate(Operations.SecretCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Inspect a secret
    ///
    /// - Remark: HTTP `GET /secrets/{id}`.
    /// - Remark: Generated from `#/paths//secrets/{id}/get(SecretInspect)`.
    package func SecretInspect(
        path: Operations.SecretInspect.Input.Path,
        headers: Operations.SecretInspect.Input.Headers = .init()
    ) async throws -> Operations.SecretInspect.Output {
        try await SecretInspect(Operations.SecretInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a secret
    ///
    /// - Remark: HTTP `DELETE /secrets/{id}`.
    /// - Remark: Generated from `#/paths//secrets/{id}/delete(SecretDelete)`.
    package func SecretDelete(
        path: Operations.SecretDelete.Input.Path,
        headers: Operations.SecretDelete.Input.Headers = .init()
    ) async throws -> Operations.SecretDelete.Output {
        try await SecretDelete(Operations.SecretDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a Secret
    ///
    /// - Remark: HTTP `POST /secrets/{id}/update`.
    /// - Remark: Generated from `#/paths//secrets/{id}/update/post(SecretUpdate)`.
    package func SecretUpdate(
        path: Operations.SecretUpdate.Input.Path,
        query: Operations.SecretUpdate.Input.Query,
        headers: Operations.SecretUpdate.Input.Headers = .init(),
        body: Operations.SecretUpdate.Input.Body? = nil
    ) async throws -> Operations.SecretUpdate.Output {
        try await SecretUpdate(Operations.SecretUpdate.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// List configs
    ///
    /// - Remark: HTTP `GET /configs`.
    /// - Remark: Generated from `#/paths//configs/get(ConfigList)`.
    package func ConfigList(
        query: Operations.ConfigList.Input.Query = .init(),
        headers: Operations.ConfigList.Input.Headers = .init()
    ) async throws -> Operations.ConfigList.Output {
        try await ConfigList(Operations.ConfigList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a config
    ///
    /// - Remark: HTTP `POST /configs/create`.
    /// - Remark: Generated from `#/paths//configs/create/post(ConfigCreate)`.
    package func ConfigCreate(
        headers: Operations.ConfigCreate.Input.Headers = .init(),
        body: Operations.ConfigCreate.Input.Body? = nil
    ) async throws -> Operations.ConfigCreate.Output {
        try await ConfigCreate(Operations.ConfigCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Inspect a config
    ///
    /// - Remark: HTTP `GET /configs/{id}`.
    /// - Remark: Generated from `#/paths//configs/{id}/get(ConfigInspect)`.
    package func ConfigInspect(
        path: Operations.ConfigInspect.Input.Path,
        headers: Operations.ConfigInspect.Input.Headers = .init()
    ) async throws -> Operations.ConfigInspect.Output {
        try await ConfigInspect(Operations.ConfigInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a config
    ///
    /// - Remark: HTTP `DELETE /configs/{id}`.
    /// - Remark: Generated from `#/paths//configs/{id}/delete(ConfigDelete)`.
    package func ConfigDelete(
        path: Operations.ConfigDelete.Input.Path,
        headers: Operations.ConfigDelete.Input.Headers = .init()
    ) async throws -> Operations.ConfigDelete.Output {
        try await ConfigDelete(Operations.ConfigDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a Config
    ///
    /// - Remark: HTTP `POST /configs/{id}/update`.
    /// - Remark: Generated from `#/paths//configs/{id}/update/post(ConfigUpdate)`.
    package func ConfigUpdate(
        path: Operations.ConfigUpdate.Input.Path,
        query: Operations.ConfigUpdate.Input.Query,
        headers: Operations.ConfigUpdate.Input.Headers = .init(),
        body: Operations.ConfigUpdate.Input.Body? = nil
    ) async throws -> Operations.ConfigUpdate.Output {
        try await ConfigUpdate(Operations.ConfigUpdate.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Get image information from the registry
    ///
    /// Return image digest and platform information by contacting the registry.
    ///
    ///
    /// - Remark: HTTP `GET /distribution/{name}/json`.
    /// - Remark: Generated from `#/paths//distribution/{name}/json/get(DistributionInspect)`.
    package func DistributionInspect(
        path: Operations.DistributionInspect.Input.Path,
        headers: Operations.DistributionInspect.Input.Headers = .init()
    ) async throws -> Operations.DistributionInspect.Output {
        try await DistributionInspect(Operations.DistributionInspect.Input(
            path: path,
            headers: headers
        ))
    }
    /// Initialize interactive session
    ///
    /// Start a new interactive session with a server. Session allows server to
    /// call back to the client for advanced capabilities.
    ///
    /// ### Hijacking
    ///
    /// This endpoint hijacks the HTTP connection to HTTP2 transport that allows
    /// the client to expose gPRC services on that connection.
    ///
    /// For example, the client sends this request to upgrade the connection:
    ///
    /// ```
    /// POST /session HTTP/1.1
    /// Upgrade: h2c
    /// Connection: Upgrade
    /// ```
    ///
    /// The Docker daemon responds with a `101 UPGRADED` response follow with
    /// the raw stream:
    ///
    /// ```
    /// HTTP/1.1 101 UPGRADED
    /// Connection: Upgrade
    /// Upgrade: h2c
    /// ```
    ///
    ///
    /// - Remark: HTTP `POST /session`.
    /// - Remark: Generated from `#/paths//session/post(Session)`.
    package func Session(headers: Operations.Session.Input.Headers = .init()) async throws -> Operations.Session.Output {
        try await Session(Operations.Session.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
package enum Servers {
    package static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "/v1.46",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
package enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    package enum Schemas {
        /// An open port on a container
        ///
        /// - Remark: Generated from `#/components/schemas/Port`.
        package struct Port: Codable, Hashable, Sendable {
            /// Host IP address that the container's port is mapped to
            ///
            /// - Remark: Generated from `#/components/schemas/Port/IP`.
            package var IP: Swift.String?
            /// Port on the container
            ///
            /// - Remark: Generated from `#/components/schemas/Port/PrivatePort`.
            package var PrivatePort: Swift.Int
            /// Port exposed on the host
            ///
            /// - Remark: Generated from `#/components/schemas/Port/PublicPort`.
            package var PublicPort: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Port/Type`.
            @frozen package enum _TypePayload: String, Codable, Hashable, Sendable {
                case tcp = "tcp"
                case udp = "udp"
                case sctp = "sctp"
            }
            /// - Remark: Generated from `#/components/schemas/Port/Type`.
            package var _Type: Components.Schemas.Port._TypePayload
            /// Creates a new `Port`.
            ///
            /// - Parameters:
            ///   - IP: Host IP address that the container's port is mapped to
            ///   - PrivatePort: Port on the container
            ///   - PublicPort: Port exposed on the host
            ///   - _Type:
            package init(
                IP: Swift.String? = nil,
                PrivatePort: Swift.Int,
                PublicPort: Swift.Int? = nil,
                _Type: Components.Schemas.Port._TypePayload
            ) {
                self.IP = IP
                self.PrivatePort = PrivatePort
                self.PublicPort = PublicPort
                self._Type = _Type
            }
            package enum CodingKeys: String, CodingKey {
                case IP
                case PrivatePort
                case PublicPort
                case _Type = "Type"
            }
        }
        /// MountPoint represents a mount point configuration inside the container.
        /// This is used for reporting the mountpoints in use by a container.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/MountPoint`.
        package struct MountPoint: Codable, Hashable, Sendable {
            /// The mount type:
            ///
            /// - `bind` a mount of a file or directory from the host into the container.
            /// - `volume` a docker volume with the given `Name`.
            /// - `tmpfs` a `tmpfs`.
            /// - `npipe` a named pipe from the host into the container.
            /// - `cluster` a Swarm cluster volume
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Type`.
            @frozen package enum _TypePayload: String, Codable, Hashable, Sendable {
                case bind = "bind"
                case volume = "volume"
                case tmpfs = "tmpfs"
                case npipe = "npipe"
                case cluster = "cluster"
            }
            /// The mount type:
            ///
            /// - `bind` a mount of a file or directory from the host into the container.
            /// - `volume` a docker volume with the given `Name`.
            /// - `tmpfs` a `tmpfs`.
            /// - `npipe` a named pipe from the host into the container.
            /// - `cluster` a Swarm cluster volume
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Type`.
            package var _Type: Components.Schemas.MountPoint._TypePayload?
            /// Name is the name reference to the underlying data defined by `Source`
            /// e.g., the volume name.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Name`.
            package var Name: Swift.String?
            /// Source location of the mount.
            ///
            /// For volumes, this contains the storage location of the volume (within
            /// `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains
            /// the source (host) part of the bind-mount. For `tmpfs` mount points, this
            /// field is empty.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Source`.
            package var Source: Swift.String?
            /// Destination is the path relative to the container root (`/`) where
            /// the `Source` is mounted inside the container.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Destination`.
            package var Destination: Swift.String?
            /// Driver is the volume driver used to create the volume (if it is a volume).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Driver`.
            package var Driver: Swift.String?
            /// Mode is a comma separated list of options supplied by the user when
            /// creating the bind/volume mount.
            ///
            /// The default is platform-specific (`"z"` on Linux, empty on Windows).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Mode`.
            package var Mode: Swift.String?
            /// Whether the mount is mounted writable (read-write).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/RW`.
            package var RW: Swift.Bool?
            /// Propagation describes how mounts are propagated from the host into the
            /// mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt)
            /// for details. This field is not used on Windows.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MountPoint/Propagation`.
            package var Propagation: Swift.String?
            /// Creates a new `MountPoint`.
            ///
            /// - Parameters:
            ///   - _Type: The mount type:
            ///   - Name: Name is the name reference to the underlying data defined by `Source`
            ///   - Source: Source location of the mount.
            ///   - Destination: Destination is the path relative to the container root (`/`) where
            ///   - Driver: Driver is the volume driver used to create the volume (if it is a volume).
            ///   - Mode: Mode is a comma separated list of options supplied by the user when
            ///   - RW: Whether the mount is mounted writable (read-write).
            ///   - Propagation: Propagation describes how mounts are propagated from the host into the
            package init(
                _Type: Components.Schemas.MountPoint._TypePayload? = nil,
                Name: Swift.String? = nil,
                Source: Swift.String? = nil,
                Destination: Swift.String? = nil,
                Driver: Swift.String? = nil,
                Mode: Swift.String? = nil,
                RW: Swift.Bool? = nil,
                Propagation: Swift.String? = nil
            ) {
                self._Type = _Type
                self.Name = Name
                self.Source = Source
                self.Destination = Destination
                self.Driver = Driver
                self.Mode = Mode
                self.RW = RW
                self.Propagation = Propagation
            }
            package enum CodingKeys: String, CodingKey {
                case _Type = "Type"
                case Name
                case Source
                case Destination
                case Driver
                case Mode
                case RW
                case Propagation
            }
        }
        /// A device mapping between the host and container
        ///
        /// - Remark: Generated from `#/components/schemas/DeviceMapping`.
        package struct DeviceMapping: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceMapping/PathOnHost`.
            package var PathOnHost: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeviceMapping/PathInContainer`.
            package var PathInContainer: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeviceMapping/CgroupPermissions`.
            package var CgroupPermissions: Swift.String?
            /// Creates a new `DeviceMapping`.
            ///
            /// - Parameters:
            ///   - PathOnHost:
            ///   - PathInContainer:
            ///   - CgroupPermissions:
            package init(
                PathOnHost: Swift.String? = nil,
                PathInContainer: Swift.String? = nil,
                CgroupPermissions: Swift.String? = nil
            ) {
                self.PathOnHost = PathOnHost
                self.PathInContainer = PathInContainer
                self.CgroupPermissions = CgroupPermissions
            }
            package enum CodingKeys: String, CodingKey {
                case PathOnHost
                case PathInContainer
                case CgroupPermissions
            }
        }
        /// A request for devices to be sent to device drivers
        ///
        /// - Remark: Generated from `#/components/schemas/DeviceRequest`.
        package struct DeviceRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Driver`.
            package var Driver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Count`.
            package var Count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/DeviceIDs`.
            package var DeviceIDs: [Swift.String]?
            /// A list of capabilities; an OR list of AND lists of capabilities.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Capabilities`.
            package var Capabilities: [[Swift.String]]?
            /// Driver-specific options, specified as a key/value pairs. These options
            /// are passed directly to the driver.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Options`.
            package struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Driver-specific options, specified as a key/value pairs. These options
            /// are passed directly to the driver.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceRequest/Options`.
            package var Options: Components.Schemas.DeviceRequest.OptionsPayload?
            /// Creates a new `DeviceRequest`.
            ///
            /// - Parameters:
            ///   - Driver:
            ///   - Count:
            ///   - DeviceIDs:
            ///   - Capabilities: A list of capabilities; an OR list of AND lists of capabilities.
            ///   - Options: Driver-specific options, specified as a key/value pairs. These options
            package init(
                Driver: Swift.String? = nil,
                Count: Swift.Int? = nil,
                DeviceIDs: [Swift.String]? = nil,
                Capabilities: [[Swift.String]]? = nil,
                Options: Components.Schemas.DeviceRequest.OptionsPayload? = nil
            ) {
                self.Driver = Driver
                self.Count = Count
                self.DeviceIDs = DeviceIDs
                self.Capabilities = Capabilities
                self.Options = Options
            }
            package enum CodingKeys: String, CodingKey {
                case Driver
                case Count
                case DeviceIDs
                case Capabilities
                case Options
            }
        }
        /// - Remark: Generated from `#/components/schemas/ThrottleDevice`.
        package struct ThrottleDevice: Codable, Hashable, Sendable {
            /// Device path
            ///
            /// - Remark: Generated from `#/components/schemas/ThrottleDevice/Path`.
            package var Path: Swift.String?
            /// Rate
            ///
            /// - Remark: Generated from `#/components/schemas/ThrottleDevice/Rate`.
            package var Rate: Swift.Int64?
            /// Creates a new `ThrottleDevice`.
            ///
            /// - Parameters:
            ///   - Path: Device path
            ///   - Rate: Rate
            package init(
                Path: Swift.String? = nil,
                Rate: Swift.Int64? = nil
            ) {
                self.Path = Path
                self.Rate = Rate
            }
            package enum CodingKeys: String, CodingKey {
                case Path
                case Rate
            }
        }
        /// - Remark: Generated from `#/components/schemas/Mount`.
        package struct Mount: Codable, Hashable, Sendable {
            /// Container path.
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/Target`.
            package var Target: Swift.String?
            /// Mount source (e.g. a volume name, a host path).
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/Source`.
            package var Source: Swift.String?
            /// The mount type. Available types:
            ///
            /// - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
            /// - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
            /// - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
            /// - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.
            /// - `cluster` a Swarm cluster volume
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/Type`.
            @frozen package enum _TypePayload: String, Codable, Hashable, Sendable {
                case bind = "bind"
                case volume = "volume"
                case tmpfs = "tmpfs"
                case npipe = "npipe"
                case cluster = "cluster"
            }
            /// The mount type. Available types:
            ///
            /// - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
            /// - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
            /// - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
            /// - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.
            /// - `cluster` a Swarm cluster volume
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/Type`.
            package var _Type: Components.Schemas.Mount._TypePayload?
            /// Whether the mount should be read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/ReadOnly`.
            package var ReadOnly: Swift.Bool?
            /// The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/Consistency`.
            package var Consistency: Swift.String?
            /// Optional configuration for the `bind` type.
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/BindOptions`.
            package struct BindOptionsPayload: Codable, Hashable, Sendable {
                /// A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/BindOptions/Propagation`.
                @frozen package enum PropagationPayload: String, Codable, Hashable, Sendable {
                    case _private = "private"
                    case rprivate = "rprivate"
                    case shared = "shared"
                    case rshared = "rshared"
                    case slave = "slave"
                    case rslave = "rslave"
                }
                /// A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/BindOptions/Propagation`.
                package var Propagation: Components.Schemas.Mount.BindOptionsPayload.PropagationPayload?
                /// Disable recursive bind mount.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/BindOptions/NonRecursive`.
                package var NonRecursive: Swift.Bool?
                /// Create mount point on host if missing
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/BindOptions/CreateMountpoint`.
                package var CreateMountpoint: Swift.Bool?
                /// Make the mount non-recursively read-only, but still leave the mount recursive
                /// (unless NonRecursive is set to `true` in conjunction).
                ///
                /// Addded in v1.44, before that version all read-only mounts were
                /// non-recursive by default. To match the previous behaviour this
                /// will default to `true` for clients on versions prior to v1.44.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/BindOptions/ReadOnlyNonRecursive`.
                package var ReadOnlyNonRecursive: Swift.Bool?
                /// Raise an error if the mount cannot be made recursively read-only.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/BindOptions/ReadOnlyForceRecursive`.
                package var ReadOnlyForceRecursive: Swift.Bool?
                /// Creates a new `BindOptionsPayload`.
                ///
                /// - Parameters:
                ///   - Propagation: A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
                ///   - NonRecursive: Disable recursive bind mount.
                ///   - CreateMountpoint: Create mount point on host if missing
                ///   - ReadOnlyNonRecursive: Make the mount non-recursively read-only, but still leave the mount recursive
                ///   - ReadOnlyForceRecursive: Raise an error if the mount cannot be made recursively read-only.
                package init(
                    Propagation: Components.Schemas.Mount.BindOptionsPayload.PropagationPayload? = nil,
                    NonRecursive: Swift.Bool? = nil,
                    CreateMountpoint: Swift.Bool? = nil,
                    ReadOnlyNonRecursive: Swift.Bool? = nil,
                    ReadOnlyForceRecursive: Swift.Bool? = nil
                ) {
                    self.Propagation = Propagation
                    self.NonRecursive = NonRecursive
                    self.CreateMountpoint = CreateMountpoint
                    self.ReadOnlyNonRecursive = ReadOnlyNonRecursive
                    self.ReadOnlyForceRecursive = ReadOnlyForceRecursive
                }
                package enum CodingKeys: String, CodingKey {
                    case Propagation
                    case NonRecursive
                    case CreateMountpoint
                    case ReadOnlyNonRecursive
                    case ReadOnlyForceRecursive
                }
            }
            /// Optional configuration for the `bind` type.
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/BindOptions`.
            package var BindOptions: Components.Schemas.Mount.BindOptionsPayload?
            /// Optional configuration for the `volume` type.
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions`.
            package struct VolumeOptionsPayload: Codable, Hashable, Sendable {
                /// Populate volume with data from the target.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions/NoCopy`.
                package var NoCopy: Swift.Bool?
                /// User-defined key/value metadata.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions/Labels`.
                package struct LabelsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `LabelsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// User-defined key/value metadata.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions/Labels`.
                package var Labels: Components.Schemas.Mount.VolumeOptionsPayload.LabelsPayload?
                /// Map of driver specific options
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions/DriverConfig`.
                package struct DriverConfigPayload: Codable, Hashable, Sendable {
                    /// Name of the driver to use to create the volume.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions/DriverConfig/Name`.
                    package var Name: Swift.String?
                    /// key/value map of driver specific options.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions/DriverConfig/Options`.
                    package struct OptionsPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        package var additionalProperties: [String: Swift.String]
                        /// Creates a new `OptionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        package init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        package init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        package func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// key/value map of driver specific options.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions/DriverConfig/Options`.
                    package var Options: Components.Schemas.Mount.VolumeOptionsPayload.DriverConfigPayload.OptionsPayload?
                    /// Creates a new `DriverConfigPayload`.
                    ///
                    /// - Parameters:
                    ///   - Name: Name of the driver to use to create the volume.
                    ///   - Options: key/value map of driver specific options.
                    package init(
                        Name: Swift.String? = nil,
                        Options: Components.Schemas.Mount.VolumeOptionsPayload.DriverConfigPayload.OptionsPayload? = nil
                    ) {
                        self.Name = Name
                        self.Options = Options
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Name
                        case Options
                    }
                }
                /// Map of driver specific options
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions/DriverConfig`.
                package var DriverConfig: Components.Schemas.Mount.VolumeOptionsPayload.DriverConfigPayload?
                /// Source path inside the volume. Must be relative without any back traversals.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions/Subpath`.
                package var Subpath: Swift.String?
                /// Creates a new `VolumeOptionsPayload`.
                ///
                /// - Parameters:
                ///   - NoCopy: Populate volume with data from the target.
                ///   - Labels: User-defined key/value metadata.
                ///   - DriverConfig: Map of driver specific options
                ///   - Subpath: Source path inside the volume. Must be relative without any back traversals.
                package init(
                    NoCopy: Swift.Bool? = nil,
                    Labels: Components.Schemas.Mount.VolumeOptionsPayload.LabelsPayload? = nil,
                    DriverConfig: Components.Schemas.Mount.VolumeOptionsPayload.DriverConfigPayload? = nil,
                    Subpath: Swift.String? = nil
                ) {
                    self.NoCopy = NoCopy
                    self.Labels = Labels
                    self.DriverConfig = DriverConfig
                    self.Subpath = Subpath
                }
                package enum CodingKeys: String, CodingKey {
                    case NoCopy
                    case Labels
                    case DriverConfig
                    case Subpath
                }
            }
            /// Optional configuration for the `volume` type.
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/VolumeOptions`.
            package var VolumeOptions: Components.Schemas.Mount.VolumeOptionsPayload?
            /// Optional configuration for the `tmpfs` type.
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/TmpfsOptions`.
            package struct TmpfsOptionsPayload: Codable, Hashable, Sendable {
                /// The size for the tmpfs mount in bytes.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/TmpfsOptions/SizeBytes`.
                package var SizeBytes: Swift.Int64?
                /// The permission mode for the tmpfs mount in an integer.
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/TmpfsOptions/Mode`.
                package var Mode: Swift.Int?
                /// The options to be passed to the tmpfs mount. An array of arrays.
                /// Flag options should be provided as 1-length arrays. Other types
                /// should be provided as as 2-length arrays, where the first item is
                /// the key and the second the value.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Mount/TmpfsOptions/Options`.
                package var Options: [[Swift.String]]?
                /// Creates a new `TmpfsOptionsPayload`.
                ///
                /// - Parameters:
                ///   - SizeBytes: The size for the tmpfs mount in bytes.
                ///   - Mode: The permission mode for the tmpfs mount in an integer.
                ///   - Options: The options to be passed to the tmpfs mount. An array of arrays.
                package init(
                    SizeBytes: Swift.Int64? = nil,
                    Mode: Swift.Int? = nil,
                    Options: [[Swift.String]]? = nil
                ) {
                    self.SizeBytes = SizeBytes
                    self.Mode = Mode
                    self.Options = Options
                }
                package enum CodingKeys: String, CodingKey {
                    case SizeBytes
                    case Mode
                    case Options
                }
            }
            /// Optional configuration for the `tmpfs` type.
            ///
            /// - Remark: Generated from `#/components/schemas/Mount/TmpfsOptions`.
            package var TmpfsOptions: Components.Schemas.Mount.TmpfsOptionsPayload?
            /// Creates a new `Mount`.
            ///
            /// - Parameters:
            ///   - Target: Container path.
            ///   - Source: Mount source (e.g. a volume name, a host path).
            ///   - _Type: The mount type. Available types:
            ///   - ReadOnly: Whether the mount should be read-only.
            ///   - Consistency: The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.
            ///   - BindOptions: Optional configuration for the `bind` type.
            ///   - VolumeOptions: Optional configuration for the `volume` type.
            ///   - TmpfsOptions: Optional configuration for the `tmpfs` type.
            package init(
                Target: Swift.String? = nil,
                Source: Swift.String? = nil,
                _Type: Components.Schemas.Mount._TypePayload? = nil,
                ReadOnly: Swift.Bool? = nil,
                Consistency: Swift.String? = nil,
                BindOptions: Components.Schemas.Mount.BindOptionsPayload? = nil,
                VolumeOptions: Components.Schemas.Mount.VolumeOptionsPayload? = nil,
                TmpfsOptions: Components.Schemas.Mount.TmpfsOptionsPayload? = nil
            ) {
                self.Target = Target
                self.Source = Source
                self._Type = _Type
                self.ReadOnly = ReadOnly
                self.Consistency = Consistency
                self.BindOptions = BindOptions
                self.VolumeOptions = VolumeOptions
                self.TmpfsOptions = TmpfsOptions
            }
            package enum CodingKeys: String, CodingKey {
                case Target
                case Source
                case _Type = "Type"
                case ReadOnly
                case Consistency
                case BindOptions
                case VolumeOptions
                case TmpfsOptions
            }
        }
        /// The behavior to apply when the container exits. The default is not to
        /// restart.
        ///
        /// An ever increasing delay (double the previous delay, starting at 100ms) is
        /// added before each restart to prevent flooding the server.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RestartPolicy`.
        package struct RestartPolicy: Codable, Hashable, Sendable {
            /// - Empty string means not to restart
            /// - `no` Do not automatically restart
            /// - `always` Always restart
            /// - `unless-stopped` Restart always except when the user has manually stopped the container
            /// - `on-failure` Restart only when the container exit code is non-zero
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RestartPolicy/Name`.
            @frozen package enum NamePayload: String, Codable, Hashable, Sendable {
                case _empty = ""
                case no = "no"
                case always = "always"
                case unless_hyphen_stopped = "unless-stopped"
                case on_hyphen_failure = "on-failure"
            }
            /// - Empty string means not to restart
            /// - `no` Do not automatically restart
            /// - `always` Always restart
            /// - `unless-stopped` Restart always except when the user has manually stopped the container
            /// - `on-failure` Restart only when the container exit code is non-zero
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RestartPolicy/Name`.
            package var Name: Components.Schemas.RestartPolicy.NamePayload?
            /// If `on-failure` is used, the number of times to retry before giving up.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RestartPolicy/MaximumRetryCount`.
            package var MaximumRetryCount: Swift.Int?
            /// Creates a new `RestartPolicy`.
            ///
            /// - Parameters:
            ///   - Name:
            ///   - MaximumRetryCount: If `on-failure` is used, the number of times to retry before giving up.
            package init(
                Name: Components.Schemas.RestartPolicy.NamePayload? = nil,
                MaximumRetryCount: Swift.Int? = nil
            ) {
                self.Name = Name
                self.MaximumRetryCount = MaximumRetryCount
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case MaximumRetryCount
            }
        }
        /// A container's resources (cgroups config, ulimits, etc)
        ///
        /// - Remark: Generated from `#/components/schemas/Resources`.
        package struct Resources: Codable, Hashable, Sendable {
            /// An integer value representing this container's relative CPU weight
            /// versus other containers.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpuShares`.
            package var CpuShares: Swift.Int?
            /// Memory limit in bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/Memory`.
            package var Memory: Swift.Int64?
            /// Path to `cgroups` under which the container's `cgroup` is created. If
            /// the path is not absolute, the path is considered to be relative to the
            /// `cgroups` path of the init process. Cgroups are created if they do not
            /// already exist.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CgroupParent`.
            package var CgroupParent: Swift.String?
            /// Block IO weight (relative weight).
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioWeight`.
            package var BlkioWeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioWeightDevicePayload`.
            package struct BlkioWeightDevicePayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Resources/BlkioWeightDevicePayload/Path`.
                package var Path: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Resources/BlkioWeightDevicePayload/Weight`.
                package var Weight: Swift.Int?
                /// Creates a new `BlkioWeightDevicePayloadPayload`.
                ///
                /// - Parameters:
                ///   - Path:
                ///   - Weight:
                package init(
                    Path: Swift.String? = nil,
                    Weight: Swift.Int? = nil
                ) {
                    self.Path = Path
                    self.Weight = Weight
                }
                package enum CodingKeys: String, CodingKey {
                    case Path
                    case Weight
                }
            }
            /// Block IO weight (relative device weight) in the form:
            ///
            /// ```
            /// [{"Path": "device_path", "Weight": weight}]
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioWeightDevice`.
            package typealias BlkioWeightDevicePayload = [Components.Schemas.Resources.BlkioWeightDevicePayloadPayload]
            /// Block IO weight (relative device weight) in the form:
            ///
            /// ```
            /// [{"Path": "device_path", "Weight": weight}]
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioWeightDevice`.
            package var BlkioWeightDevice: Components.Schemas.Resources.BlkioWeightDevicePayload?
            /// Limit read rate (bytes per second) from a device, in the form:
            ///
            /// ```
            /// [{"Path": "device_path", "Rate": rate}]
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioDeviceReadBps`.
            package var BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]?
            /// Limit write rate (bytes per second) to a device, in the form:
            ///
            /// ```
            /// [{"Path": "device_path", "Rate": rate}]
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioDeviceWriteBps`.
            package var BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]?
            /// Limit read rate (IO per second) from a device, in the form:
            ///
            /// ```
            /// [{"Path": "device_path", "Rate": rate}]
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioDeviceReadIOps`.
            package var BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]?
            /// Limit write rate (IO per second) to a device, in the form:
            ///
            /// ```
            /// [{"Path": "device_path", "Rate": rate}]
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/BlkioDeviceWriteIOps`.
            package var BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]?
            /// The length of a CPU period in microseconds.
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpuPeriod`.
            package var CpuPeriod: Swift.Int64?
            /// Microseconds of CPU time that the container can get in a CPU period.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpuQuota`.
            package var CpuQuota: Swift.Int64?
            /// The length of a CPU real-time period in microseconds. Set to 0 to
            /// allocate no time allocated to real-time tasks.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpuRealtimePeriod`.
            package var CpuRealtimePeriod: Swift.Int64?
            /// The length of a CPU real-time runtime in microseconds. Set to 0 to
            /// allocate no time allocated to real-time tasks.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpuRealtimeRuntime`.
            package var CpuRealtimeRuntime: Swift.Int64?
            /// CPUs in which to allow execution (e.g., `0-3`, `0,1`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpusetCpus`.
            package var CpusetCpus: Swift.String?
            /// Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only
            /// effective on NUMA systems.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpusetMems`.
            package var CpusetMems: Swift.String?
            /// A list of devices to add to the container.
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/Devices`.
            package var Devices: [Components.Schemas.DeviceMapping]?
            /// a list of cgroup rules to apply to the container
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/DeviceCgroupRules`.
            package var DeviceCgroupRules: [Swift.String]?
            /// A list of requests for devices to be sent to device drivers.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/DeviceRequests`.
            package var DeviceRequests: [Components.Schemas.DeviceRequest]?
            /// Hard limit for kernel TCP buffer memory (in bytes). Depending on the
            /// OCI runtime in use, this option may be ignored. It is no longer supported
            /// by the default (runc) runtime.
            ///
            /// This field is omitted when empty.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/KernelMemoryTCP`.
            package var KernelMemoryTCP: Swift.Int64?
            /// Memory soft limit in bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/MemoryReservation`.
            package var MemoryReservation: Swift.Int64?
            /// Total memory limit (memory + swap). Set as `-1` to enable unlimited
            /// swap.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/MemorySwap`.
            package var MemorySwap: Swift.Int64?
            /// Tune a container's memory swappiness behavior. Accepts an integer
            /// between 0 and 100.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/MemorySwappiness`.
            package var MemorySwappiness: Swift.Int64?
            /// CPU quota in units of 10<sup>-9</sup> CPUs.
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/NanoCpus`.
            package var NanoCpus: Swift.Int64?
            /// Disable OOM Killer for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/OomKillDisable`.
            package var OomKillDisable: Swift.Bool?
            /// Run an init inside the container that forwards signals and reaps
            /// processes. This field is omitted if empty, and the default (as
            /// configured on the daemon) is used.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/Init`.
            package var Init: Swift.Bool?
            /// Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null`
            /// to not change.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/PidsLimit`.
            package var PidsLimit: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Resources/UlimitsPayload`.
            package struct UlimitsPayloadPayload: Codable, Hashable, Sendable {
                /// Name of ulimit
                ///
                /// - Remark: Generated from `#/components/schemas/Resources/UlimitsPayload/Name`.
                package var Name: Swift.String?
                /// Soft limit
                ///
                /// - Remark: Generated from `#/components/schemas/Resources/UlimitsPayload/Soft`.
                package var Soft: Swift.Int?
                /// Hard limit
                ///
                /// - Remark: Generated from `#/components/schemas/Resources/UlimitsPayload/Hard`.
                package var Hard: Swift.Int?
                /// Creates a new `UlimitsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - Name: Name of ulimit
                ///   - Soft: Soft limit
                ///   - Hard: Hard limit
                package init(
                    Name: Swift.String? = nil,
                    Soft: Swift.Int? = nil,
                    Hard: Swift.Int? = nil
                ) {
                    self.Name = Name
                    self.Soft = Soft
                    self.Hard = Hard
                }
                package enum CodingKeys: String, CodingKey {
                    case Name
                    case Soft
                    case Hard
                }
            }
            /// A list of resource limits to set in the container. For example:
            ///
            /// ```
            /// {"Name": "nofile", "Soft": 1024, "Hard": 2048}
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/Ulimits`.
            package typealias UlimitsPayload = [Components.Schemas.Resources.UlimitsPayloadPayload]
            /// A list of resource limits to set in the container. For example:
            ///
            /// ```
            /// {"Name": "nofile", "Soft": 1024, "Hard": 2048}
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/Ulimits`.
            package var Ulimits: Components.Schemas.Resources.UlimitsPayload?
            /// The number of usable CPUs (Windows only).
            ///
            /// On Windows Server containers, the processor resource controls are
            /// mutually exclusive. The order of precedence is `CPUCount` first, then
            /// `CPUShares`, and `CPUPercent` last.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpuCount`.
            package var CpuCount: Swift.Int64?
            /// The usable percentage of the available CPUs (Windows only).
            ///
            /// On Windows Server containers, the processor resource controls are
            /// mutually exclusive. The order of precedence is `CPUCount` first, then
            /// `CPUShares`, and `CPUPercent` last.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/CpuPercent`.
            package var CpuPercent: Swift.Int64?
            /// Maximum IOps for the container system drive (Windows only)
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/IOMaximumIOps`.
            package var IOMaximumIOps: Swift.Int64?
            /// Maximum IO in bytes per second for the container system drive
            /// (Windows only).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Resources/IOMaximumBandwidth`.
            package var IOMaximumBandwidth: Swift.Int64?
            /// Creates a new `Resources`.
            ///
            /// - Parameters:
            ///   - CpuShares: An integer value representing this container's relative CPU weight
            ///   - Memory: Memory limit in bytes.
            ///   - CgroupParent: Path to `cgroups` under which the container's `cgroup` is created. If
            ///   - BlkioWeight: Block IO weight (relative weight).
            ///   - BlkioWeightDevice: Block IO weight (relative device weight) in the form:
            ///   - BlkioDeviceReadBps: Limit read rate (bytes per second) from a device, in the form:
            ///   - BlkioDeviceWriteBps: Limit write rate (bytes per second) to a device, in the form:
            ///   - BlkioDeviceReadIOps: Limit read rate (IO per second) from a device, in the form:
            ///   - BlkioDeviceWriteIOps: Limit write rate (IO per second) to a device, in the form:
            ///   - CpuPeriod: The length of a CPU period in microseconds.
            ///   - CpuQuota: Microseconds of CPU time that the container can get in a CPU period.
            ///   - CpuRealtimePeriod: The length of a CPU real-time period in microseconds. Set to 0 to
            ///   - CpuRealtimeRuntime: The length of a CPU real-time runtime in microseconds. Set to 0 to
            ///   - CpusetCpus: CPUs in which to allow execution (e.g., `0-3`, `0,1`).
            ///   - CpusetMems: Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only
            ///   - Devices: A list of devices to add to the container.
            ///   - DeviceCgroupRules: a list of cgroup rules to apply to the container
            ///   - DeviceRequests: A list of requests for devices to be sent to device drivers.
            ///   - KernelMemoryTCP: Hard limit for kernel TCP buffer memory (in bytes). Depending on the
            ///   - MemoryReservation: Memory soft limit in bytes.
            ///   - MemorySwap: Total memory limit (memory + swap). Set as `-1` to enable unlimited
            ///   - MemorySwappiness: Tune a container's memory swappiness behavior. Accepts an integer
            ///   - NanoCpus: CPU quota in units of 10<sup>-9</sup> CPUs.
            ///   - OomKillDisable: Disable OOM Killer for the container.
            ///   - Init: Run an init inside the container that forwards signals and reaps
            ///   - PidsLimit: Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null`
            ///   - Ulimits: A list of resource limits to set in the container. For example:
            ///   - CpuCount: The number of usable CPUs (Windows only).
            ///   - CpuPercent: The usable percentage of the available CPUs (Windows only).
            ///   - IOMaximumIOps: Maximum IOps for the container system drive (Windows only)
            ///   - IOMaximumBandwidth: Maximum IO in bytes per second for the container system drive
            package init(
                CpuShares: Swift.Int? = nil,
                Memory: Swift.Int64? = nil,
                CgroupParent: Swift.String? = nil,
                BlkioWeight: Swift.Int? = nil,
                BlkioWeightDevice: Components.Schemas.Resources.BlkioWeightDevicePayload? = nil,
                BlkioDeviceReadBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteBps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceReadIOps: [Components.Schemas.ThrottleDevice]? = nil,
                BlkioDeviceWriteIOps: [Components.Schemas.ThrottleDevice]? = nil,
                CpuPeriod: Swift.Int64? = nil,
                CpuQuota: Swift.Int64? = nil,
                CpuRealtimePeriod: Swift.Int64? = nil,
                CpuRealtimeRuntime: Swift.Int64? = nil,
                CpusetCpus: Swift.String? = nil,
                CpusetMems: Swift.String? = nil,
                Devices: [Components.Schemas.DeviceMapping]? = nil,
                DeviceCgroupRules: [Swift.String]? = nil,
                DeviceRequests: [Components.Schemas.DeviceRequest]? = nil,
                KernelMemoryTCP: Swift.Int64? = nil,
                MemoryReservation: Swift.Int64? = nil,
                MemorySwap: Swift.Int64? = nil,
                MemorySwappiness: Swift.Int64? = nil,
                NanoCpus: Swift.Int64? = nil,
                OomKillDisable: Swift.Bool? = nil,
                Init: Swift.Bool? = nil,
                PidsLimit: Swift.Int64? = nil,
                Ulimits: Components.Schemas.Resources.UlimitsPayload? = nil,
                CpuCount: Swift.Int64? = nil,
                CpuPercent: Swift.Int64? = nil,
                IOMaximumIOps: Swift.Int64? = nil,
                IOMaximumBandwidth: Swift.Int64? = nil
            ) {
                self.CpuShares = CpuShares
                self.Memory = Memory
                self.CgroupParent = CgroupParent
                self.BlkioWeight = BlkioWeight
                self.BlkioWeightDevice = BlkioWeightDevice
                self.BlkioDeviceReadBps = BlkioDeviceReadBps
                self.BlkioDeviceWriteBps = BlkioDeviceWriteBps
                self.BlkioDeviceReadIOps = BlkioDeviceReadIOps
                self.BlkioDeviceWriteIOps = BlkioDeviceWriteIOps
                self.CpuPeriod = CpuPeriod
                self.CpuQuota = CpuQuota
                self.CpuRealtimePeriod = CpuRealtimePeriod
                self.CpuRealtimeRuntime = CpuRealtimeRuntime
                self.CpusetCpus = CpusetCpus
                self.CpusetMems = CpusetMems
                self.Devices = Devices
                self.DeviceCgroupRules = DeviceCgroupRules
                self.DeviceRequests = DeviceRequests
                self.KernelMemoryTCP = KernelMemoryTCP
                self.MemoryReservation = MemoryReservation
                self.MemorySwap = MemorySwap
                self.MemorySwappiness = MemorySwappiness
                self.NanoCpus = NanoCpus
                self.OomKillDisable = OomKillDisable
                self.Init = Init
                self.PidsLimit = PidsLimit
                self.Ulimits = Ulimits
                self.CpuCount = CpuCount
                self.CpuPercent = CpuPercent
                self.IOMaximumIOps = IOMaximumIOps
                self.IOMaximumBandwidth = IOMaximumBandwidth
            }
            package enum CodingKeys: String, CodingKey {
                case CpuShares
                case Memory
                case CgroupParent
                case BlkioWeight
                case BlkioWeightDevice
                case BlkioDeviceReadBps
                case BlkioDeviceWriteBps
                case BlkioDeviceReadIOps
                case BlkioDeviceWriteIOps
                case CpuPeriod
                case CpuQuota
                case CpuRealtimePeriod
                case CpuRealtimeRuntime
                case CpusetCpus
                case CpusetMems
                case Devices
                case DeviceCgroupRules
                case DeviceRequests
                case KernelMemoryTCP
                case MemoryReservation
                case MemorySwap
                case MemorySwappiness
                case NanoCpus
                case OomKillDisable
                case Init
                case PidsLimit
                case Ulimits
                case CpuCount
                case CpuPercent
                case IOMaximumIOps
                case IOMaximumBandwidth
            }
        }
        /// An object describing a limit on resources which can be requested by a task.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Limit`.
        package struct Limit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Limit/NanoCPUs`.
            package var NanoCPUs: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Limit/MemoryBytes`.
            package var MemoryBytes: Swift.Int64?
            /// Limits the maximum number of PIDs in the container. Set `0` for unlimited.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Limit/Pids`.
            package var Pids: Swift.Int64?
            /// Creates a new `Limit`.
            ///
            /// - Parameters:
            ///   - NanoCPUs:
            ///   - MemoryBytes:
            ///   - Pids: Limits the maximum number of PIDs in the container. Set `0` for unlimited.
            package init(
                NanoCPUs: Swift.Int64? = nil,
                MemoryBytes: Swift.Int64? = nil,
                Pids: Swift.Int64? = nil
            ) {
                self.NanoCPUs = NanoCPUs
                self.MemoryBytes = MemoryBytes
                self.Pids = Pids
            }
            package enum CodingKeys: String, CodingKey {
                case NanoCPUs
                case MemoryBytes
                case Pids
            }
        }
        /// An object describing the resources which can be advertised by a node and
        /// requested by a task.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ResourceObject`.
        package struct ResourceObject: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ResourceObject/NanoCPUs`.
            package var NanoCPUs: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ResourceObject/MemoryBytes`.
            package var MemoryBytes: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ResourceObject/GenericResources`.
            package var GenericResources: Components.Schemas.GenericResources?
            /// Creates a new `ResourceObject`.
            ///
            /// - Parameters:
            ///   - NanoCPUs:
            ///   - MemoryBytes:
            ///   - GenericResources:
            package init(
                NanoCPUs: Swift.Int64? = nil,
                MemoryBytes: Swift.Int64? = nil,
                GenericResources: Components.Schemas.GenericResources? = nil
            ) {
                self.NanoCPUs = NanoCPUs
                self.MemoryBytes = MemoryBytes
                self.GenericResources = GenericResources
            }
            package enum CodingKeys: String, CodingKey {
                case NanoCPUs
                case MemoryBytes
                case GenericResources
            }
        }
        /// - Remark: Generated from `#/components/schemas/GenericResources`.
        package struct GenericResourcesPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericResources/NamedResourceSpec`.
            package struct NamedResourceSpecPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GenericResources/NamedResourceSpec/Kind`.
                package var Kind: Swift.String?
                /// - Remark: Generated from `#/components/schemas/GenericResources/NamedResourceSpec/Value`.
                package var Value: Swift.String?
                /// Creates a new `NamedResourceSpecPayload`.
                ///
                /// - Parameters:
                ///   - Kind:
                ///   - Value:
                package init(
                    Kind: Swift.String? = nil,
                    Value: Swift.String? = nil
                ) {
                    self.Kind = Kind
                    self.Value = Value
                }
                package enum CodingKeys: String, CodingKey {
                    case Kind
                    case Value
                }
            }
            /// - Remark: Generated from `#/components/schemas/GenericResources/NamedResourceSpec`.
            package var NamedResourceSpec: Components.Schemas.GenericResourcesPayload.NamedResourceSpecPayload?
            /// - Remark: Generated from `#/components/schemas/GenericResources/DiscreteResourceSpec`.
            package struct DiscreteResourceSpecPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GenericResources/DiscreteResourceSpec/Kind`.
                package var Kind: Swift.String?
                /// - Remark: Generated from `#/components/schemas/GenericResources/DiscreteResourceSpec/Value`.
                package var Value: Swift.Int64?
                /// Creates a new `DiscreteResourceSpecPayload`.
                ///
                /// - Parameters:
                ///   - Kind:
                ///   - Value:
                package init(
                    Kind: Swift.String? = nil,
                    Value: Swift.Int64? = nil
                ) {
                    self.Kind = Kind
                    self.Value = Value
                }
                package enum CodingKeys: String, CodingKey {
                    case Kind
                    case Value
                }
            }
            /// - Remark: Generated from `#/components/schemas/GenericResources/DiscreteResourceSpec`.
            package var DiscreteResourceSpec: Components.Schemas.GenericResourcesPayload.DiscreteResourceSpecPayload?
            /// Creates a new `GenericResourcesPayload`.
            ///
            /// - Parameters:
            ///   - NamedResourceSpec:
            ///   - DiscreteResourceSpec:
            package init(
                NamedResourceSpec: Components.Schemas.GenericResourcesPayload.NamedResourceSpecPayload? = nil,
                DiscreteResourceSpec: Components.Schemas.GenericResourcesPayload.DiscreteResourceSpecPayload? = nil
            ) {
                self.NamedResourceSpec = NamedResourceSpec
                self.DiscreteResourceSpec = DiscreteResourceSpec
            }
            package enum CodingKeys: String, CodingKey {
                case NamedResourceSpec
                case DiscreteResourceSpec
            }
        }
        /// User-defined resources can be either Integer resources (e.g, `SSD=3`) or
        /// String resources (e.g, `GPU=UUID1`).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/GenericResources`.
        package typealias GenericResources = [Components.Schemas.GenericResourcesPayload]
        /// A test to perform to check that the container is healthy.
        ///
        /// - Remark: Generated from `#/components/schemas/HealthConfig`.
        package struct HealthConfig: Codable, Hashable, Sendable {
            /// The test to perform. Possible values are:
            ///
            /// - `[]` inherit healthcheck from image or parent image
            /// - `["NONE"]` disable healthcheck
            /// - `["CMD", args...]` exec arguments directly
            /// - `["CMD-SHELL", command]` run command with system's default shell
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/HealthConfig/Test`.
            package var Test: [Swift.String]?
            /// The time to wait between checks in nanoseconds. It should be 0 or at
            /// least 1000000 (1 ms). 0 means inherit.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/HealthConfig/Interval`.
            package var Interval: Swift.Int64?
            /// The time to wait before considering the check to have hung. It should
            /// be 0 or at least 1000000 (1 ms). 0 means inherit.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/HealthConfig/Timeout`.
            package var Timeout: Swift.Int64?
            /// The number of consecutive failures needed to consider a container as
            /// unhealthy. 0 means inherit.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/HealthConfig/Retries`.
            package var Retries: Swift.Int?
            /// Start period for the container to initialize before starting
            /// health-retries countdown in nanoseconds. It should be 0 or at least
            /// 1000000 (1 ms). 0 means inherit.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/HealthConfig/StartPeriod`.
            package var StartPeriod: Swift.Int64?
            /// The time to wait between checks in nanoseconds during the start period.
            /// It should be 0 or at least 1000000 (1 ms). 0 means inherit.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/HealthConfig/StartInterval`.
            package var StartInterval: Swift.Int64?
            /// Creates a new `HealthConfig`.
            ///
            /// - Parameters:
            ///   - Test: The test to perform. Possible values are:
            ///   - Interval: The time to wait between checks in nanoseconds. It should be 0 or at
            ///   - Timeout: The time to wait before considering the check to have hung. It should
            ///   - Retries: The number of consecutive failures needed to consider a container as
            ///   - StartPeriod: Start period for the container to initialize before starting
            ///   - StartInterval: The time to wait between checks in nanoseconds during the start period.
            package init(
                Test: [Swift.String]? = nil,
                Interval: Swift.Int64? = nil,
                Timeout: Swift.Int64? = nil,
                Retries: Swift.Int? = nil,
                StartPeriod: Swift.Int64? = nil,
                StartInterval: Swift.Int64? = nil
            ) {
                self.Test = Test
                self.Interval = Interval
                self.Timeout = Timeout
                self.Retries = Retries
                self.StartPeriod = StartPeriod
                self.StartInterval = StartInterval
            }
            package enum CodingKeys: String, CodingKey {
                case Test
                case Interval
                case Timeout
                case Retries
                case StartPeriod
                case StartInterval
            }
        }
        /// Health stores information about the container's healthcheck results.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Health`.
        package struct Health: Codable, Hashable, Sendable {
            /// Status is one of `none`, `starting`, `healthy` or `unhealthy`
            ///
            /// - "none"      Indicates there is no healthcheck
            /// - "starting"  Starting indicates that the container is not yet ready
            /// - "healthy"   Healthy indicates that the container is running correctly
            /// - "unhealthy" Unhealthy indicates that the container has a problem
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Health/Status`.
            @frozen package enum StatusPayload: String, Codable, Hashable, Sendable {
                case none = "none"
                case starting = "starting"
                case healthy = "healthy"
                case unhealthy = "unhealthy"
            }
            /// Status is one of `none`, `starting`, `healthy` or `unhealthy`
            ///
            /// - "none"      Indicates there is no healthcheck
            /// - "starting"  Starting indicates that the container is not yet ready
            /// - "healthy"   Healthy indicates that the container is running correctly
            /// - "unhealthy" Unhealthy indicates that the container has a problem
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Health/Status`.
            package var Status: Components.Schemas.Health.StatusPayload?
            /// FailingStreak is the number of consecutive failures
            ///
            /// - Remark: Generated from `#/components/schemas/Health/FailingStreak`.
            package var FailingStreak: Swift.Int?
            /// Log contains the last few results (oldest first)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Health/Log`.
            package var Log: [Components.Schemas.HealthcheckResult]?
            /// Creates a new `Health`.
            ///
            /// - Parameters:
            ///   - Status: Status is one of `none`, `starting`, `healthy` or `unhealthy`
            ///   - FailingStreak: FailingStreak is the number of consecutive failures
            ///   - Log: Log contains the last few results (oldest first)
            package init(
                Status: Components.Schemas.Health.StatusPayload? = nil,
                FailingStreak: Swift.Int? = nil,
                Log: [Components.Schemas.HealthcheckResult]? = nil
            ) {
                self.Status = Status
                self.FailingStreak = FailingStreak
                self.Log = Log
            }
            package enum CodingKeys: String, CodingKey {
                case Status
                case FailingStreak
                case Log
            }
        }
        /// HealthcheckResult stores information about a single run of a healthcheck probe
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/HealthcheckResult`.
        package struct HealthcheckResult: Codable, Hashable, Sendable {
            /// Date and time at which this check started in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/HealthcheckResult/Start`.
            package var Start: Foundation.Date?
            /// Date and time at which this check ended in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/HealthcheckResult/End`.
            package var End: Swift.String?
            /// ExitCode meanings:
            ///
            /// - `0` healthy
            /// - `1` unhealthy
            /// - `2` reserved (considered unhealthy)
            /// - other values: error running probe
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/HealthcheckResult/ExitCode`.
            package var ExitCode: Swift.Int?
            /// Output from last check
            ///
            /// - Remark: Generated from `#/components/schemas/HealthcheckResult/Output`.
            package var Output: Swift.String?
            /// Creates a new `HealthcheckResult`.
            ///
            /// - Parameters:
            ///   - Start: Date and time at which this check started in
            ///   - End: Date and time at which this check ended in
            ///   - ExitCode: ExitCode meanings:
            ///   - Output: Output from last check
            package init(
                Start: Foundation.Date? = nil,
                End: Swift.String? = nil,
                ExitCode: Swift.Int? = nil,
                Output: Swift.String? = nil
            ) {
                self.Start = Start
                self.End = End
                self.ExitCode = ExitCode
                self.Output = Output
            }
            package enum CodingKeys: String, CodingKey {
                case Start
                case End
                case ExitCode
                case Output
            }
        }
        /// Container configuration that depends on the host we are running on
        ///
        /// - Remark: Generated from `#/components/schemas/HostConfig`.
        package struct HostConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HostConfig/value1`.
            package var value1: Components.Schemas.Resources
            /// - Remark: Generated from `#/components/schemas/HostConfig/value2`.
            package struct Value2Payload: Codable, Hashable, Sendable {
                /// A list of volume bindings for this container. Each volume binding
                /// is a string in one of these forms:
                ///
                /// - `host-src:container-dest[:options]` to bind-mount a host path
                ///   into the container. Both `host-src`, and `container-dest` must
                ///   be an _absolute_ path.
                /// - `volume-name:container-dest[:options]` to bind-mount a volume
                ///   managed by a volume driver into the container. `container-dest`
                ///   must be an _absolute_ path.
                ///
                /// `options` is an optional, comma-delimited list of:
                ///
                /// - `nocopy` disables automatic copying of data from the container
                ///   path to the volume. The `nocopy` flag only applies to named volumes.
                /// - `[ro|rw]` mounts a volume read-only or read-write, respectively.
                ///   If omitted or set to `rw`, volumes are mounted read-write.
                /// - `[z|Z]` applies SELinux labels to allow or deny multiple containers
                ///   to read and write to the same volume.
                ///     - `z`: a _shared_ content label is applied to the content. This
                ///       label indicates that multiple containers can share the volume
                ///       content, for both reading and writing.
                ///     - `Z`: a _private unshared_ label is applied to the content.
                ///       This label indicates that only the current container can use
                ///       a private volume. Labeling systems such as SELinux require
                ///       proper labels to be placed on volume content that is mounted
                ///       into a container. Without a label, the security system can
                ///       prevent a container's processes from using the content. By
                ///       default, the labels set by the host operating system are not
                ///       modified.
                /// - `[[r]shared|[r]slave|[r]private]` specifies mount
                ///   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).
                ///   This only applies to bind-mounted volumes, not internal volumes
                ///   or named volumes. Mount propagation requires the source mount
                ///   point (the location where the source directory is mounted in the
                ///   host operating system) to have the correct propagation properties.
                ///   For shared volumes, the source mount point must be set to `shared`.
                ///   For slave volumes, the mount must be set to either `shared` or
                ///   `slave`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Binds`.
                package var Binds: [Swift.String]?
                /// Path to a file where the container ID is written
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/ContainerIDFile`.
                package var ContainerIDFile: Swift.String?
                /// The logging configuration for this container
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/LogConfig`.
                package struct LogConfigPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostConfig/value2/LogConfig/Type`.
                    @frozen package enum _TypePayload: String, Codable, Hashable, Sendable {
                        case json_hyphen_file = "json-file"
                        case syslog = "syslog"
                        case journald = "journald"
                        case gelf = "gelf"
                        case fluentd = "fluentd"
                        case awslogs = "awslogs"
                        case splunk = "splunk"
                        case etwlogs = "etwlogs"
                        case none = "none"
                    }
                    /// - Remark: Generated from `#/components/schemas/HostConfig/value2/LogConfig/Type`.
                    package var _Type: Components.Schemas.HostConfig.Value2Payload.LogConfigPayload._TypePayload?
                    /// - Remark: Generated from `#/components/schemas/HostConfig/value2/LogConfig/Config`.
                    package struct ConfigPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        package var additionalProperties: [String: Swift.String]
                        /// Creates a new `ConfigPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        package init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        package init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        package func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/HostConfig/value2/LogConfig/Config`.
                    package var Config: Components.Schemas.HostConfig.Value2Payload.LogConfigPayload.ConfigPayload?
                    /// Creates a new `LogConfigPayload`.
                    ///
                    /// - Parameters:
                    ///   - _Type:
                    ///   - Config:
                    package init(
                        _Type: Components.Schemas.HostConfig.Value2Payload.LogConfigPayload._TypePayload? = nil,
                        Config: Components.Schemas.HostConfig.Value2Payload.LogConfigPayload.ConfigPayload? = nil
                    ) {
                        self._Type = _Type
                        self.Config = Config
                    }
                    package enum CodingKeys: String, CodingKey {
                        case _Type = "Type"
                        case Config
                    }
                }
                /// The logging configuration for this container
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/LogConfig`.
                package var LogConfig: Components.Schemas.HostConfig.Value2Payload.LogConfigPayload?
                /// Network mode to use for this container. Supported standard values
                /// are: `bridge`, `host`, `none`, and `container:<name|id>`. Any
                /// other value is taken as a custom network's name to which this
                /// container should connect to.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/NetworkMode`.
                package var NetworkMode: Swift.String?
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/PortBindings`.
                package var PortBindings: Components.Schemas.PortMap?
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/RestartPolicy`.
                package var RestartPolicy: Components.Schemas.RestartPolicy?
                /// Automatically remove the container when the container's process
                /// exits. This has no effect if `RestartPolicy` is set.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/AutoRemove`.
                package var AutoRemove: Swift.Bool?
                /// Driver that this container uses to mount volumes.
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/VolumeDriver`.
                package var VolumeDriver: Swift.String?
                /// A list of volumes to inherit from another container, specified in
                /// the form `<container name>[:<ro|rw>]`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/VolumesFrom`.
                package var VolumesFrom: [Swift.String]?
                /// Specification for mounts to be added to the container.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Mounts`.
                package var Mounts: [Components.Schemas.Mount]?
                /// Initial console size, as an `[height, width]` array.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/ConsoleSize`.
                package var ConsoleSize: [Swift.Int]?
                /// Arbitrary non-identifying metadata attached to container and
                /// provided to the runtime when the container is started.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Annotations`.
                package struct AnnotationsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `AnnotationsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Arbitrary non-identifying metadata attached to container and
                /// provided to the runtime when the container is started.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Annotations`.
                package var Annotations: Components.Schemas.HostConfig.Value2Payload.AnnotationsPayload?
                /// A list of kernel capabilities to add to the container. Conflicts
                /// with option 'Capabilities'.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/CapAdd`.
                package var CapAdd: [Swift.String]?
                /// A list of kernel capabilities to drop from the container. Conflicts
                /// with option 'Capabilities'.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/CapDrop`.
                package var CapDrop: [Swift.String]?
                /// cgroup namespace mode for the container. Possible values are:
                ///
                /// - `"private"`: the container runs in its own private cgroup namespace
                /// - `"host"`: use the host system's cgroup namespace
                ///
                /// If not specified, the daemon default is used, which can either be `"private"`
                /// or `"host"`, depending on daemon version, kernel support and configuration.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/CgroupnsMode`.
                @frozen package enum CgroupnsModePayload: String, Codable, Hashable, Sendable {
                    case _private = "private"
                    case host = "host"
                }
                /// cgroup namespace mode for the container. Possible values are:
                ///
                /// - `"private"`: the container runs in its own private cgroup namespace
                /// - `"host"`: use the host system's cgroup namespace
                ///
                /// If not specified, the daemon default is used, which can either be `"private"`
                /// or `"host"`, depending on daemon version, kernel support and configuration.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/CgroupnsMode`.
                package var CgroupnsMode: Components.Schemas.HostConfig.Value2Payload.CgroupnsModePayload?
                /// A list of DNS servers for the container to use.
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Dns`.
                package var Dns: [Swift.String]?
                /// A list of DNS options.
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/DnsOptions`.
                package var DnsOptions: [Swift.String]?
                /// A list of DNS search domains.
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/DnsSearch`.
                package var DnsSearch: [Swift.String]?
                /// A list of hostnames/IP mappings to add to the container's `/etc/hosts`
                /// file. Specified in the form `["hostname:IP"]`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/ExtraHosts`.
                package var ExtraHosts: [Swift.String]?
                /// A list of additional groups that the container process will run as.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/GroupAdd`.
                package var GroupAdd: [Swift.String]?
                /// IPC sharing mode for the container. Possible values are:
                ///
                /// - `"none"`: own private IPC namespace, with /dev/shm not mounted
                /// - `"private"`: own private IPC namespace
                /// - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
                /// - `"container:<name|id>"`: join another (shareable) container's IPC namespace
                /// - `"host"`: use the host system's IPC namespace
                ///
                /// If not specified, daemon default is used, which can either be `"private"`
                /// or `"shareable"`, depending on daemon version and configuration.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/IpcMode`.
                package var IpcMode: Swift.String?
                /// Cgroup to use for the container.
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Cgroup`.
                package var Cgroup: Swift.String?
                /// A list of links for the container in the form `container_name:alias`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Links`.
                package var Links: [Swift.String]?
                /// An integer value containing the score given to the container in
                /// order to tune OOM killer preferences.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/OomScoreAdj`.
                package var OomScoreAdj: Swift.Int?
                /// Set the PID (Process) Namespace mode for the container. It can be
                /// either:
                ///
                /// - `"container:<name|id>"`: joins another container's PID namespace
                /// - `"host"`: use the host's PID namespace inside the container
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/PidMode`.
                package var PidMode: Swift.String?
                /// Gives the container full access to the host.
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Privileged`.
                package var Privileged: Swift.Bool?
                /// Allocates an ephemeral host port for all of a container's
                /// exposed ports.
                ///
                /// Ports are de-allocated when the container stops and allocated when
                /// the container starts. The allocated port might be changed when
                /// restarting the container.
                ///
                /// The port is selected from the ephemeral port range that depends on
                /// the kernel. For example, on Linux the range is defined by
                /// `/proc/sys/net/ipv4/ip_local_port_range`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/PublishAllPorts`.
                package var PublishAllPorts: Swift.Bool?
                /// Mount the container's root filesystem as read only.
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/ReadonlyRootfs`.
                package var ReadonlyRootfs: Swift.Bool?
                /// A list of string values to customize labels for MLS systems, such
                /// as SELinux.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/SecurityOpt`.
                package var SecurityOpt: [Swift.String]?
                /// Storage driver options for this container, in the form `{"size": "120G"}`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/StorageOpt`.
                package struct StorageOptPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `StorageOptPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Storage driver options for this container, in the form `{"size": "120G"}`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/StorageOpt`.
                package var StorageOpt: Components.Schemas.HostConfig.Value2Payload.StorageOptPayload?
                /// A map of container directories which should be replaced by tmpfs
                /// mounts, and their corresponding mount options. For example:
                ///
                /// ```
                /// { "/run": "rw,noexec,nosuid,size=65536k" }
                /// ```
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Tmpfs`.
                package struct TmpfsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `TmpfsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// A map of container directories which should be replaced by tmpfs
                /// mounts, and their corresponding mount options. For example:
                ///
                /// ```
                /// { "/run": "rw,noexec,nosuid,size=65536k" }
                /// ```
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Tmpfs`.
                package var Tmpfs: Components.Schemas.HostConfig.Value2Payload.TmpfsPayload?
                /// UTS namespace to use for the container.
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/UTSMode`.
                package var UTSMode: Swift.String?
                /// Sets the usernamespace mode for the container when usernamespace
                /// remapping option is enabled.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/UsernsMode`.
                package var UsernsMode: Swift.String?
                /// Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/ShmSize`.
                package var ShmSize: Swift.Int64?
                /// A list of kernel parameters (sysctls) to set in the container.
                /// For example:
                ///
                /// ```
                /// {"net.ipv4.ip_forward": "1"}
                /// ```
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Sysctls`.
                package struct SysctlsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `SysctlsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// A list of kernel parameters (sysctls) to set in the container.
                /// For example:
                ///
                /// ```
                /// {"net.ipv4.ip_forward": "1"}
                /// ```
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Sysctls`.
                package var Sysctls: Components.Schemas.HostConfig.Value2Payload.SysctlsPayload?
                /// Runtime to use with this container.
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Runtime`.
                package var Runtime: Swift.String?
                /// Isolation technology of the container. (Windows only)
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Isolation`.
                @frozen package enum IsolationPayload: String, Codable, Hashable, Sendable {
                    case _default = "default"
                    case process = "process"
                    case hyperv = "hyperv"
                }
                /// Isolation technology of the container. (Windows only)
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/Isolation`.
                package var Isolation: Components.Schemas.HostConfig.Value2Payload.IsolationPayload?
                /// The list of paths to be masked inside the container (this overrides
                /// the default set of paths).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/MaskedPaths`.
                package var MaskedPaths: [Swift.String]?
                /// The list of paths to be set as read-only inside the container
                /// (this overrides the default set of paths).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/HostConfig/value2/ReadonlyPaths`.
                package var ReadonlyPaths: [Swift.String]?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - Binds: A list of volume bindings for this container. Each volume binding
                ///   - ContainerIDFile: Path to a file where the container ID is written
                ///   - LogConfig: The logging configuration for this container
                ///   - NetworkMode: Network mode to use for this container. Supported standard values
                ///   - PortBindings:
                ///   - RestartPolicy:
                ///   - AutoRemove: Automatically remove the container when the container's process
                ///   - VolumeDriver: Driver that this container uses to mount volumes.
                ///   - VolumesFrom: A list of volumes to inherit from another container, specified in
                ///   - Mounts: Specification for mounts to be added to the container.
                ///   - ConsoleSize: Initial console size, as an `[height, width]` array.
                ///   - Annotations: Arbitrary non-identifying metadata attached to container and
                ///   - CapAdd: A list of kernel capabilities to add to the container. Conflicts
                ///   - CapDrop: A list of kernel capabilities to drop from the container. Conflicts
                ///   - CgroupnsMode: cgroup namespace mode for the container. Possible values are:
                ///   - Dns: A list of DNS servers for the container to use.
                ///   - DnsOptions: A list of DNS options.
                ///   - DnsSearch: A list of DNS search domains.
                ///   - ExtraHosts: A list of hostnames/IP mappings to add to the container's `/etc/hosts`
                ///   - GroupAdd: A list of additional groups that the container process will run as.
                ///   - IpcMode: IPC sharing mode for the container. Possible values are:
                ///   - Cgroup: Cgroup to use for the container.
                ///   - Links: A list of links for the container in the form `container_name:alias`.
                ///   - OomScoreAdj: An integer value containing the score given to the container in
                ///   - PidMode: Set the PID (Process) Namespace mode for the container. It can be
                ///   - Privileged: Gives the container full access to the host.
                ///   - PublishAllPorts: Allocates an ephemeral host port for all of a container's
                ///   - ReadonlyRootfs: Mount the container's root filesystem as read only.
                ///   - SecurityOpt: A list of string values to customize labels for MLS systems, such
                ///   - StorageOpt: Storage driver options for this container, in the form `{"size": "120G"}`.
                ///   - Tmpfs: A map of container directories which should be replaced by tmpfs
                ///   - UTSMode: UTS namespace to use for the container.
                ///   - UsernsMode: Sets the usernamespace mode for the container when usernamespace
                ///   - ShmSize: Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
                ///   - Sysctls: A list of kernel parameters (sysctls) to set in the container.
                ///   - Runtime: Runtime to use with this container.
                ///   - Isolation: Isolation technology of the container. (Windows only)
                ///   - MaskedPaths: The list of paths to be masked inside the container (this overrides
                ///   - ReadonlyPaths: The list of paths to be set as read-only inside the container
                package init(
                    Binds: [Swift.String]? = nil,
                    ContainerIDFile: Swift.String? = nil,
                    LogConfig: Components.Schemas.HostConfig.Value2Payload.LogConfigPayload? = nil,
                    NetworkMode: Swift.String? = nil,
                    PortBindings: Components.Schemas.PortMap? = nil,
                    RestartPolicy: Components.Schemas.RestartPolicy? = nil,
                    AutoRemove: Swift.Bool? = nil,
                    VolumeDriver: Swift.String? = nil,
                    VolumesFrom: [Swift.String]? = nil,
                    Mounts: [Components.Schemas.Mount]? = nil,
                    ConsoleSize: [Swift.Int]? = nil,
                    Annotations: Components.Schemas.HostConfig.Value2Payload.AnnotationsPayload? = nil,
                    CapAdd: [Swift.String]? = nil,
                    CapDrop: [Swift.String]? = nil,
                    CgroupnsMode: Components.Schemas.HostConfig.Value2Payload.CgroupnsModePayload? = nil,
                    Dns: [Swift.String]? = nil,
                    DnsOptions: [Swift.String]? = nil,
                    DnsSearch: [Swift.String]? = nil,
                    ExtraHosts: [Swift.String]? = nil,
                    GroupAdd: [Swift.String]? = nil,
                    IpcMode: Swift.String? = nil,
                    Cgroup: Swift.String? = nil,
                    Links: [Swift.String]? = nil,
                    OomScoreAdj: Swift.Int? = nil,
                    PidMode: Swift.String? = nil,
                    Privileged: Swift.Bool? = nil,
                    PublishAllPorts: Swift.Bool? = nil,
                    ReadonlyRootfs: Swift.Bool? = nil,
                    SecurityOpt: [Swift.String]? = nil,
                    StorageOpt: Components.Schemas.HostConfig.Value2Payload.StorageOptPayload? = nil,
                    Tmpfs: Components.Schemas.HostConfig.Value2Payload.TmpfsPayload? = nil,
                    UTSMode: Swift.String? = nil,
                    UsernsMode: Swift.String? = nil,
                    ShmSize: Swift.Int64? = nil,
                    Sysctls: Components.Schemas.HostConfig.Value2Payload.SysctlsPayload? = nil,
                    Runtime: Swift.String? = nil,
                    Isolation: Components.Schemas.HostConfig.Value2Payload.IsolationPayload? = nil,
                    MaskedPaths: [Swift.String]? = nil,
                    ReadonlyPaths: [Swift.String]? = nil
                ) {
                    self.Binds = Binds
                    self.ContainerIDFile = ContainerIDFile
                    self.LogConfig = LogConfig
                    self.NetworkMode = NetworkMode
                    self.PortBindings = PortBindings
                    self.RestartPolicy = RestartPolicy
                    self.AutoRemove = AutoRemove
                    self.VolumeDriver = VolumeDriver
                    self.VolumesFrom = VolumesFrom
                    self.Mounts = Mounts
                    self.ConsoleSize = ConsoleSize
                    self.Annotations = Annotations
                    self.CapAdd = CapAdd
                    self.CapDrop = CapDrop
                    self.CgroupnsMode = CgroupnsMode
                    self.Dns = Dns
                    self.DnsOptions = DnsOptions
                    self.DnsSearch = DnsSearch
                    self.ExtraHosts = ExtraHosts
                    self.GroupAdd = GroupAdd
                    self.IpcMode = IpcMode
                    self.Cgroup = Cgroup
                    self.Links = Links
                    self.OomScoreAdj = OomScoreAdj
                    self.PidMode = PidMode
                    self.Privileged = Privileged
                    self.PublishAllPorts = PublishAllPorts
                    self.ReadonlyRootfs = ReadonlyRootfs
                    self.SecurityOpt = SecurityOpt
                    self.StorageOpt = StorageOpt
                    self.Tmpfs = Tmpfs
                    self.UTSMode = UTSMode
                    self.UsernsMode = UsernsMode
                    self.ShmSize = ShmSize
                    self.Sysctls = Sysctls
                    self.Runtime = Runtime
                    self.Isolation = Isolation
                    self.MaskedPaths = MaskedPaths
                    self.ReadonlyPaths = ReadonlyPaths
                }
                package enum CodingKeys: String, CodingKey {
                    case Binds
                    case ContainerIDFile
                    case LogConfig
                    case NetworkMode
                    case PortBindings
                    case RestartPolicy
                    case AutoRemove
                    case VolumeDriver
                    case VolumesFrom
                    case Mounts
                    case ConsoleSize
                    case Annotations
                    case CapAdd
                    case CapDrop
                    case CgroupnsMode
                    case Dns
                    case DnsOptions
                    case DnsSearch
                    case ExtraHosts
                    case GroupAdd
                    case IpcMode
                    case Cgroup
                    case Links
                    case OomScoreAdj
                    case PidMode
                    case Privileged
                    case PublishAllPorts
                    case ReadonlyRootfs
                    case SecurityOpt
                    case StorageOpt
                    case Tmpfs
                    case UTSMode
                    case UsernsMode
                    case ShmSize
                    case Sysctls
                    case Runtime
                    case Isolation
                    case MaskedPaths
                    case ReadonlyPaths
                }
            }
            /// - Remark: Generated from `#/components/schemas/HostConfig/value2`.
            package var value2: Components.Schemas.HostConfig.Value2Payload
            /// Creates a new `HostConfig`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            package init(
                value1: Components.Schemas.Resources,
                value2: Components.Schemas.HostConfig.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            package init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            package func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// Configuration for a container that is portable between hosts.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerConfig`.
        package struct ContainerConfig: Codable, Hashable, Sendable {
            /// The hostname to use for the container, as a valid RFC 1123 hostname.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Hostname`.
            package var Hostname: Swift.String?
            /// The domain name to use for the container.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Domainname`.
            package var Domainname: Swift.String?
            /// The user that commands are run as inside the container.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/User`.
            package var User: Swift.String?
            /// Whether to attach to `stdin`.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/AttachStdin`.
            package var AttachStdin: Swift.Bool?
            /// Whether to attach to `stdout`.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/AttachStdout`.
            package var AttachStdout: Swift.Bool?
            /// Whether to attach to `stderr`.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/AttachStderr`.
            package var AttachStderr: Swift.Bool?
            /// An object mapping ports to an empty object in the form:
            ///
            /// `{"<port>/<tcp|udp|sctp>": {}}`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/ExposedPorts`.
            package struct ExposedPortsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `ExposedPortsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// An object mapping ports to an empty object in the form:
            ///
            /// `{"<port>/<tcp|udp|sctp>": {}}`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/ExposedPorts`.
            package var ExposedPorts: Components.Schemas.ContainerConfig.ExposedPortsPayload?
            /// Attach standard streams to a TTY, including `stdin` if it is not closed.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Tty`.
            package var Tty: Swift.Bool?
            /// Open `stdin`
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/OpenStdin`.
            package var OpenStdin: Swift.Bool?
            /// Close `stdin` after one attached client disconnects
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/StdinOnce`.
            package var StdinOnce: Swift.Bool?
            /// A list of environment variables to set inside the container in the
            /// form `["VAR=value", ...]`. A variable without `=` is removed from the
            /// environment, rather than to have an empty value.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Env`.
            package var Env: [Swift.String]?
            /// Command to run specified as a string or an array of strings.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Cmd`.
            package var Cmd: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Healthcheck`.
            package var Healthcheck: Components.Schemas.HealthConfig?
            /// Command is already escaped (Windows only)
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/ArgsEscaped`.
            package var ArgsEscaped: Swift.Bool?
            /// The name (or reference) of the image to use when creating the container,
            /// or which was used when the container was created.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Image`.
            package var Image: Swift.String?
            /// An object mapping mount point paths inside the container to empty
            /// objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Volumes`.
            package struct VolumesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `VolumesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// An object mapping mount point paths inside the container to empty
            /// objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Volumes`.
            package var Volumes: Components.Schemas.ContainerConfig.VolumesPayload?
            /// The working directory for commands to run in.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/WorkingDir`.
            package var WorkingDir: Swift.String?
            /// The entry point for the container as a string or an array of strings.
            ///
            /// If the array consists of exactly one empty string (`[""]`) then the
            /// entry point is reset to system default (i.e., the entry point used by
            /// docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Entrypoint`.
            package var Entrypoint: [Swift.String]?
            /// Disable networking for the container.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/NetworkDisabled`.
            package var NetworkDisabled: Swift.Bool?
            /// MAC address of the container.
            ///
            /// Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/MacAddress`.
            package var MacAddress: Swift.String?
            /// `ONBUILD` metadata that were defined in the image's `Dockerfile`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/OnBuild`.
            package var OnBuild: [Swift.String]?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Labels`.
            package var Labels: Components.Schemas.ContainerConfig.LabelsPayload?
            /// Signal to stop a container as a string or unsigned integer.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/StopSignal`.
            package var StopSignal: Swift.String?
            /// Timeout to stop a container in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/StopTimeout`.
            package var StopTimeout: Swift.Int?
            /// Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerConfig/Shell`.
            package var Shell: [Swift.String]?
            /// Creates a new `ContainerConfig`.
            ///
            /// - Parameters:
            ///   - Hostname: The hostname to use for the container, as a valid RFC 1123 hostname.
            ///   - Domainname: The domain name to use for the container.
            ///   - User: The user that commands are run as inside the container.
            ///   - AttachStdin: Whether to attach to `stdin`.
            ///   - AttachStdout: Whether to attach to `stdout`.
            ///   - AttachStderr: Whether to attach to `stderr`.
            ///   - ExposedPorts: An object mapping ports to an empty object in the form:
            ///   - Tty: Attach standard streams to a TTY, including `stdin` if it is not closed.
            ///   - OpenStdin: Open `stdin`
            ///   - StdinOnce: Close `stdin` after one attached client disconnects
            ///   - Env: A list of environment variables to set inside the container in the
            ///   - Cmd: Command to run specified as a string or an array of strings.
            ///   - Healthcheck:
            ///   - ArgsEscaped: Command is already escaped (Windows only)
            ///   - Image: The name (or reference) of the image to use when creating the container,
            ///   - Volumes: An object mapping mount point paths inside the container to empty
            ///   - WorkingDir: The working directory for commands to run in.
            ///   - Entrypoint: The entry point for the container as a string or an array of strings.
            ///   - NetworkDisabled: Disable networking for the container.
            ///   - MacAddress: MAC address of the container.
            ///   - OnBuild: `ONBUILD` metadata that were defined in the image's `Dockerfile`.
            ///   - Labels: User-defined key/value metadata.
            ///   - StopSignal: Signal to stop a container as a string or unsigned integer.
            ///   - StopTimeout: Timeout to stop a container in seconds.
            ///   - Shell: Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
            package init(
                Hostname: Swift.String? = nil,
                Domainname: Swift.String? = nil,
                User: Swift.String? = nil,
                AttachStdin: Swift.Bool? = nil,
                AttachStdout: Swift.Bool? = nil,
                AttachStderr: Swift.Bool? = nil,
                ExposedPorts: Components.Schemas.ContainerConfig.ExposedPortsPayload? = nil,
                Tty: Swift.Bool? = nil,
                OpenStdin: Swift.Bool? = nil,
                StdinOnce: Swift.Bool? = nil,
                Env: [Swift.String]? = nil,
                Cmd: [Swift.String]? = nil,
                Healthcheck: Components.Schemas.HealthConfig? = nil,
                ArgsEscaped: Swift.Bool? = nil,
                Image: Swift.String? = nil,
                Volumes: Components.Schemas.ContainerConfig.VolumesPayload? = nil,
                WorkingDir: Swift.String? = nil,
                Entrypoint: [Swift.String]? = nil,
                NetworkDisabled: Swift.Bool? = nil,
                MacAddress: Swift.String? = nil,
                OnBuild: [Swift.String]? = nil,
                Labels: Components.Schemas.ContainerConfig.LabelsPayload? = nil,
                StopSignal: Swift.String? = nil,
                StopTimeout: Swift.Int? = nil,
                Shell: [Swift.String]? = nil
            ) {
                self.Hostname = Hostname
                self.Domainname = Domainname
                self.User = User
                self.AttachStdin = AttachStdin
                self.AttachStdout = AttachStdout
                self.AttachStderr = AttachStderr
                self.ExposedPorts = ExposedPorts
                self.Tty = Tty
                self.OpenStdin = OpenStdin
                self.StdinOnce = StdinOnce
                self.Env = Env
                self.Cmd = Cmd
                self.Healthcheck = Healthcheck
                self.ArgsEscaped = ArgsEscaped
                self.Image = Image
                self.Volumes = Volumes
                self.WorkingDir = WorkingDir
                self.Entrypoint = Entrypoint
                self.NetworkDisabled = NetworkDisabled
                self.MacAddress = MacAddress
                self.OnBuild = OnBuild
                self.Labels = Labels
                self.StopSignal = StopSignal
                self.StopTimeout = StopTimeout
                self.Shell = Shell
            }
            package enum CodingKeys: String, CodingKey {
                case Hostname
                case Domainname
                case User
                case AttachStdin
                case AttachStdout
                case AttachStderr
                case ExposedPorts
                case Tty
                case OpenStdin
                case StdinOnce
                case Env
                case Cmd
                case Healthcheck
                case ArgsEscaped
                case Image
                case Volumes
                case WorkingDir
                case Entrypoint
                case NetworkDisabled
                case MacAddress
                case OnBuild
                case Labels
                case StopSignal
                case StopTimeout
                case Shell
            }
        }
        /// Configuration of the image. These fields are used as defaults
        /// when starting a container from the image.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ImageConfig`.
        package struct ImageConfig: Codable, Hashable, Sendable {
            /// The hostname to use for the container, as a valid RFC 1123 hostname.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always empty. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Hostname`.
            package var Hostname: Swift.String?
            /// The domain name to use for the container.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always empty. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Domainname`.
            package var Domainname: Swift.String?
            /// The user that commands are run as inside the container.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/User`.
            package var User: Swift.String?
            /// Whether to attach to `stdin`.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always false. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/AttachStdin`.
            package var AttachStdin: Swift.Bool?
            /// Whether to attach to `stdout`.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always false. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/AttachStdout`.
            package var AttachStdout: Swift.Bool?
            /// Whether to attach to `stderr`.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always false. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/AttachStderr`.
            package var AttachStderr: Swift.Bool?
            /// An object mapping ports to an empty object in the form:
            ///
            /// `{"<port>/<tcp|udp|sctp>": {}}`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/ExposedPorts`.
            package struct ExposedPortsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `ExposedPortsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// An object mapping ports to an empty object in the form:
            ///
            /// `{"<port>/<tcp|udp|sctp>": {}}`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/ExposedPorts`.
            package var ExposedPorts: Components.Schemas.ImageConfig.ExposedPortsPayload?
            /// Attach standard streams to a TTY, including `stdin` if it is not closed.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always false. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Tty`.
            package var Tty: Swift.Bool?
            /// Open `stdin`
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always false. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/OpenStdin`.
            package var OpenStdin: Swift.Bool?
            /// Close `stdin` after one attached client disconnects.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always false. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/StdinOnce`.
            package var StdinOnce: Swift.Bool?
            /// A list of environment variables to set inside the container in the
            /// form `["VAR=value", ...]`. A variable without `=` is removed from the
            /// environment, rather than to have an empty value.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Env`.
            package var Env: [Swift.String]?
            /// Command to run specified as a string or an array of strings.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Cmd`.
            package var Cmd: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Healthcheck`.
            package var Healthcheck: Components.Schemas.HealthConfig?
            /// Command is already escaped (Windows only)
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/ArgsEscaped`.
            package var ArgsEscaped: Swift.Bool?
            /// The name (or reference) of the image to use when creating the container,
            /// or which was used when the container was created.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always empty. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Image`.
            package var Image: Swift.String?
            /// An object mapping mount point paths inside the container to empty
            /// objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Volumes`.
            package struct VolumesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `VolumesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// An object mapping mount point paths inside the container to empty
            /// objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Volumes`.
            package var Volumes: Components.Schemas.ImageConfig.VolumesPayload?
            /// The working directory for commands to run in.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/WorkingDir`.
            package var WorkingDir: Swift.String?
            /// The entry point for the container as a string or an array of strings.
            ///
            /// If the array consists of exactly one empty string (`[""]`) then the
            /// entry point is reset to system default (i.e., the entry point used by
            /// docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Entrypoint`.
            package var Entrypoint: [Swift.String]?
            /// Disable networking for the container.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always omitted. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/NetworkDisabled`.
            package var NetworkDisabled: Swift.Bool?
            /// MAC address of the container.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always omitted. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/MacAddress`.
            package var MacAddress: Swift.String?
            /// `ONBUILD` metadata that were defined in the image's `Dockerfile`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/OnBuild`.
            package var OnBuild: [Swift.String]?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Labels`.
            package var Labels: Components.Schemas.ImageConfig.LabelsPayload?
            /// Signal to stop a container as a string or unsigned integer.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/StopSignal`.
            package var StopSignal: Swift.String?
            /// Timeout to stop a container in seconds.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: this field is not part of the image specification and is
            /// > always omitted. It must not be used, and will be removed in API v1.47.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/StopTimeout`.
            package var StopTimeout: Swift.Int?
            /// Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageConfig/Shell`.
            package var Shell: [Swift.String]?
            /// Creates a new `ImageConfig`.
            ///
            /// - Parameters:
            ///   - Hostname: The hostname to use for the container, as a valid RFC 1123 hostname.
            ///   - Domainname: The domain name to use for the container.
            ///   - User: The user that commands are run as inside the container.
            ///   - AttachStdin: Whether to attach to `stdin`.
            ///   - AttachStdout: Whether to attach to `stdout`.
            ///   - AttachStderr: Whether to attach to `stderr`.
            ///   - ExposedPorts: An object mapping ports to an empty object in the form:
            ///   - Tty: Attach standard streams to a TTY, including `stdin` if it is not closed.
            ///   - OpenStdin: Open `stdin`
            ///   - StdinOnce: Close `stdin` after one attached client disconnects.
            ///   - Env: A list of environment variables to set inside the container in the
            ///   - Cmd: Command to run specified as a string or an array of strings.
            ///   - Healthcheck:
            ///   - ArgsEscaped: Command is already escaped (Windows only)
            ///   - Image: The name (or reference) of the image to use when creating the container,
            ///   - Volumes: An object mapping mount point paths inside the container to empty
            ///   - WorkingDir: The working directory for commands to run in.
            ///   - Entrypoint: The entry point for the container as a string or an array of strings.
            ///   - NetworkDisabled: Disable networking for the container.
            ///   - MacAddress: MAC address of the container.
            ///   - OnBuild: `ONBUILD` metadata that were defined in the image's `Dockerfile`.
            ///   - Labels: User-defined key/value metadata.
            ///   - StopSignal: Signal to stop a container as a string or unsigned integer.
            ///   - StopTimeout: Timeout to stop a container in seconds.
            ///   - Shell: Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
            package init(
                Hostname: Swift.String? = nil,
                Domainname: Swift.String? = nil,
                User: Swift.String? = nil,
                AttachStdin: Swift.Bool? = nil,
                AttachStdout: Swift.Bool? = nil,
                AttachStderr: Swift.Bool? = nil,
                ExposedPorts: Components.Schemas.ImageConfig.ExposedPortsPayload? = nil,
                Tty: Swift.Bool? = nil,
                OpenStdin: Swift.Bool? = nil,
                StdinOnce: Swift.Bool? = nil,
                Env: [Swift.String]? = nil,
                Cmd: [Swift.String]? = nil,
                Healthcheck: Components.Schemas.HealthConfig? = nil,
                ArgsEscaped: Swift.Bool? = nil,
                Image: Swift.String? = nil,
                Volumes: Components.Schemas.ImageConfig.VolumesPayload? = nil,
                WorkingDir: Swift.String? = nil,
                Entrypoint: [Swift.String]? = nil,
                NetworkDisabled: Swift.Bool? = nil,
                MacAddress: Swift.String? = nil,
                OnBuild: [Swift.String]? = nil,
                Labels: Components.Schemas.ImageConfig.LabelsPayload? = nil,
                StopSignal: Swift.String? = nil,
                StopTimeout: Swift.Int? = nil,
                Shell: [Swift.String]? = nil
            ) {
                self.Hostname = Hostname
                self.Domainname = Domainname
                self.User = User
                self.AttachStdin = AttachStdin
                self.AttachStdout = AttachStdout
                self.AttachStderr = AttachStderr
                self.ExposedPorts = ExposedPorts
                self.Tty = Tty
                self.OpenStdin = OpenStdin
                self.StdinOnce = StdinOnce
                self.Env = Env
                self.Cmd = Cmd
                self.Healthcheck = Healthcheck
                self.ArgsEscaped = ArgsEscaped
                self.Image = Image
                self.Volumes = Volumes
                self.WorkingDir = WorkingDir
                self.Entrypoint = Entrypoint
                self.NetworkDisabled = NetworkDisabled
                self.MacAddress = MacAddress
                self.OnBuild = OnBuild
                self.Labels = Labels
                self.StopSignal = StopSignal
                self.StopTimeout = StopTimeout
                self.Shell = Shell
            }
            package enum CodingKeys: String, CodingKey {
                case Hostname
                case Domainname
                case User
                case AttachStdin
                case AttachStdout
                case AttachStderr
                case ExposedPorts
                case Tty
                case OpenStdin
                case StdinOnce
                case Env
                case Cmd
                case Healthcheck
                case ArgsEscaped
                case Image
                case Volumes
                case WorkingDir
                case Entrypoint
                case NetworkDisabled
                case MacAddress
                case OnBuild
                case Labels
                case StopSignal
                case StopTimeout
                case Shell
            }
        }
        /// NetworkingConfig represents the container's networking configuration for
        /// each of its interfaces.
        /// It is used for the networking configs specified in the `docker create`
        /// and `docker network connect` commands.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkingConfig`.
        package struct NetworkingConfig: Codable, Hashable, Sendable {
            /// A mapping of network name to endpoint configuration for that network.
            /// The endpoint configuration can be left empty to connect to that
            /// network with no particular endpoint configuration.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkingConfig/EndpointsConfig`.
            package struct EndpointsConfigPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Components.Schemas.EndpointSettings]
                /// Creates a new `EndpointsConfigPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Components.Schemas.EndpointSettings] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A mapping of network name to endpoint configuration for that network.
            /// The endpoint configuration can be left empty to connect to that
            /// network with no particular endpoint configuration.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkingConfig/EndpointsConfig`.
            package var EndpointsConfig: Components.Schemas.NetworkingConfig.EndpointsConfigPayload?
            /// Creates a new `NetworkingConfig`.
            ///
            /// - Parameters:
            ///   - EndpointsConfig: A mapping of network name to endpoint configuration for that network.
            package init(EndpointsConfig: Components.Schemas.NetworkingConfig.EndpointsConfigPayload? = nil) {
                self.EndpointsConfig = EndpointsConfig
            }
            package enum CodingKeys: String, CodingKey {
                case EndpointsConfig
            }
        }
        /// NetworkSettings exposes the network settings in the API
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkSettings`.
        package struct NetworkSettings: Codable, Hashable, Sendable {
            /// Name of the default bridge interface when dockerd's --bridge flag is set.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Bridge`.
            package var Bridge: Swift.String?
            /// SandboxID uniquely represents a container's network stack.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/SandboxID`.
            package var SandboxID: Swift.String?
            /// Indicates if hairpin NAT should be enabled on the virtual interface.
            ///
            /// Deprecated: This field is never set and will be removed in a future release.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/HairpinMode`.
            package var HairpinMode: Swift.Bool?
            /// IPv6 unicast address using the link-local prefix.
            ///
            /// Deprecated: This field is never set and will be removed in a future release.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/LinkLocalIPv6Address`.
            package var LinkLocalIPv6Address: Swift.String?
            /// Prefix length of the IPv6 unicast address.
            ///
            /// Deprecated: This field is never set and will be removed in a future release.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/LinkLocalIPv6PrefixLen`.
            package var LinkLocalIPv6PrefixLen: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Ports`.
            package var Ports: Components.Schemas.PortMap?
            /// SandboxKey is the full path of the netns handle
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/SandboxKey`.
            package var SandboxKey: Swift.String?
            /// Deprecated: This field is never set and will be removed in a future release.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/SecondaryIPAddresses`.
            package var SecondaryIPAddresses: [Components.Schemas.Address]?
            /// Deprecated: This field is never set and will be removed in a future release.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/SecondaryIPv6Addresses`.
            package var SecondaryIPv6Addresses: [Components.Schemas.Address]?
            /// EndpointID uniquely represents a service endpoint in a Sandbox.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: This field is only propagated when attached to the
            /// > default "bridge" network. Use the information from the "bridge"
            /// > network inside the `Networks` map instead, which contains the same
            /// > information. This field was deprecated in Docker 1.9 and is scheduled
            /// > to be removed in Docker 17.12.0
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/EndpointID`.
            package var EndpointID: Swift.String?
            /// Gateway address for the default "bridge" network.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: This field is only propagated when attached to the
            /// > default "bridge" network. Use the information from the "bridge"
            /// > network inside the `Networks` map instead, which contains the same
            /// > information. This field was deprecated in Docker 1.9 and is scheduled
            /// > to be removed in Docker 17.12.0
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Gateway`.
            package var Gateway: Swift.String?
            /// Global IPv6 address for the default "bridge" network.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: This field is only propagated when attached to the
            /// > default "bridge" network. Use the information from the "bridge"
            /// > network inside the `Networks` map instead, which contains the same
            /// > information. This field was deprecated in Docker 1.9 and is scheduled
            /// > to be removed in Docker 17.12.0
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/GlobalIPv6Address`.
            package var GlobalIPv6Address: Swift.String?
            /// Mask length of the global IPv6 address.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: This field is only propagated when attached to the
            /// > default "bridge" network. Use the information from the "bridge"
            /// > network inside the `Networks` map instead, which contains the same
            /// > information. This field was deprecated in Docker 1.9 and is scheduled
            /// > to be removed in Docker 17.12.0
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/GlobalIPv6PrefixLen`.
            package var GlobalIPv6PrefixLen: Swift.Int?
            /// IPv4 address for the default "bridge" network.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: This field is only propagated when attached to the
            /// > default "bridge" network. Use the information from the "bridge"
            /// > network inside the `Networks` map instead, which contains the same
            /// > information. This field was deprecated in Docker 1.9 and is scheduled
            /// > to be removed in Docker 17.12.0
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/IPAddress`.
            package var IPAddress: Swift.String?
            /// Mask length of the IPv4 address.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: This field is only propagated when attached to the
            /// > default "bridge" network. Use the information from the "bridge"
            /// > network inside the `Networks` map instead, which contains the same
            /// > information. This field was deprecated in Docker 1.9 and is scheduled
            /// > to be removed in Docker 17.12.0
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/IPPrefixLen`.
            package var IPPrefixLen: Swift.Int?
            /// IPv6 gateway address for this network.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: This field is only propagated when attached to the
            /// > default "bridge" network. Use the information from the "bridge"
            /// > network inside the `Networks` map instead, which contains the same
            /// > information. This field was deprecated in Docker 1.9 and is scheduled
            /// > to be removed in Docker 17.12.0
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/IPv6Gateway`.
            package var IPv6Gateway: Swift.String?
            /// MAC address for the container on the default "bridge" network.
            ///
            /// <p><br /></p>
            ///
            /// > **Deprecated**: This field is only propagated when attached to the
            /// > default "bridge" network. Use the information from the "bridge"
            /// > network inside the `Networks` map instead, which contains the same
            /// > information. This field was deprecated in Docker 1.9 and is scheduled
            /// > to be removed in Docker 17.12.0
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/MacAddress`.
            package var MacAddress: Swift.String?
            /// Information about all networks that the container is connected to.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Networks`.
            package struct NetworksPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Components.Schemas.EndpointSettings]
                /// Creates a new `NetworksPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Components.Schemas.EndpointSettings] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Information about all networks that the container is connected to.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkSettings/Networks`.
            package var Networks: Components.Schemas.NetworkSettings.NetworksPayload?
            /// Creates a new `NetworkSettings`.
            ///
            /// - Parameters:
            ///   - Bridge: Name of the default bridge interface when dockerd's --bridge flag is set.
            ///   - SandboxID: SandboxID uniquely represents a container's network stack.
            ///   - HairpinMode: Indicates if hairpin NAT should be enabled on the virtual interface.
            ///   - LinkLocalIPv6Address: IPv6 unicast address using the link-local prefix.
            ///   - LinkLocalIPv6PrefixLen: Prefix length of the IPv6 unicast address.
            ///   - Ports:
            ///   - SandboxKey: SandboxKey is the full path of the netns handle
            ///   - SecondaryIPAddresses: Deprecated: This field is never set and will be removed in a future release.
            ///   - SecondaryIPv6Addresses: Deprecated: This field is never set and will be removed in a future release.
            ///   - EndpointID: EndpointID uniquely represents a service endpoint in a Sandbox.
            ///   - Gateway: Gateway address for the default "bridge" network.
            ///   - GlobalIPv6Address: Global IPv6 address for the default "bridge" network.
            ///   - GlobalIPv6PrefixLen: Mask length of the global IPv6 address.
            ///   - IPAddress: IPv4 address for the default "bridge" network.
            ///   - IPPrefixLen: Mask length of the IPv4 address.
            ///   - IPv6Gateway: IPv6 gateway address for this network.
            ///   - MacAddress: MAC address for the container on the default "bridge" network.
            ///   - Networks: Information about all networks that the container is connected to.
            package init(
                Bridge: Swift.String? = nil,
                SandboxID: Swift.String? = nil,
                HairpinMode: Swift.Bool? = nil,
                LinkLocalIPv6Address: Swift.String? = nil,
                LinkLocalIPv6PrefixLen: Swift.Int? = nil,
                Ports: Components.Schemas.PortMap? = nil,
                SandboxKey: Swift.String? = nil,
                SecondaryIPAddresses: [Components.Schemas.Address]? = nil,
                SecondaryIPv6Addresses: [Components.Schemas.Address]? = nil,
                EndpointID: Swift.String? = nil,
                Gateway: Swift.String? = nil,
                GlobalIPv6Address: Swift.String? = nil,
                GlobalIPv6PrefixLen: Swift.Int? = nil,
                IPAddress: Swift.String? = nil,
                IPPrefixLen: Swift.Int? = nil,
                IPv6Gateway: Swift.String? = nil,
                MacAddress: Swift.String? = nil,
                Networks: Components.Schemas.NetworkSettings.NetworksPayload? = nil
            ) {
                self.Bridge = Bridge
                self.SandboxID = SandboxID
                self.HairpinMode = HairpinMode
                self.LinkLocalIPv6Address = LinkLocalIPv6Address
                self.LinkLocalIPv6PrefixLen = LinkLocalIPv6PrefixLen
                self.Ports = Ports
                self.SandboxKey = SandboxKey
                self.SecondaryIPAddresses = SecondaryIPAddresses
                self.SecondaryIPv6Addresses = SecondaryIPv6Addresses
                self.EndpointID = EndpointID
                self.Gateway = Gateway
                self.GlobalIPv6Address = GlobalIPv6Address
                self.GlobalIPv6PrefixLen = GlobalIPv6PrefixLen
                self.IPAddress = IPAddress
                self.IPPrefixLen = IPPrefixLen
                self.IPv6Gateway = IPv6Gateway
                self.MacAddress = MacAddress
                self.Networks = Networks
            }
            package enum CodingKeys: String, CodingKey {
                case Bridge
                case SandboxID
                case HairpinMode
                case LinkLocalIPv6Address
                case LinkLocalIPv6PrefixLen
                case Ports
                case SandboxKey
                case SecondaryIPAddresses
                case SecondaryIPv6Addresses
                case EndpointID
                case Gateway
                case GlobalIPv6Address
                case GlobalIPv6PrefixLen
                case IPAddress
                case IPPrefixLen
                case IPv6Gateway
                case MacAddress
                case Networks
            }
        }
        /// Address represents an IPv4 or IPv6 IP address.
        ///
        /// - Remark: Generated from `#/components/schemas/Address`.
        package struct Address: Codable, Hashable, Sendable {
            /// IP address.
            ///
            /// - Remark: Generated from `#/components/schemas/Address/Addr`.
            package var Addr: Swift.String?
            /// Mask length of the IP address.
            ///
            /// - Remark: Generated from `#/components/schemas/Address/PrefixLen`.
            package var PrefixLen: Swift.Int?
            /// Creates a new `Address`.
            ///
            /// - Parameters:
            ///   - Addr: IP address.
            ///   - PrefixLen: Mask length of the IP address.
            package init(
                Addr: Swift.String? = nil,
                PrefixLen: Swift.Int? = nil
            ) {
                self.Addr = Addr
                self.PrefixLen = PrefixLen
            }
            package enum CodingKeys: String, CodingKey {
                case Addr
                case PrefixLen
            }
        }
        /// PortMap describes the mapping of container ports to host ports, using the
        /// container's port-number and protocol as key in the format `<port>/<protocol>`,
        /// for example, `80/udp`.
        ///
        /// If a container's port is mapped for multiple protocols, separate entries
        /// are added to the mapping table.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/PortMap`.
        package struct PortMap: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            package var additionalProperties: [String: [Components.Schemas.PortBinding]?]
            /// Creates a new `PortMap`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            package init(additionalProperties: [String: [Components.Schemas.PortBinding]?] = .init()) {
                self.additionalProperties = additionalProperties
            }
            package init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            package func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// PortBinding represents a binding between a host IP address and a host
        /// port.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/PortBinding`.
        package struct PortBinding: Codable, Hashable, Sendable {
            /// Host IP address that the container's port is mapped to.
            ///
            /// - Remark: Generated from `#/components/schemas/PortBinding/HostIp`.
            package var HostIp: Swift.String?
            /// Host port number that the container's port is mapped to.
            ///
            /// - Remark: Generated from `#/components/schemas/PortBinding/HostPort`.
            package var HostPort: Swift.String?
            /// Creates a new `PortBinding`.
            ///
            /// - Parameters:
            ///   - HostIp: Host IP address that the container's port is mapped to.
            ///   - HostPort: Host port number that the container's port is mapped to.
            package init(
                HostIp: Swift.String? = nil,
                HostPort: Swift.String? = nil
            ) {
                self.HostIp = HostIp
                self.HostPort = HostPort
            }
            package enum CodingKeys: String, CodingKey {
                case HostIp
                case HostPort
            }
        }
        /// Information about the storage driver used to store the container's and
        /// image's filesystem.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/GraphDriverData`.
        package struct GraphDriverData: Codable, Hashable, Sendable {
            /// Name of the storage driver.
            ///
            /// - Remark: Generated from `#/components/schemas/GraphDriverData/Name`.
            package var Name: Swift.String
            /// Low-level storage metadata, provided as key/value pairs.
            ///
            /// This information is driver-specific, and depends on the storage-driver
            /// in use, and should be used for informational purposes only.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/GraphDriverData/Data`.
            package struct DataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Low-level storage metadata, provided as key/value pairs.
            ///
            /// This information is driver-specific, and depends on the storage-driver
            /// in use, and should be used for informational purposes only.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/GraphDriverData/Data`.
            package var Data: Components.Schemas.GraphDriverData.DataPayload
            /// Creates a new `GraphDriverData`.
            ///
            /// - Parameters:
            ///   - Name: Name of the storage driver.
            ///   - Data: Low-level storage metadata, provided as key/value pairs.
            package init(
                Name: Swift.String,
                Data: Components.Schemas.GraphDriverData.DataPayload
            ) {
                self.Name = Name
                self.Data = Data
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Data
            }
        }
        /// Change in the container's filesystem.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/FilesystemChange`.
        package struct FilesystemChange: Codable, Hashable, Sendable {
            /// Path to file or directory that has changed.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/FilesystemChange/Path`.
            package var Path: Swift.String
            /// - Remark: Generated from `#/components/schemas/FilesystemChange/Kind`.
            package var Kind: Components.Schemas.ChangeType
            /// Creates a new `FilesystemChange`.
            ///
            /// - Parameters:
            ///   - Path: Path to file or directory that has changed.
            ///   - Kind:
            package init(
                Path: Swift.String,
                Kind: Components.Schemas.ChangeType
            ) {
                self.Path = Path
                self.Kind = Kind
            }
            package enum CodingKeys: String, CodingKey {
                case Path
                case Kind
            }
        }
        /// Kind of change
        ///
        /// Can be one of:
        ///
        /// - `0`: Modified ("C")
        /// - `1`: Added ("A")
        /// - `2`: Deleted ("D")
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChangeType`.
        @frozen package enum ChangeType: Int, Codable, Hashable, Sendable {
            case _0 = 0
            case _1 = 1
            case _2 = 2
        }
        /// Information about an image in the local image cache.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ImageInspect`.
        package struct ImageInspect: Codable, Hashable, Sendable {
            /// ID is the content-addressable ID of an image.
            ///
            /// This identifier is a content-addressable digest calculated from the
            /// image's configuration (which includes the digests of layers used by
            /// the image).
            ///
            /// Note that this digest differs from the `RepoDigests` below, which
            /// holds digests of image manifests that reference the image.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Id`.
            package var Id: Swift.String?
            /// List of image names/tags in the local image cache that reference this
            /// image.
            ///
            /// Multiple image tags can refer to the same image, and this list may be
            /// empty if no tags reference the image, in which case the image is
            /// "untagged", in which case it can still be referenced by its ID.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/RepoTags`.
            package var RepoTags: [Swift.String]?
            /// List of content-addressable digests of locally available image manifests
            /// that the image is referenced from. Multiple manifests can refer to the
            /// same image.
            ///
            /// These digests are usually only available if the image was either pulled
            /// from a registry, or if the image was pushed to a registry, which is when
            /// the manifest is generated and its digest calculated.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/RepoDigests`.
            package var RepoDigests: [Swift.String]?
            /// ID of the parent image.
            ///
            /// Depending on how the image was created, this field may be empty and
            /// is only set for images that were built/created locally. This field
            /// is empty if the image was pulled from an image registry.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Parent`.
            package var Parent: Swift.String?
            /// Optional message that was set when committing or importing the image.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Comment`.
            package var Comment: Swift.String?
            /// Date and time at which the image was created, formatted in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            /// This information is only available if present in the image,
            /// and omitted otherwise.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Created`.
            package var Created: Swift.String?
            /// The version of Docker that was used to build the image.
            ///
            /// Depending on how the image was created, this field may be empty.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/DockerVersion`.
            package var DockerVersion: Swift.String?
            /// Name of the author that was specified when committing the image, or as
            /// specified through MAINTAINER (deprecated) in the Dockerfile.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Author`.
            package var Author: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Config`.
            package var Config: Components.Schemas.ImageConfig?
            /// Hardware CPU architecture that the image runs on.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Architecture`.
            package var Architecture: Swift.String?
            /// CPU architecture variant (presently ARM-only).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Variant`.
            package var Variant: Swift.String?
            /// Operating System the image is built to run on.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Os`.
            package var Os: Swift.String?
            /// Operating System version the image is built to run on (especially
            /// for Windows).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/OsVersion`.
            package var OsVersion: Swift.String?
            /// Total size of the image including all layers it is composed of.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Size`.
            package var Size: Swift.Int64?
            /// Total size of the image including all layers it is composed of.
            ///
            /// Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/VirtualSize`.
            package var VirtualSize: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ImageInspect/GraphDriver`.
            package var GraphDriver: Components.Schemas.GraphDriverData?
            /// Information about the image's RootFS, including the layer IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/RootFS`.
            package struct RootFSPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ImageInspect/RootFS/Type`.
                package var _Type: Swift.String
                /// - Remark: Generated from `#/components/schemas/ImageInspect/RootFS/Layers`.
                package var Layers: [Swift.String]?
                /// Creates a new `RootFSPayload`.
                ///
                /// - Parameters:
                ///   - _Type:
                ///   - Layers:
                package init(
                    _Type: Swift.String,
                    Layers: [Swift.String]? = nil
                ) {
                    self._Type = _Type
                    self.Layers = Layers
                }
                package enum CodingKeys: String, CodingKey {
                    case _Type = "Type"
                    case Layers
                }
            }
            /// Information about the image's RootFS, including the layer IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/RootFS`.
            package var RootFS: Components.Schemas.ImageInspect.RootFSPayload?
            /// Additional metadata of the image in the local cache. This information
            /// is local to the daemon, and not part of the image itself.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Metadata`.
            package struct MetadataPayload: Codable, Hashable, Sendable {
                /// Date and time at which the image was last tagged in
                /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                ///
                /// This information is only available if the image was tagged locally,
                /// and omitted otherwise.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ImageInspect/Metadata/LastTagTime`.
                package var LastTagTime: Swift.String?
                /// Creates a new `MetadataPayload`.
                ///
                /// - Parameters:
                ///   - LastTagTime: Date and time at which the image was last tagged in
                package init(LastTagTime: Swift.String? = nil) {
                    self.LastTagTime = LastTagTime
                }
                package enum CodingKeys: String, CodingKey {
                    case LastTagTime
                }
            }
            /// Additional metadata of the image in the local cache. This information
            /// is local to the daemon, and not part of the image itself.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageInspect/Metadata`.
            package var Metadata: Components.Schemas.ImageInspect.MetadataPayload?
            /// Creates a new `ImageInspect`.
            ///
            /// - Parameters:
            ///   - Id: ID is the content-addressable ID of an image.
            ///   - RepoTags: List of image names/tags in the local image cache that reference this
            ///   - RepoDigests: List of content-addressable digests of locally available image manifests
            ///   - Parent: ID of the parent image.
            ///   - Comment: Optional message that was set when committing or importing the image.
            ///   - Created: Date and time at which the image was created, formatted in
            ///   - DockerVersion: The version of Docker that was used to build the image.
            ///   - Author: Name of the author that was specified when committing the image, or as
            ///   - Config:
            ///   - Architecture: Hardware CPU architecture that the image runs on.
            ///   - Variant: CPU architecture variant (presently ARM-only).
            ///   - Os: Operating System the image is built to run on.
            ///   - OsVersion: Operating System version the image is built to run on (especially
            ///   - Size: Total size of the image including all layers it is composed of.
            ///   - VirtualSize: Total size of the image including all layers it is composed of.
            ///   - GraphDriver:
            ///   - RootFS: Information about the image's RootFS, including the layer IDs.
            ///   - Metadata: Additional metadata of the image in the local cache. This information
            package init(
                Id: Swift.String? = nil,
                RepoTags: [Swift.String]? = nil,
                RepoDigests: [Swift.String]? = nil,
                Parent: Swift.String? = nil,
                Comment: Swift.String? = nil,
                Created: Swift.String? = nil,
                DockerVersion: Swift.String? = nil,
                Author: Swift.String? = nil,
                Config: Components.Schemas.ImageConfig? = nil,
                Architecture: Swift.String? = nil,
                Variant: Swift.String? = nil,
                Os: Swift.String? = nil,
                OsVersion: Swift.String? = nil,
                Size: Swift.Int64? = nil,
                VirtualSize: Swift.Int64? = nil,
                GraphDriver: Components.Schemas.GraphDriverData? = nil,
                RootFS: Components.Schemas.ImageInspect.RootFSPayload? = nil,
                Metadata: Components.Schemas.ImageInspect.MetadataPayload? = nil
            ) {
                self.Id = Id
                self.RepoTags = RepoTags
                self.RepoDigests = RepoDigests
                self.Parent = Parent
                self.Comment = Comment
                self.Created = Created
                self.DockerVersion = DockerVersion
                self.Author = Author
                self.Config = Config
                self.Architecture = Architecture
                self.Variant = Variant
                self.Os = Os
                self.OsVersion = OsVersion
                self.Size = Size
                self.VirtualSize = VirtualSize
                self.GraphDriver = GraphDriver
                self.RootFS = RootFS
                self.Metadata = Metadata
            }
            package enum CodingKeys: String, CodingKey {
                case Id
                case RepoTags
                case RepoDigests
                case Parent
                case Comment
                case Created
                case DockerVersion
                case Author
                case Config
                case Architecture
                case Variant
                case Os
                case OsVersion
                case Size
                case VirtualSize
                case GraphDriver
                case RootFS
                case Metadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImageSummary`.
        package struct ImageSummary: Codable, Hashable, Sendable {
            /// ID is the content-addressable ID of an image.
            ///
            /// This identifier is a content-addressable digest calculated from the
            /// image's configuration (which includes the digests of layers used by
            /// the image).
            ///
            /// Note that this digest differs from the `RepoDigests` below, which
            /// holds digests of image manifests that reference the image.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/Id`.
            package var Id: Swift.String
            /// ID of the parent image.
            ///
            /// Depending on how the image was created, this field may be empty and
            /// is only set for images that were built/created locally. This field
            /// is empty if the image was pulled from an image registry.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/ParentId`.
            package var ParentId: Swift.String
            /// List of image names/tags in the local image cache that reference this
            /// image.
            ///
            /// Multiple image tags can refer to the same image, and this list may be
            /// empty if no tags reference the image, in which case the image is
            /// "untagged", in which case it can still be referenced by its ID.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/RepoTags`.
            package var RepoTags: [Swift.String]
            /// List of content-addressable digests of locally available image manifests
            /// that the image is referenced from. Multiple manifests can refer to the
            /// same image.
            ///
            /// These digests are usually only available if the image was either pulled
            /// from a registry, or if the image was pushed to a registry, which is when
            /// the manifest is generated and its digest calculated.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/RepoDigests`.
            package var RepoDigests: [Swift.String]
            /// Date and time at which the image was created as a Unix timestamp
            /// (number of seconds sinds EPOCH).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/Created`.
            package var Created: Swift.Int
            /// Total size of the image including all layers it is composed of.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/Size`.
            package var Size: Swift.Int64
            /// Total size of image layers that are shared between this image and other
            /// images.
            ///
            /// This size is not calculated by default. `-1` indicates that the value
            /// has not been set / calculated.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/SharedSize`.
            package var SharedSize: Swift.Int64
            /// Total size of the image including all layers it is composed of.
            ///
            /// Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/VirtualSize`.
            package var VirtualSize: Swift.Int64?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/Labels`.
            package var Labels: Components.Schemas.ImageSummary.LabelsPayload
            /// Number of containers using this image. Includes both stopped and running
            /// containers.
            ///
            /// This size is not calculated by default, and depends on which API endpoint
            /// is used. `-1` indicates that the value has not been set / calculated.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSummary/Containers`.
            package var Containers: Swift.Int
            /// Creates a new `ImageSummary`.
            ///
            /// - Parameters:
            ///   - Id: ID is the content-addressable ID of an image.
            ///   - ParentId: ID of the parent image.
            ///   - RepoTags: List of image names/tags in the local image cache that reference this
            ///   - RepoDigests: List of content-addressable digests of locally available image manifests
            ///   - Created: Date and time at which the image was created as a Unix timestamp
            ///   - Size: Total size of the image including all layers it is composed of.
            ///   - SharedSize: Total size of image layers that are shared between this image and other
            ///   - VirtualSize: Total size of the image including all layers it is composed of.
            ///   - Labels: User-defined key/value metadata.
            ///   - Containers: Number of containers using this image. Includes both stopped and running
            package init(
                Id: Swift.String,
                ParentId: Swift.String,
                RepoTags: [Swift.String],
                RepoDigests: [Swift.String],
                Created: Swift.Int,
                Size: Swift.Int64,
                SharedSize: Swift.Int64,
                VirtualSize: Swift.Int64? = nil,
                Labels: Components.Schemas.ImageSummary.LabelsPayload,
                Containers: Swift.Int
            ) {
                self.Id = Id
                self.ParentId = ParentId
                self.RepoTags = RepoTags
                self.RepoDigests = RepoDigests
                self.Created = Created
                self.Size = Size
                self.SharedSize = SharedSize
                self.VirtualSize = VirtualSize
                self.Labels = Labels
                self.Containers = Containers
            }
            package enum CodingKeys: String, CodingKey {
                case Id
                case ParentId
                case RepoTags
                case RepoDigests
                case Created
                case Size
                case SharedSize
                case VirtualSize
                case Labels
                case Containers
            }
        }
        /// - Remark: Generated from `#/components/schemas/AuthConfig`.
        package struct AuthConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthConfig/username`.
            package var username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthConfig/password`.
            package var password: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthConfig/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthConfig/serveraddress`.
            package var serveraddress: Swift.String?
            /// Creates a new `AuthConfig`.
            ///
            /// - Parameters:
            ///   - username:
            ///   - password:
            ///   - email:
            ///   - serveraddress:
            package init(
                username: Swift.String? = nil,
                password: Swift.String? = nil,
                email: Swift.String? = nil,
                serveraddress: Swift.String? = nil
            ) {
                self.username = username
                self.password = password
                self.email = email
                self.serveraddress = serveraddress
            }
            package enum CodingKeys: String, CodingKey {
                case username
                case password
                case email
                case serveraddress
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProcessConfig`.
        package struct ProcessConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProcessConfig/privileged`.
            package var privileged: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ProcessConfig/user`.
            package var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ProcessConfig/tty`.
            package var tty: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ProcessConfig/entrypoint`.
            package var entrypoint: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ProcessConfig/arguments`.
            package var arguments: [Swift.String]?
            /// Creates a new `ProcessConfig`.
            ///
            /// - Parameters:
            ///   - privileged:
            ///   - user:
            ///   - tty:
            ///   - entrypoint:
            ///   - arguments:
            package init(
                privileged: Swift.Bool? = nil,
                user: Swift.String? = nil,
                tty: Swift.Bool? = nil,
                entrypoint: Swift.String? = nil,
                arguments: [Swift.String]? = nil
            ) {
                self.privileged = privileged
                self.user = user
                self.tty = tty
                self.entrypoint = entrypoint
                self.arguments = arguments
            }
            package enum CodingKeys: String, CodingKey {
                case privileged
                case user
                case tty
                case entrypoint
                case arguments
            }
        }
        /// - Remark: Generated from `#/components/schemas/Volume`.
        package struct Volume: Codable, Hashable, Sendable {
            /// Name of the volume.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Name`.
            package var Name: Swift.String
            /// Name of the volume driver used by the volume.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Driver`.
            package var Driver: Swift.String
            /// Mount path of the volume on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Mountpoint`.
            package var Mountpoint: Swift.String
            /// Date/Time the volume was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/CreatedAt`.
            package var CreatedAt: Swift.String?
            /// Low-level details about the volume, provided by the volume driver.
            /// Details are returned as a map with key/value pairs:
            /// `{"key":"value","key2":"value2"}`.
            ///
            /// The `Status` field is optional, and is omitted if the volume driver
            /// does not support this feature.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Status`.
            package struct StatusPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
                /// Creates a new `StatusPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Low-level details about the volume, provided by the volume driver.
            /// Details are returned as a map with key/value pairs:
            /// `{"key":"value","key2":"value2"}`.
            ///
            /// The `Status` field is optional, and is omitted if the volume driver
            /// does not support this feature.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Status`.
            package var Status: Components.Schemas.Volume.StatusPayload?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Labels`.
            package var Labels: Components.Schemas.Volume.LabelsPayload
            /// The level at which the volume exists. Either `global` for cluster-wide,
            /// or `local` for machine level.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Scope`.
            @frozen package enum ScopePayload: String, Codable, Hashable, Sendable {
                case local = "local"
                case global = "global"
            }
            /// The level at which the volume exists. Either `global` for cluster-wide,
            /// or `local` for machine level.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Scope`.
            package var Scope: Components.Schemas.Volume.ScopePayload
            /// - Remark: Generated from `#/components/schemas/Volume/ClusterVolume`.
            package var ClusterVolume: Components.Schemas.ClusterVolume?
            /// The driver specific options used when creating the volume.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Options`.
            package struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The driver specific options used when creating the volume.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/Options`.
            package var Options: Components.Schemas.Volume.OptionsPayload
            /// Usage details about the volume. This information is used by the
            /// `GET /system/df` endpoint, and omitted in other endpoints.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/UsageData`.
            package struct UsageDataPayload: Codable, Hashable, Sendable {
                /// Amount of disk space used by the volume (in bytes). This information
                /// is only available for volumes created with the `"local"` volume
                /// driver. For volumes created with other volume drivers, this field
                /// is set to `-1` ("not available")
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Volume/UsageData/Size`.
                package var Size: Swift.Int64
                /// The number of containers referencing this volume. This field
                /// is set to `-1` if the reference-count is not available.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Volume/UsageData/RefCount`.
                package var RefCount: Swift.Int64
                /// Creates a new `UsageDataPayload`.
                ///
                /// - Parameters:
                ///   - Size: Amount of disk space used by the volume (in bytes). This information
                ///   - RefCount: The number of containers referencing this volume. This field
                package init(
                    Size: Swift.Int64,
                    RefCount: Swift.Int64
                ) {
                    self.Size = Size
                    self.RefCount = RefCount
                }
                package enum CodingKeys: String, CodingKey {
                    case Size
                    case RefCount
                }
            }
            /// Usage details about the volume. This information is used by the
            /// `GET /system/df` endpoint, and omitted in other endpoints.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Volume/UsageData`.
            package var UsageData: Components.Schemas.Volume.UsageDataPayload?
            /// Creates a new `Volume`.
            ///
            /// - Parameters:
            ///   - Name: Name of the volume.
            ///   - Driver: Name of the volume driver used by the volume.
            ///   - Mountpoint: Mount path of the volume on the host.
            ///   - CreatedAt: Date/Time the volume was created.
            ///   - Status: Low-level details about the volume, provided by the volume driver.
            ///   - Labels: User-defined key/value metadata.
            ///   - Scope: The level at which the volume exists. Either `global` for cluster-wide,
            ///   - ClusterVolume:
            ///   - Options: The driver specific options used when creating the volume.
            ///   - UsageData: Usage details about the volume. This information is used by the
            package init(
                Name: Swift.String,
                Driver: Swift.String,
                Mountpoint: Swift.String,
                CreatedAt: Swift.String? = nil,
                Status: Components.Schemas.Volume.StatusPayload? = nil,
                Labels: Components.Schemas.Volume.LabelsPayload,
                Scope: Components.Schemas.Volume.ScopePayload,
                ClusterVolume: Components.Schemas.ClusterVolume? = nil,
                Options: Components.Schemas.Volume.OptionsPayload,
                UsageData: Components.Schemas.Volume.UsageDataPayload? = nil
            ) {
                self.Name = Name
                self.Driver = Driver
                self.Mountpoint = Mountpoint
                self.CreatedAt = CreatedAt
                self.Status = Status
                self.Labels = Labels
                self.Scope = Scope
                self.ClusterVolume = ClusterVolume
                self.Options = Options
                self.UsageData = UsageData
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Driver
                case Mountpoint
                case CreatedAt
                case Status
                case Labels
                case Scope
                case ClusterVolume
                case Options
                case UsageData
            }
        }
        /// Volume configuration
        ///
        /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions`.
        package struct VolumeCreateOptions: Codable, Hashable, Sendable {
            /// The new volume's name. If not specified, Docker generates a name.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Name`.
            package var Name: Swift.String?
            /// Name of the volume driver to use.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Driver`.
            package var Driver: Swift.String?
            /// A mapping of driver options and values. These options are
            /// passed directly to the driver and are driver specific.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/DriverOpts`.
            package struct DriverOptsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `DriverOptsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A mapping of driver options and values. These options are
            /// passed directly to the driver and are driver specific.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/DriverOpts`.
            package var DriverOpts: Components.Schemas.VolumeCreateOptions.DriverOptsPayload?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/Labels`.
            package var Labels: Components.Schemas.VolumeCreateOptions.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/VolumeCreateOptions/ClusterVolumeSpec`.
            package var ClusterVolumeSpec: Components.Schemas.ClusterVolumeSpec?
            /// Creates a new `VolumeCreateOptions`.
            ///
            /// - Parameters:
            ///   - Name: The new volume's name. If not specified, Docker generates a name.
            ///   - Driver: Name of the volume driver to use.
            ///   - DriverOpts: A mapping of driver options and values. These options are
            ///   - Labels: User-defined key/value metadata.
            ///   - ClusterVolumeSpec:
            package init(
                Name: Swift.String? = nil,
                Driver: Swift.String? = nil,
                DriverOpts: Components.Schemas.VolumeCreateOptions.DriverOptsPayload? = nil,
                Labels: Components.Schemas.VolumeCreateOptions.LabelsPayload? = nil,
                ClusterVolumeSpec: Components.Schemas.ClusterVolumeSpec? = nil
            ) {
                self.Name = Name
                self.Driver = Driver
                self.DriverOpts = DriverOpts
                self.Labels = Labels
                self.ClusterVolumeSpec = ClusterVolumeSpec
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Driver
                case DriverOpts
                case Labels
                case ClusterVolumeSpec
            }
        }
        /// Volume list response
        ///
        /// - Remark: Generated from `#/components/schemas/VolumeListResponse`.
        package struct VolumeListResponse: Codable, Hashable, Sendable {
            /// List of volumes
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeListResponse/Volumes`.
            package var Volumes: [Components.Schemas.Volume]?
            /// Warnings that occurred when fetching the list of volumes.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/VolumeListResponse/Warnings`.
            package var Warnings: [Swift.String]?
            /// Creates a new `VolumeListResponse`.
            ///
            /// - Parameters:
            ///   - Volumes: List of volumes
            ///   - Warnings: Warnings that occurred when fetching the list of volumes.
            package init(
                Volumes: [Components.Schemas.Volume]? = nil,
                Warnings: [Swift.String]? = nil
            ) {
                self.Volumes = Volumes
                self.Warnings = Warnings
            }
            package enum CodingKeys: String, CodingKey {
                case Volumes
                case Warnings
            }
        }
        /// - Remark: Generated from `#/components/schemas/Network`.
        package struct Network: Codable, Hashable, Sendable {
            /// Name of the network.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Name`.
            package var Name: Swift.String?
            /// ID that uniquely identifies a network on a single machine.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Id`.
            package var Id: Swift.String?
            /// Date and time at which the network was created in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Created`.
            package var Created: Swift.String?
            /// The level at which the network exists (e.g. `swarm` for cluster-wide
            /// or `local` for machine level)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Scope`.
            package var Scope: Swift.String?
            /// The name of the driver used to create the network (e.g. `bridge`,
            /// `overlay`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Driver`.
            package var Driver: Swift.String?
            /// Whether the network was created with IPv6 enabled.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/EnableIPv6`.
            package var EnableIPv6: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Network/IPAM`.
            package var IPAM: Components.Schemas.IPAM?
            /// Whether the network is created to only allow internal networking
            /// connectivity.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Internal`.
            package var Internal: Swift.Bool?
            /// Wheter a global / swarm scope network is manually attachable by regular
            /// containers from workers in swarm mode.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Attachable`.
            package var Attachable: Swift.Bool?
            /// Whether the network is providing the routing-mesh for the swarm cluster.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Ingress`.
            package var Ingress: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Network/ConfigFrom`.
            package var ConfigFrom: Components.Schemas.ConfigReference?
            /// Whether the network is a config-only network. Config-only networks are
            /// placeholder networks for network configurations to be used by other
            /// networks. Config-only networks cannot be used directly to run containers
            /// or services.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/ConfigOnly`.
            package var ConfigOnly: Swift.Bool?
            /// Contains endpoints attached to the network.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Containers`.
            package struct ContainersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Components.Schemas.NetworkContainer]
                /// Creates a new `ContainersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Components.Schemas.NetworkContainer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Contains endpoints attached to the network.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Containers`.
            package var Containers: Components.Schemas.Network.ContainersPayload?
            /// Network-specific options uses when creating the network.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Options`.
            package struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Network-specific options uses when creating the network.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Options`.
            package var Options: Components.Schemas.Network.OptionsPayload?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Labels`.
            package var Labels: Components.Schemas.Network.LabelsPayload?
            /// List of peer nodes for an overlay network. This field is only present
            /// for overlay networks, and omitted for other network types.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Network/Peers`.
            package var Peers: [Components.Schemas.PeerInfo]?
            /// Creates a new `Network`.
            ///
            /// - Parameters:
            ///   - Name: Name of the network.
            ///   - Id: ID that uniquely identifies a network on a single machine.
            ///   - Created: Date and time at which the network was created in
            ///   - Scope: The level at which the network exists (e.g. `swarm` for cluster-wide
            ///   - Driver: The name of the driver used to create the network (e.g. `bridge`,
            ///   - EnableIPv6: Whether the network was created with IPv6 enabled.
            ///   - IPAM:
            ///   - Internal: Whether the network is created to only allow internal networking
            ///   - Attachable: Wheter a global / swarm scope network is manually attachable by regular
            ///   - Ingress: Whether the network is providing the routing-mesh for the swarm cluster.
            ///   - ConfigFrom:
            ///   - ConfigOnly: Whether the network is a config-only network. Config-only networks are
            ///   - Containers: Contains endpoints attached to the network.
            ///   - Options: Network-specific options uses when creating the network.
            ///   - Labels: User-defined key/value metadata.
            ///   - Peers: List of peer nodes for an overlay network. This field is only present
            package init(
                Name: Swift.String? = nil,
                Id: Swift.String? = nil,
                Created: Swift.String? = nil,
                Scope: Swift.String? = nil,
                Driver: Swift.String? = nil,
                EnableIPv6: Swift.Bool? = nil,
                IPAM: Components.Schemas.IPAM? = nil,
                Internal: Swift.Bool? = nil,
                Attachable: Swift.Bool? = nil,
                Ingress: Swift.Bool? = nil,
                ConfigFrom: Components.Schemas.ConfigReference? = nil,
                ConfigOnly: Swift.Bool? = nil,
                Containers: Components.Schemas.Network.ContainersPayload? = nil,
                Options: Components.Schemas.Network.OptionsPayload? = nil,
                Labels: Components.Schemas.Network.LabelsPayload? = nil,
                Peers: [Components.Schemas.PeerInfo]? = nil
            ) {
                self.Name = Name
                self.Id = Id
                self.Created = Created
                self.Scope = Scope
                self.Driver = Driver
                self.EnableIPv6 = EnableIPv6
                self.IPAM = IPAM
                self.Internal = Internal
                self.Attachable = Attachable
                self.Ingress = Ingress
                self.ConfigFrom = ConfigFrom
                self.ConfigOnly = ConfigOnly
                self.Containers = Containers
                self.Options = Options
                self.Labels = Labels
                self.Peers = Peers
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Id
                case Created
                case Scope
                case Driver
                case EnableIPv6
                case IPAM
                case Internal
                case Attachable
                case Ingress
                case ConfigFrom
                case ConfigOnly
                case Containers
                case Options
                case Labels
                case Peers
            }
        }
        /// The config-only network source to provide the configuration for
        /// this network.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ConfigReference`.
        package struct ConfigReference: Codable, Hashable, Sendable {
            /// The name of the config-only network that provides the network's
            /// configuration. The specified network must be an existing config-only
            /// network. Only network names are allowed, not network IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ConfigReference/Network`.
            package var Network: Swift.String?
            /// Creates a new `ConfigReference`.
            ///
            /// - Parameters:
            ///   - Network: The name of the config-only network that provides the network's
            package init(Network: Swift.String? = nil) {
                self.Network = Network
            }
            package enum CodingKeys: String, CodingKey {
                case Network
            }
        }
        /// - Remark: Generated from `#/components/schemas/IPAM`.
        package struct IPAM: Codable, Hashable, Sendable {
            /// Name of the IPAM driver to use.
            ///
            /// - Remark: Generated from `#/components/schemas/IPAM/Driver`.
            package var Driver: Swift.String?
            /// List of IPAM configuration options, specified as a map:
            ///
            /// ```
            /// {"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/IPAM/Config`.
            package var Config: [Components.Schemas.IPAMConfig]?
            /// Driver-specific options, specified as a map.
            ///
            /// - Remark: Generated from `#/components/schemas/IPAM/Options`.
            package struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Driver-specific options, specified as a map.
            ///
            /// - Remark: Generated from `#/components/schemas/IPAM/Options`.
            package var Options: Components.Schemas.IPAM.OptionsPayload?
            /// Creates a new `IPAM`.
            ///
            /// - Parameters:
            ///   - Driver: Name of the IPAM driver to use.
            ///   - Config: List of IPAM configuration options, specified as a map:
            ///   - Options: Driver-specific options, specified as a map.
            package init(
                Driver: Swift.String? = nil,
                Config: [Components.Schemas.IPAMConfig]? = nil,
                Options: Components.Schemas.IPAM.OptionsPayload? = nil
            ) {
                self.Driver = Driver
                self.Config = Config
                self.Options = Options
            }
            package enum CodingKeys: String, CodingKey {
                case Driver
                case Config
                case Options
            }
        }
        /// - Remark: Generated from `#/components/schemas/IPAMConfig`.
        package struct IPAMConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/Subnet`.
            package var Subnet: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/IPRange`.
            package var IPRange: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/Gateway`.
            package var Gateway: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/AuxiliaryAddresses`.
            package struct AuxiliaryAddressesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `AuxiliaryAddressesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/IPAMConfig/AuxiliaryAddresses`.
            package var AuxiliaryAddresses: Components.Schemas.IPAMConfig.AuxiliaryAddressesPayload?
            /// Creates a new `IPAMConfig`.
            ///
            /// - Parameters:
            ///   - Subnet:
            ///   - IPRange:
            ///   - Gateway:
            ///   - AuxiliaryAddresses:
            package init(
                Subnet: Swift.String? = nil,
                IPRange: Swift.String? = nil,
                Gateway: Swift.String? = nil,
                AuxiliaryAddresses: Components.Schemas.IPAMConfig.AuxiliaryAddressesPayload? = nil
            ) {
                self.Subnet = Subnet
                self.IPRange = IPRange
                self.Gateway = Gateway
                self.AuxiliaryAddresses = AuxiliaryAddresses
            }
            package enum CodingKeys: String, CodingKey {
                case Subnet
                case IPRange
                case Gateway
                case AuxiliaryAddresses
            }
        }
        /// - Remark: Generated from `#/components/schemas/NetworkContainer`.
        package struct NetworkContainer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkContainer/Name`.
            package var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkContainer/EndpointID`.
            package var EndpointID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkContainer/MacAddress`.
            package var MacAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkContainer/IPv4Address`.
            package var IPv4Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NetworkContainer/IPv6Address`.
            package var IPv6Address: Swift.String?
            /// Creates a new `NetworkContainer`.
            ///
            /// - Parameters:
            ///   - Name:
            ///   - EndpointID:
            ///   - MacAddress:
            ///   - IPv4Address:
            ///   - IPv6Address:
            package init(
                Name: Swift.String? = nil,
                EndpointID: Swift.String? = nil,
                MacAddress: Swift.String? = nil,
                IPv4Address: Swift.String? = nil,
                IPv6Address: Swift.String? = nil
            ) {
                self.Name = Name
                self.EndpointID = EndpointID
                self.MacAddress = MacAddress
                self.IPv4Address = IPv4Address
                self.IPv6Address = IPv6Address
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case EndpointID
                case MacAddress
                case IPv4Address
                case IPv6Address
            }
        }
        /// PeerInfo represents one peer of an overlay network.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/PeerInfo`.
        package struct PeerInfo: Codable, Hashable, Sendable {
            /// ID of the peer-node in the Swarm cluster.
            ///
            /// - Remark: Generated from `#/components/schemas/PeerInfo/Name`.
            package var Name: Swift.String?
            /// IP-address of the peer-node in the Swarm cluster.
            ///
            /// - Remark: Generated from `#/components/schemas/PeerInfo/IP`.
            package var IP: Swift.String?
            /// Creates a new `PeerInfo`.
            ///
            /// - Parameters:
            ///   - Name: ID of the peer-node in the Swarm cluster.
            ///   - IP: IP-address of the peer-node in the Swarm cluster.
            package init(
                Name: Swift.String? = nil,
                IP: Swift.String? = nil
            ) {
                self.Name = Name
                self.IP = IP
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case IP
            }
        }
        /// OK response to NetworkCreate operation
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkCreateResponse`.
        package struct NetworkCreateResponse: Codable, Hashable, Sendable {
            /// The ID of the created network.
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkCreateResponse/Id`.
            package var Id: Swift.String
            /// Warnings encountered when creating the container
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkCreateResponse/Warning`.
            package var Warning: Swift.String
            /// Creates a new `NetworkCreateResponse`.
            ///
            /// - Parameters:
            ///   - Id: The ID of the created network.
            ///   - Warning: Warnings encountered when creating the container
            package init(
                Id: Swift.String,
                Warning: Swift.String
            ) {
                self.Id = Id
                self.Warning = Warning
            }
            package enum CodingKeys: String, CodingKey {
                case Id
                case Warning
            }
        }
        /// - Remark: Generated from `#/components/schemas/BuildInfo`.
        package struct BuildInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BuildInfo/id`.
            package var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BuildInfo/stream`.
            package var stream: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BuildInfo/error`.
            package var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BuildInfo/errorDetail`.
            package var errorDetail: Components.Schemas.ErrorDetail?
            /// - Remark: Generated from `#/components/schemas/BuildInfo/status`.
            package var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BuildInfo/progress`.
            package var progress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BuildInfo/progressDetail`.
            package var progressDetail: Components.Schemas.ProgressDetail?
            /// - Remark: Generated from `#/components/schemas/BuildInfo/aux`.
            package var aux: Components.Schemas.ImageID?
            /// Creates a new `BuildInfo`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - stream:
            ///   - error:
            ///   - errorDetail:
            ///   - status:
            ///   - progress:
            ///   - progressDetail:
            ///   - aux:
            package init(
                id: Swift.String? = nil,
                stream: Swift.String? = nil,
                error: Swift.String? = nil,
                errorDetail: Components.Schemas.ErrorDetail? = nil,
                status: Swift.String? = nil,
                progress: Swift.String? = nil,
                progressDetail: Components.Schemas.ProgressDetail? = nil,
                aux: Components.Schemas.ImageID? = nil
            ) {
                self.id = id
                self.stream = stream
                self.error = error
                self.errorDetail = errorDetail
                self.status = status
                self.progress = progress
                self.progressDetail = progressDetail
                self.aux = aux
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case stream
                case error
                case errorDetail
                case status
                case progress
                case progressDetail
                case aux
            }
        }
        /// BuildCache contains information about a build cache record.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/BuildCache`.
        package struct BuildCache: Codable, Hashable, Sendable {
            /// Unique ID of the build cache record.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/ID`.
            package var ID: Swift.String?
            /// ID of the parent build cache record.
            ///
            /// > **Deprecated**: This field is deprecated, and omitted if empty.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/Parent`.
            package var Parent: Swift.String?
            /// List of parent build cache record IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/Parents`.
            package var Parents: [Swift.String]?
            /// Cache record type.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/Type`.
            @frozen package enum _TypePayload: String, Codable, Hashable, Sendable {
                case _internal = "internal"
                case frontend = "frontend"
                case source_period_local = "source.local"
                case source_period_git_period_checkout = "source.git.checkout"
                case exec_period_cachemount = "exec.cachemount"
                case regular = "regular"
            }
            /// Cache record type.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/Type`.
            package var _Type: Components.Schemas.BuildCache._TypePayload?
            /// Description of the build-step that produced the build cache.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/Description`.
            package var Description: Swift.String?
            /// Indicates if the build cache is in use.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/InUse`.
            package var InUse: Swift.Bool?
            /// Indicates if the build cache is shared.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/Shared`.
            package var Shared: Swift.Bool?
            /// Amount of disk space used by the build cache (in bytes).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/Size`.
            package var Size: Swift.Int?
            /// Date and time at which the build cache was created in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/CreatedAt`.
            package var CreatedAt: Swift.String?
            /// Date and time at which the build cache was last used in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BuildCache/LastUsedAt`.
            package var LastUsedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BuildCache/UsageCount`.
            package var UsageCount: Swift.Int?
            /// Creates a new `BuildCache`.
            ///
            /// - Parameters:
            ///   - ID: Unique ID of the build cache record.
            ///   - Parent: ID of the parent build cache record.
            ///   - Parents: List of parent build cache record IDs.
            ///   - _Type: Cache record type.
            ///   - Description: Description of the build-step that produced the build cache.
            ///   - InUse: Indicates if the build cache is in use.
            ///   - Shared: Indicates if the build cache is shared.
            ///   - Size: Amount of disk space used by the build cache (in bytes).
            ///   - CreatedAt: Date and time at which the build cache was created in
            ///   - LastUsedAt: Date and time at which the build cache was last used in
            ///   - UsageCount:
            package init(
                ID: Swift.String? = nil,
                Parent: Swift.String? = nil,
                Parents: [Swift.String]? = nil,
                _Type: Components.Schemas.BuildCache._TypePayload? = nil,
                Description: Swift.String? = nil,
                InUse: Swift.Bool? = nil,
                Shared: Swift.Bool? = nil,
                Size: Swift.Int? = nil,
                CreatedAt: Swift.String? = nil,
                LastUsedAt: Swift.String? = nil,
                UsageCount: Swift.Int? = nil
            ) {
                self.ID = ID
                self.Parent = Parent
                self.Parents = Parents
                self._Type = _Type
                self.Description = Description
                self.InUse = InUse
                self.Shared = Shared
                self.Size = Size
                self.CreatedAt = CreatedAt
                self.LastUsedAt = LastUsedAt
                self.UsageCount = UsageCount
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Parent
                case Parents
                case _Type = "Type"
                case Description
                case InUse
                case Shared
                case Size
                case CreatedAt
                case LastUsedAt
                case UsageCount
            }
        }
        /// Image ID or Digest
        ///
        /// - Remark: Generated from `#/components/schemas/ImageID`.
        package struct ImageID: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImageID/ID`.
            package var ID: Swift.String?
            /// Creates a new `ImageID`.
            ///
            /// - Parameters:
            ///   - ID:
            package init(ID: Swift.String? = nil) {
                self.ID = ID
            }
            package enum CodingKeys: String, CodingKey {
                case ID
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageInfo`.
        package struct CreateImageInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateImageInfo/id`.
            package var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateImageInfo/error`.
            package var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateImageInfo/errorDetail`.
            package var errorDetail: Components.Schemas.ErrorDetail?
            /// - Remark: Generated from `#/components/schemas/CreateImageInfo/status`.
            package var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateImageInfo/progress`.
            package var progress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateImageInfo/progressDetail`.
            package var progressDetail: Components.Schemas.ProgressDetail?
            /// Creates a new `CreateImageInfo`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - error:
            ///   - errorDetail:
            ///   - status:
            ///   - progress:
            ///   - progressDetail:
            package init(
                id: Swift.String? = nil,
                error: Swift.String? = nil,
                errorDetail: Components.Schemas.ErrorDetail? = nil,
                status: Swift.String? = nil,
                progress: Swift.String? = nil,
                progressDetail: Components.Schemas.ProgressDetail? = nil
            ) {
                self.id = id
                self.error = error
                self.errorDetail = errorDetail
                self.status = status
                self.progress = progress
                self.progressDetail = progressDetail
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case error
                case errorDetail
                case status
                case progress
                case progressDetail
            }
        }
        /// - Remark: Generated from `#/components/schemas/PushImageInfo`.
        package struct PushImageInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PushImageInfo/error`.
            package var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PushImageInfo/status`.
            package var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PushImageInfo/progress`.
            package var progress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PushImageInfo/progressDetail`.
            package var progressDetail: Components.Schemas.ProgressDetail?
            /// Creates a new `PushImageInfo`.
            ///
            /// - Parameters:
            ///   - error:
            ///   - status:
            ///   - progress:
            ///   - progressDetail:
            package init(
                error: Swift.String? = nil,
                status: Swift.String? = nil,
                progress: Swift.String? = nil,
                progressDetail: Components.Schemas.ProgressDetail? = nil
            ) {
                self.error = error
                self.status = status
                self.progress = progress
                self.progressDetail = progressDetail
            }
            package enum CodingKeys: String, CodingKey {
                case error
                case status
                case progress
                case progressDetail
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorDetail`.
        package struct ErrorDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorDetail/code`.
            package var code: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ErrorDetail/message`.
            package var message: Swift.String?
            /// Creates a new `ErrorDetail`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - message:
            package init(
                code: Swift.Int? = nil,
                message: Swift.String? = nil
            ) {
                self.code = code
                self.message = message
            }
            package enum CodingKeys: String, CodingKey {
                case code
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProgressDetail`.
        package struct ProgressDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProgressDetail/current`.
            package var current: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ProgressDetail/total`.
            package var total: Swift.Int?
            /// Creates a new `ProgressDetail`.
            ///
            /// - Parameters:
            ///   - current:
            ///   - total:
            package init(
                current: Swift.Int? = nil,
                total: Swift.Int? = nil
            ) {
                self.current = current
                self.total = total
            }
            package enum CodingKeys: String, CodingKey {
                case current
                case total
            }
        }
        /// Represents an error.
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        package struct ErrorResponse: Codable, Hashable, Sendable {
            /// The error message.
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/message`.
            package var message: Swift.String
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - message: The error message.
            package init(message: Swift.String) {
                self.message = message
            }
            package enum CodingKeys: String, CodingKey {
                case message
            }
        }
        /// Response to an API call that returns just an Id
        ///
        /// - Remark: Generated from `#/components/schemas/IdResponse`.
        package struct IdResponse: Codable, Hashable, Sendable {
            /// The id of the newly created object.
            ///
            /// - Remark: Generated from `#/components/schemas/IdResponse/Id`.
            package var Id: Swift.String
            /// Creates a new `IdResponse`.
            ///
            /// - Parameters:
            ///   - Id: The id of the newly created object.
            package init(Id: Swift.String) {
                self.Id = Id
            }
            package enum CodingKeys: String, CodingKey {
                case Id
            }
        }
        /// Configuration for a network endpoint.
        ///
        /// - Remark: Generated from `#/components/schemas/EndpointSettings`.
        package struct EndpointSettings: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/IPAMConfig`.
            package var IPAMConfig: Components.Schemas.EndpointIPAMConfig?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/Links`.
            package var Links: [Swift.String]?
            /// MAC address for the endpoint on this network. The network driver might ignore this parameter.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/MacAddress`.
            package var MacAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/Aliases`.
            package var Aliases: [Swift.String]?
            /// DriverOpts is a mapping of driver options and values. These options
            /// are passed directly to the driver and are driver specific.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/DriverOpts`.
            package struct DriverOptsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `DriverOptsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// DriverOpts is a mapping of driver options and values. These options
            /// are passed directly to the driver and are driver specific.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/DriverOpts`.
            package var DriverOpts: Components.Schemas.EndpointSettings.DriverOptsPayload?
            /// Unique ID of the network.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/NetworkID`.
            package var NetworkID: Swift.String?
            /// Unique ID for the service endpoint in a Sandbox.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/EndpointID`.
            package var EndpointID: Swift.String?
            /// Gateway address for this network.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/Gateway`.
            package var Gateway: Swift.String?
            /// IPv4 address.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/IPAddress`.
            package var IPAddress: Swift.String?
            /// Mask length of the IPv4 address.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/IPPrefixLen`.
            package var IPPrefixLen: Swift.Int?
            /// IPv6 gateway address.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/IPv6Gateway`.
            package var IPv6Gateway: Swift.String?
            /// Global IPv6 address.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/GlobalIPv6Address`.
            package var GlobalIPv6Address: Swift.String?
            /// Mask length of the global IPv6 address.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/GlobalIPv6PrefixLen`.
            package var GlobalIPv6PrefixLen: Swift.Int64?
            /// List of all DNS names an endpoint has on a specific network. This
            /// list is based on the container name, network aliases, container short
            /// ID, and hostname.
            ///
            /// These DNS names are non-fully qualified but can contain several dots.
            /// You can get fully qualified DNS names by appending `.<network-name>`.
            /// For instance, if container name is `my.ctr` and the network is named
            /// `testnet`, `DNSNames` will contain `my.ctr` and the FQDN will be
            /// `my.ctr.testnet`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSettings/DNSNames`.
            package var DNSNames: [Swift.String]?
            /// Creates a new `EndpointSettings`.
            ///
            /// - Parameters:
            ///   - IPAMConfig:
            ///   - Links:
            ///   - MacAddress: MAC address for the endpoint on this network. The network driver might ignore this parameter.
            ///   - Aliases:
            ///   - DriverOpts: DriverOpts is a mapping of driver options and values. These options
            ///   - NetworkID: Unique ID of the network.
            ///   - EndpointID: Unique ID for the service endpoint in a Sandbox.
            ///   - Gateway: Gateway address for this network.
            ///   - IPAddress: IPv4 address.
            ///   - IPPrefixLen: Mask length of the IPv4 address.
            ///   - IPv6Gateway: IPv6 gateway address.
            ///   - GlobalIPv6Address: Global IPv6 address.
            ///   - GlobalIPv6PrefixLen: Mask length of the global IPv6 address.
            ///   - DNSNames: List of all DNS names an endpoint has on a specific network. This
            package init(
                IPAMConfig: Components.Schemas.EndpointIPAMConfig? = nil,
                Links: [Swift.String]? = nil,
                MacAddress: Swift.String? = nil,
                Aliases: [Swift.String]? = nil,
                DriverOpts: Components.Schemas.EndpointSettings.DriverOptsPayload? = nil,
                NetworkID: Swift.String? = nil,
                EndpointID: Swift.String? = nil,
                Gateway: Swift.String? = nil,
                IPAddress: Swift.String? = nil,
                IPPrefixLen: Swift.Int? = nil,
                IPv6Gateway: Swift.String? = nil,
                GlobalIPv6Address: Swift.String? = nil,
                GlobalIPv6PrefixLen: Swift.Int64? = nil,
                DNSNames: [Swift.String]? = nil
            ) {
                self.IPAMConfig = IPAMConfig
                self.Links = Links
                self.MacAddress = MacAddress
                self.Aliases = Aliases
                self.DriverOpts = DriverOpts
                self.NetworkID = NetworkID
                self.EndpointID = EndpointID
                self.Gateway = Gateway
                self.IPAddress = IPAddress
                self.IPPrefixLen = IPPrefixLen
                self.IPv6Gateway = IPv6Gateway
                self.GlobalIPv6Address = GlobalIPv6Address
                self.GlobalIPv6PrefixLen = GlobalIPv6PrefixLen
                self.DNSNames = DNSNames
            }
            package enum CodingKeys: String, CodingKey {
                case IPAMConfig
                case Links
                case MacAddress
                case Aliases
                case DriverOpts
                case NetworkID
                case EndpointID
                case Gateway
                case IPAddress
                case IPPrefixLen
                case IPv6Gateway
                case GlobalIPv6Address
                case GlobalIPv6PrefixLen
                case DNSNames
            }
        }
        /// EndpointIPAMConfig represents an endpoint's IPAM configuration.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EndpointIPAMConfig`.
        package struct EndpointIPAMConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EndpointIPAMConfig/IPv4Address`.
            package var IPv4Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointIPAMConfig/IPv6Address`.
            package var IPv6Address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointIPAMConfig/LinkLocalIPs`.
            package var LinkLocalIPs: [Swift.String]?
            /// Creates a new `EndpointIPAMConfig`.
            ///
            /// - Parameters:
            ///   - IPv4Address:
            ///   - IPv6Address:
            ///   - LinkLocalIPs:
            package init(
                IPv4Address: Swift.String? = nil,
                IPv6Address: Swift.String? = nil,
                LinkLocalIPs: [Swift.String]? = nil
            ) {
                self.IPv4Address = IPv4Address
                self.IPv6Address = IPv6Address
                self.LinkLocalIPs = LinkLocalIPs
            }
            package enum CodingKeys: String, CodingKey {
                case IPv4Address
                case IPv6Address
                case LinkLocalIPs
            }
        }
        /// - Remark: Generated from `#/components/schemas/PluginMount`.
        package struct PluginMount: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PluginMount/Name`.
            package var Name: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginMount/Description`.
            package var Description: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginMount/Settable`.
            package var Settable: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/PluginMount/Source`.
            package var Source: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginMount/Destination`.
            package var Destination: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginMount/Type`.
            package var _Type: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginMount/Options`.
            package var Options: [Swift.String]
            /// Creates a new `PluginMount`.
            ///
            /// - Parameters:
            ///   - Name:
            ///   - Description:
            ///   - Settable:
            ///   - Source:
            ///   - Destination:
            ///   - _Type:
            ///   - Options:
            package init(
                Name: Swift.String,
                Description: Swift.String,
                Settable: [Swift.String],
                Source: Swift.String,
                Destination: Swift.String,
                _Type: Swift.String,
                Options: [Swift.String]
            ) {
                self.Name = Name
                self.Description = Description
                self.Settable = Settable
                self.Source = Source
                self.Destination = Destination
                self._Type = _Type
                self.Options = Options
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Description
                case Settable
                case Source
                case Destination
                case _Type = "Type"
                case Options
            }
        }
        /// - Remark: Generated from `#/components/schemas/PluginDevice`.
        package struct PluginDevice: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PluginDevice/Name`.
            package var Name: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginDevice/Description`.
            package var Description: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginDevice/Settable`.
            package var Settable: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/PluginDevice/Path`.
            package var Path: Swift.String
            /// Creates a new `PluginDevice`.
            ///
            /// - Parameters:
            ///   - Name:
            ///   - Description:
            ///   - Settable:
            ///   - Path:
            package init(
                Name: Swift.String,
                Description: Swift.String,
                Settable: [Swift.String],
                Path: Swift.String
            ) {
                self.Name = Name
                self.Description = Description
                self.Settable = Settable
                self.Path = Path
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Description
                case Settable
                case Path
            }
        }
        /// - Remark: Generated from `#/components/schemas/PluginEnv`.
        package struct PluginEnv: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PluginEnv/Name`.
            package var Name: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginEnv/Description`.
            package var Description: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginEnv/Settable`.
            package var Settable: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/PluginEnv/Value`.
            package var Value: Swift.String
            /// Creates a new `PluginEnv`.
            ///
            /// - Parameters:
            ///   - Name:
            ///   - Description:
            ///   - Settable:
            ///   - Value:
            package init(
                Name: Swift.String,
                Description: Swift.String,
                Settable: [Swift.String],
                Value: Swift.String
            ) {
                self.Name = Name
                self.Description = Description
                self.Settable = Settable
                self.Value = Value
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Description
                case Settable
                case Value
            }
        }
        /// - Remark: Generated from `#/components/schemas/PluginInterfaceType`.
        package struct PluginInterfaceType: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PluginInterfaceType/Prefix`.
            package var Prefix: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginInterfaceType/Capability`.
            package var Capability: Swift.String
            /// - Remark: Generated from `#/components/schemas/PluginInterfaceType/Version`.
            package var Version: Swift.String
            /// Creates a new `PluginInterfaceType`.
            ///
            /// - Parameters:
            ///   - Prefix:
            ///   - Capability:
            ///   - Version:
            package init(
                Prefix: Swift.String,
                Capability: Swift.String,
                Version: Swift.String
            ) {
                self.Prefix = Prefix
                self.Capability = Capability
                self.Version = Version
            }
            package enum CodingKeys: String, CodingKey {
                case Prefix
                case Capability
                case Version
            }
        }
        /// Describes a permission the user has to accept upon installing
        /// the plugin.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/PluginPrivilege`.
        package struct PluginPrivilege: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PluginPrivilege/Name`.
            package var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PluginPrivilege/Description`.
            package var Description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PluginPrivilege/Value`.
            package var Value: [Swift.String]?
            /// Creates a new `PluginPrivilege`.
            ///
            /// - Parameters:
            ///   - Name:
            ///   - Description:
            ///   - Value:
            package init(
                Name: Swift.String? = nil,
                Description: Swift.String? = nil,
                Value: [Swift.String]? = nil
            ) {
                self.Name = Name
                self.Description = Description
                self.Value = Value
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Description
                case Value
            }
        }
        /// A plugin for the Engine API
        ///
        /// - Remark: Generated from `#/components/schemas/Plugin`.
        package struct Plugin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Plugin/Id`.
            package var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Plugin/Name`.
            package var Name: Swift.String
            /// True if the plugin is running. False if the plugin is not running, only installed.
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/Enabled`.
            package var Enabled: Swift.Bool
            /// Settings that can be modified by users.
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/Settings`.
            package struct SettingsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Plugin/Settings/Mounts`.
                package var Mounts: [Components.Schemas.PluginMount]
                /// - Remark: Generated from `#/components/schemas/Plugin/Settings/Env`.
                package var Env: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/Plugin/Settings/Args`.
                package var Args: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/Plugin/Settings/Devices`.
                package var Devices: [Components.Schemas.PluginDevice]
                /// Creates a new `SettingsPayload`.
                ///
                /// - Parameters:
                ///   - Mounts:
                ///   - Env:
                ///   - Args:
                ///   - Devices:
                package init(
                    Mounts: [Components.Schemas.PluginMount],
                    Env: [Swift.String],
                    Args: [Swift.String],
                    Devices: [Components.Schemas.PluginDevice]
                ) {
                    self.Mounts = Mounts
                    self.Env = Env
                    self.Args = Args
                    self.Devices = Devices
                }
                package enum CodingKeys: String, CodingKey {
                    case Mounts
                    case Env
                    case Args
                    case Devices
                }
            }
            /// Settings that can be modified by users.
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/Settings`.
            package var Settings: Components.Schemas.Plugin.SettingsPayload
            /// plugin remote reference used to push/pull the plugin
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/PluginReference`.
            package var PluginReference: Swift.String?
            /// The config of a plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/Config`.
            package struct ConfigPayload: Codable, Hashable, Sendable {
                /// Docker Version used to create the plugin
                ///
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/DockerVersion`.
                package var DockerVersion: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Description`.
                package var Description: Swift.String
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Documentation`.
                package var Documentation: Swift.String
                /// The interface between Docker and the plugin
                ///
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Interface`.
                package struct InterfacePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Interface/Types`.
                    package var Types: [Components.Schemas.PluginInterfaceType]
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Interface/Socket`.
                    package var Socket: Swift.String
                    /// Protocol to use for clients connecting to the plugin.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Interface/ProtocolScheme`.
                    @frozen package enum ProtocolSchemePayload: String, Codable, Hashable, Sendable {
                        case _empty = ""
                        case moby_period_plugins_period_http_sol_v1 = "moby.plugins.http/v1"
                    }
                    /// Protocol to use for clients connecting to the plugin.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Interface/ProtocolScheme`.
                    package var ProtocolScheme: Components.Schemas.Plugin.ConfigPayload.InterfacePayload.ProtocolSchemePayload?
                    /// Creates a new `InterfacePayload`.
                    ///
                    /// - Parameters:
                    ///   - Types:
                    ///   - Socket:
                    ///   - ProtocolScheme: Protocol to use for clients connecting to the plugin.
                    package init(
                        Types: [Components.Schemas.PluginInterfaceType],
                        Socket: Swift.String,
                        ProtocolScheme: Components.Schemas.Plugin.ConfigPayload.InterfacePayload.ProtocolSchemePayload? = nil
                    ) {
                        self.Types = Types
                        self.Socket = Socket
                        self.ProtocolScheme = ProtocolScheme
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Types
                        case Socket
                        case ProtocolScheme
                    }
                }
                /// The interface between Docker and the plugin
                ///
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Interface`.
                package var Interface: Components.Schemas.Plugin.ConfigPayload.InterfacePayload
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Entrypoint`.
                package var Entrypoint: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/WorkDir`.
                package var WorkDir: Swift.String
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/User`.
                package struct UserPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/User/UID`.
                    package var UID: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/User/GID`.
                    package var GID: Swift.Int?
                    /// Creates a new `UserPayload`.
                    ///
                    /// - Parameters:
                    ///   - UID:
                    ///   - GID:
                    package init(
                        UID: Swift.Int? = nil,
                        GID: Swift.Int? = nil
                    ) {
                        self.UID = UID
                        self.GID = GID
                    }
                    package enum CodingKeys: String, CodingKey {
                        case UID
                        case GID
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/User`.
                package var User: Components.Schemas.Plugin.ConfigPayload.UserPayload?
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Network`.
                package struct NetworkPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Network/Type`.
                    package var _Type: Swift.String
                    /// Creates a new `NetworkPayload`.
                    ///
                    /// - Parameters:
                    ///   - _Type:
                    package init(_Type: Swift.String) {
                        self._Type = _Type
                    }
                    package enum CodingKeys: String, CodingKey {
                        case _Type = "Type"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Network`.
                package var Network: Components.Schemas.Plugin.ConfigPayload.NetworkPayload
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Linux`.
                package struct LinuxPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Linux/Capabilities`.
                    package var Capabilities: [Swift.String]
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Linux/AllowAllDevices`.
                    package var AllowAllDevices: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Linux/Devices`.
                    package var Devices: [Components.Schemas.PluginDevice]
                    /// Creates a new `LinuxPayload`.
                    ///
                    /// - Parameters:
                    ///   - Capabilities:
                    ///   - AllowAllDevices:
                    ///   - Devices:
                    package init(
                        Capabilities: [Swift.String],
                        AllowAllDevices: Swift.Bool,
                        Devices: [Components.Schemas.PluginDevice]
                    ) {
                        self.Capabilities = Capabilities
                        self.AllowAllDevices = AllowAllDevices
                        self.Devices = Devices
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Capabilities
                        case AllowAllDevices
                        case Devices
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Linux`.
                package var Linux: Components.Schemas.Plugin.ConfigPayload.LinuxPayload
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/PropagatedMount`.
                package var PropagatedMount: Swift.String
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/IpcHost`.
                package var IpcHost: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/PidHost`.
                package var PidHost: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Mounts`.
                package var Mounts: [Components.Schemas.PluginMount]
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Env`.
                package var Env: [Components.Schemas.PluginEnv]
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Args`.
                package struct ArgsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Args/Name`.
                    package var Name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Args/Description`.
                    package var Description: Swift.String
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Args/Settable`.
                    package var Settable: [Swift.String]
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/Args/Value`.
                    package var Value: [Swift.String]
                    /// Creates a new `ArgsPayload`.
                    ///
                    /// - Parameters:
                    ///   - Name:
                    ///   - Description:
                    ///   - Settable:
                    ///   - Value:
                    package init(
                        Name: Swift.String,
                        Description: Swift.String,
                        Settable: [Swift.String],
                        Value: [Swift.String]
                    ) {
                        self.Name = Name
                        self.Description = Description
                        self.Settable = Settable
                        self.Value = Value
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Name
                        case Description
                        case Settable
                        case Value
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/Args`.
                package var Args: Components.Schemas.Plugin.ConfigPayload.ArgsPayload
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/rootfs`.
                package struct rootfsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/rootfs/type`.
                    package var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/Plugin/Config/rootfs/diff_ids`.
                    package var diff_ids: [Swift.String]?
                    /// Creates a new `rootfsPayload`.
                    ///
                    /// - Parameters:
                    ///   - _type:
                    ///   - diff_ids:
                    package init(
                        _type: Swift.String? = nil,
                        diff_ids: [Swift.String]? = nil
                    ) {
                        self._type = _type
                        self.diff_ids = diff_ids
                    }
                    package enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case diff_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Plugin/Config/rootfs`.
                package var rootfs: Components.Schemas.Plugin.ConfigPayload.rootfsPayload?
                /// Creates a new `ConfigPayload`.
                ///
                /// - Parameters:
                ///   - DockerVersion: Docker Version used to create the plugin
                ///   - Description:
                ///   - Documentation:
                ///   - Interface: The interface between Docker and the plugin
                ///   - Entrypoint:
                ///   - WorkDir:
                ///   - User:
                ///   - Network:
                ///   - Linux:
                ///   - PropagatedMount:
                ///   - IpcHost:
                ///   - PidHost:
                ///   - Mounts:
                ///   - Env:
                ///   - Args:
                ///   - rootfs:
                package init(
                    DockerVersion: Swift.String? = nil,
                    Description: Swift.String,
                    Documentation: Swift.String,
                    Interface: Components.Schemas.Plugin.ConfigPayload.InterfacePayload,
                    Entrypoint: [Swift.String],
                    WorkDir: Swift.String,
                    User: Components.Schemas.Plugin.ConfigPayload.UserPayload? = nil,
                    Network: Components.Schemas.Plugin.ConfigPayload.NetworkPayload,
                    Linux: Components.Schemas.Plugin.ConfigPayload.LinuxPayload,
                    PropagatedMount: Swift.String,
                    IpcHost: Swift.Bool,
                    PidHost: Swift.Bool,
                    Mounts: [Components.Schemas.PluginMount],
                    Env: [Components.Schemas.PluginEnv],
                    Args: Components.Schemas.Plugin.ConfigPayload.ArgsPayload,
                    rootfs: Components.Schemas.Plugin.ConfigPayload.rootfsPayload? = nil
                ) {
                    self.DockerVersion = DockerVersion
                    self.Description = Description
                    self.Documentation = Documentation
                    self.Interface = Interface
                    self.Entrypoint = Entrypoint
                    self.WorkDir = WorkDir
                    self.User = User
                    self.Network = Network
                    self.Linux = Linux
                    self.PropagatedMount = PropagatedMount
                    self.IpcHost = IpcHost
                    self.PidHost = PidHost
                    self.Mounts = Mounts
                    self.Env = Env
                    self.Args = Args
                    self.rootfs = rootfs
                }
                package enum CodingKeys: String, CodingKey {
                    case DockerVersion
                    case Description
                    case Documentation
                    case Interface
                    case Entrypoint
                    case WorkDir
                    case User
                    case Network
                    case Linux
                    case PropagatedMount
                    case IpcHost
                    case PidHost
                    case Mounts
                    case Env
                    case Args
                    case rootfs
                }
            }
            /// The config of a plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/Plugin/Config`.
            package var Config: Components.Schemas.Plugin.ConfigPayload
            /// Creates a new `Plugin`.
            ///
            /// - Parameters:
            ///   - Id:
            ///   - Name:
            ///   - Enabled: True if the plugin is running. False if the plugin is not running, only installed.
            ///   - Settings: Settings that can be modified by users.
            ///   - PluginReference: plugin remote reference used to push/pull the plugin
            ///   - Config: The config of a plugin.
            package init(
                Id: Swift.String? = nil,
                Name: Swift.String,
                Enabled: Swift.Bool,
                Settings: Components.Schemas.Plugin.SettingsPayload,
                PluginReference: Swift.String? = nil,
                Config: Components.Schemas.Plugin.ConfigPayload
            ) {
                self.Id = Id
                self.Name = Name
                self.Enabled = Enabled
                self.Settings = Settings
                self.PluginReference = PluginReference
                self.Config = Config
            }
            package enum CodingKeys: String, CodingKey {
                case Id
                case Name
                case Enabled
                case Settings
                case PluginReference
                case Config
            }
        }
        /// The version number of the object such as node, service, etc. This is needed
        /// to avoid conflicting writes. The client must send the version number along
        /// with the modified specification when updating these objects.
        ///
        /// This approach ensures safe concurrency and determinism in that the change
        /// on the object may not be applied if the version number has changed from the
        /// last read. In other words, if two update requests specify the same base
        /// version, only one of the requests can succeed. As a result, two separate
        /// update requests that happen at the same time will not unintentionally
        /// overwrite each other.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ObjectVersion`.
        package struct ObjectVersion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ObjectVersion/Index`.
            package var Index: Swift.Int?
            /// Creates a new `ObjectVersion`.
            ///
            /// - Parameters:
            ///   - Index:
            package init(Index: Swift.Int? = nil) {
                self.Index = Index
            }
            package enum CodingKeys: String, CodingKey {
                case Index
            }
        }
        /// - Remark: Generated from `#/components/schemas/NodeSpec`.
        package struct NodeSpec: Codable, Hashable, Sendable {
            /// Name for the node.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeSpec/Name`.
            package var Name: Swift.String?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeSpec/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeSpec/Labels`.
            package var Labels: Components.Schemas.NodeSpec.LabelsPayload?
            /// Role of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeSpec/Role`.
            @frozen package enum RolePayload: String, Codable, Hashable, Sendable {
                case worker = "worker"
                case manager = "manager"
            }
            /// Role of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeSpec/Role`.
            package var Role: Components.Schemas.NodeSpec.RolePayload?
            /// Availability of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeSpec/Availability`.
            @frozen package enum AvailabilityPayload: String, Codable, Hashable, Sendable {
                case active = "active"
                case pause = "pause"
                case drain = "drain"
            }
            /// Availability of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeSpec/Availability`.
            package var Availability: Components.Schemas.NodeSpec.AvailabilityPayload?
            /// Creates a new `NodeSpec`.
            ///
            /// - Parameters:
            ///   - Name: Name for the node.
            ///   - Labels: User-defined key/value metadata.
            ///   - Role: Role of the node.
            ///   - Availability: Availability of the node.
            package init(
                Name: Swift.String? = nil,
                Labels: Components.Schemas.NodeSpec.LabelsPayload? = nil,
                Role: Components.Schemas.NodeSpec.RolePayload? = nil,
                Availability: Components.Schemas.NodeSpec.AvailabilityPayload? = nil
            ) {
                self.Name = Name
                self.Labels = Labels
                self.Role = Role
                self.Availability = Availability
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Labels
                case Role
                case Availability
            }
        }
        /// - Remark: Generated from `#/components/schemas/Node`.
        package struct Node: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Node/ID`.
            package var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Node/Version`.
            package var Version: Components.Schemas.ObjectVersion?
            /// Date and time at which the node was added to the swarm in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Node/CreatedAt`.
            package var CreatedAt: Swift.String?
            /// Date and time at which the node was last updated in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Node/UpdatedAt`.
            package var UpdatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Node/Spec`.
            package var Spec: Components.Schemas.NodeSpec?
            /// - Remark: Generated from `#/components/schemas/Node/Description`.
            package var Description: Components.Schemas.NodeDescription?
            /// - Remark: Generated from `#/components/schemas/Node/Status`.
            package var Status: Components.Schemas.NodeStatus?
            /// - Remark: Generated from `#/components/schemas/Node/ManagerStatus`.
            package var ManagerStatus: Components.Schemas.ManagerStatus?
            /// Creates a new `Node`.
            ///
            /// - Parameters:
            ///   - ID:
            ///   - Version:
            ///   - CreatedAt: Date and time at which the node was added to the swarm in
            ///   - UpdatedAt: Date and time at which the node was last updated in
            ///   - Spec:
            ///   - Description:
            ///   - Status:
            ///   - ManagerStatus:
            package init(
                ID: Swift.String? = nil,
                Version: Components.Schemas.ObjectVersion? = nil,
                CreatedAt: Swift.String? = nil,
                UpdatedAt: Swift.String? = nil,
                Spec: Components.Schemas.NodeSpec? = nil,
                Description: Components.Schemas.NodeDescription? = nil,
                Status: Components.Schemas.NodeStatus? = nil,
                ManagerStatus: Components.Schemas.ManagerStatus? = nil
            ) {
                self.ID = ID
                self.Version = Version
                self.CreatedAt = CreatedAt
                self.UpdatedAt = UpdatedAt
                self.Spec = Spec
                self.Description = Description
                self.Status = Status
                self.ManagerStatus = ManagerStatus
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Version
                case CreatedAt
                case UpdatedAt
                case Spec
                case Description
                case Status
                case ManagerStatus
            }
        }
        /// NodeDescription encapsulates the properties of the Node as reported by the
        /// agent.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/NodeDescription`.
        package struct NodeDescription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NodeDescription/Hostname`.
            package var Hostname: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NodeDescription/Platform`.
            package var Platform: Components.Schemas.Platform?
            /// - Remark: Generated from `#/components/schemas/NodeDescription/Resources`.
            package var Resources: Components.Schemas.ResourceObject?
            /// - Remark: Generated from `#/components/schemas/NodeDescription/Engine`.
            package var Engine: Components.Schemas.EngineDescription?
            /// - Remark: Generated from `#/components/schemas/NodeDescription/TLSInfo`.
            package var TLSInfo: Components.Schemas.TLSInfo?
            /// Creates a new `NodeDescription`.
            ///
            /// - Parameters:
            ///   - Hostname:
            ///   - Platform:
            ///   - Resources:
            ///   - Engine:
            ///   - TLSInfo:
            package init(
                Hostname: Swift.String? = nil,
                Platform: Components.Schemas.Platform? = nil,
                Resources: Components.Schemas.ResourceObject? = nil,
                Engine: Components.Schemas.EngineDescription? = nil,
                TLSInfo: Components.Schemas.TLSInfo? = nil
            ) {
                self.Hostname = Hostname
                self.Platform = Platform
                self.Resources = Resources
                self.Engine = Engine
                self.TLSInfo = TLSInfo
            }
            package enum CodingKeys: String, CodingKey {
                case Hostname
                case Platform
                case Resources
                case Engine
                case TLSInfo
            }
        }
        /// Platform represents the platform (Arch/OS).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Platform`.
        package struct Platform: Codable, Hashable, Sendable {
            /// Architecture represents the hardware architecture (for example,
            /// `x86_64`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Platform/Architecture`.
            package var Architecture: Swift.String?
            /// OS represents the Operating System (for example, `linux` or `windows`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Platform/OS`.
            package var OS: Swift.String?
            /// Creates a new `Platform`.
            ///
            /// - Parameters:
            ///   - Architecture: Architecture represents the hardware architecture (for example,
            ///   - OS: OS represents the Operating System (for example, `linux` or `windows`).
            package init(
                Architecture: Swift.String? = nil,
                OS: Swift.String? = nil
            ) {
                self.Architecture = Architecture
                self.OS = OS
            }
            package enum CodingKeys: String, CodingKey {
                case Architecture
                case OS
            }
        }
        /// EngineDescription provides information about an engine.
        ///
        /// - Remark: Generated from `#/components/schemas/EngineDescription`.
        package struct EngineDescription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EngineDescription/EngineVersion`.
            package var EngineVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EngineDescription/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/EngineDescription/Labels`.
            package var Labels: Components.Schemas.EngineDescription.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/EngineDescription/PluginsPayload`.
            package struct PluginsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/EngineDescription/PluginsPayload/Type`.
                package var _Type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/EngineDescription/PluginsPayload/Name`.
                package var Name: Swift.String?
                /// Creates a new `PluginsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _Type:
                ///   - Name:
                package init(
                    _Type: Swift.String? = nil,
                    Name: Swift.String? = nil
                ) {
                    self._Type = _Type
                    self.Name = Name
                }
                package enum CodingKeys: String, CodingKey {
                    case _Type = "Type"
                    case Name
                }
            }
            /// - Remark: Generated from `#/components/schemas/EngineDescription/Plugins`.
            package typealias PluginsPayload = [Components.Schemas.EngineDescription.PluginsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/EngineDescription/Plugins`.
            package var Plugins: Components.Schemas.EngineDescription.PluginsPayload?
            /// Creates a new `EngineDescription`.
            ///
            /// - Parameters:
            ///   - EngineVersion:
            ///   - Labels:
            ///   - Plugins:
            package init(
                EngineVersion: Swift.String? = nil,
                Labels: Components.Schemas.EngineDescription.LabelsPayload? = nil,
                Plugins: Components.Schemas.EngineDescription.PluginsPayload? = nil
            ) {
                self.EngineVersion = EngineVersion
                self.Labels = Labels
                self.Plugins = Plugins
            }
            package enum CodingKeys: String, CodingKey {
                case EngineVersion
                case Labels
                case Plugins
            }
        }
        /// Information about the issuer of leaf TLS certificates and the trusted root
        /// CA certificate.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/TLSInfo`.
        package struct TLSInfo: Codable, Hashable, Sendable {
            /// The root CA certificate(s) that are used to validate leaf TLS
            /// certificates.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TLSInfo/TrustRoot`.
            package var TrustRoot: Swift.String?
            /// The base64-url-safe-encoded raw subject bytes of the issuer.
            ///
            /// - Remark: Generated from `#/components/schemas/TLSInfo/CertIssuerSubject`.
            package var CertIssuerSubject: Swift.String?
            /// The base64-url-safe-encoded raw public key bytes of the issuer.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TLSInfo/CertIssuerPublicKey`.
            package var CertIssuerPublicKey: Swift.String?
            /// Creates a new `TLSInfo`.
            ///
            /// - Parameters:
            ///   - TrustRoot: The root CA certificate(s) that are used to validate leaf TLS
            ///   - CertIssuerSubject: The base64-url-safe-encoded raw subject bytes of the issuer.
            ///   - CertIssuerPublicKey: The base64-url-safe-encoded raw public key bytes of the issuer.
            package init(
                TrustRoot: Swift.String? = nil,
                CertIssuerSubject: Swift.String? = nil,
                CertIssuerPublicKey: Swift.String? = nil
            ) {
                self.TrustRoot = TrustRoot
                self.CertIssuerSubject = CertIssuerSubject
                self.CertIssuerPublicKey = CertIssuerPublicKey
            }
            package enum CodingKeys: String, CodingKey {
                case TrustRoot
                case CertIssuerSubject
                case CertIssuerPublicKey
            }
        }
        /// NodeStatus represents the status of a node.
        ///
        /// It provides the current status of the node, as seen by the manager.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/NodeStatus`.
        package struct NodeStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NodeStatus/State`.
            package var State: Components.Schemas.NodeState?
            /// - Remark: Generated from `#/components/schemas/NodeStatus/Message`.
            package var Message: Swift.String?
            /// IP address of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeStatus/Addr`.
            package var Addr: Swift.String?
            /// Creates a new `NodeStatus`.
            ///
            /// - Parameters:
            ///   - State:
            ///   - Message:
            ///   - Addr: IP address of the node.
            package init(
                State: Components.Schemas.NodeState? = nil,
                Message: Swift.String? = nil,
                Addr: Swift.String? = nil
            ) {
                self.State = State
                self.Message = Message
                self.Addr = Addr
            }
            package enum CodingKeys: String, CodingKey {
                case State
                case Message
                case Addr
            }
        }
        /// NodeState represents the state of a node.
        ///
        /// - Remark: Generated from `#/components/schemas/NodeState`.
        @frozen package enum NodeState: String, Codable, Hashable, Sendable {
            case unknown = "unknown"
            case down = "down"
            case ready = "ready"
            case disconnected = "disconnected"
        }
        /// ManagerStatus represents the status of a manager.
        ///
        /// It provides the current status of a node's manager component, if the node
        /// is a manager.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ManagerStatus`.
        package struct ManagerStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ManagerStatus/Leader`.
            package var Leader: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ManagerStatus/Reachability`.
            package var Reachability: Components.Schemas.Reachability?
            /// The IP address and port at which the manager is reachable.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ManagerStatus/Addr`.
            package var Addr: Swift.String?
            /// Creates a new `ManagerStatus`.
            ///
            /// - Parameters:
            ///   - Leader:
            ///   - Reachability:
            ///   - Addr: The IP address and port at which the manager is reachable.
            package init(
                Leader: Swift.Bool? = nil,
                Reachability: Components.Schemas.Reachability? = nil,
                Addr: Swift.String? = nil
            ) {
                self.Leader = Leader
                self.Reachability = Reachability
                self.Addr = Addr
            }
            package enum CodingKeys: String, CodingKey {
                case Leader
                case Reachability
                case Addr
            }
        }
        /// Reachability represents the reachability of a node.
        ///
        /// - Remark: Generated from `#/components/schemas/Reachability`.
        @frozen package enum Reachability: String, Codable, Hashable, Sendable {
            case unknown = "unknown"
            case unreachable = "unreachable"
            case reachable = "reachable"
        }
        /// User modifiable swarm configuration.
        ///
        /// - Remark: Generated from `#/components/schemas/SwarmSpec`.
        package struct SwarmSpec: Codable, Hashable, Sendable {
            /// Name of the swarm.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/Name`.
            package var Name: Swift.String?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/Labels`.
            package var Labels: Components.Schemas.SwarmSpec.LabelsPayload?
            /// Orchestration configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/Orchestration`.
            package struct OrchestrationPayload: Codable, Hashable, Sendable {
                /// The number of historic tasks to keep per instance or node. If
                /// negative, never remove completed or failed tasks.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/Orchestration/TaskHistoryRetentionLimit`.
                package var TaskHistoryRetentionLimit: Swift.Int64?
                /// Creates a new `OrchestrationPayload`.
                ///
                /// - Parameters:
                ///   - TaskHistoryRetentionLimit: The number of historic tasks to keep per instance or node. If
                package init(TaskHistoryRetentionLimit: Swift.Int64? = nil) {
                    self.TaskHistoryRetentionLimit = TaskHistoryRetentionLimit
                }
                package enum CodingKeys: String, CodingKey {
                    case TaskHistoryRetentionLimit
                }
            }
            /// Orchestration configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/Orchestration`.
            package var Orchestration: Components.Schemas.SwarmSpec.OrchestrationPayload?
            /// Raft configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/Raft`.
            package struct RaftPayload: Codable, Hashable, Sendable {
                /// The number of log entries between snapshots.
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/Raft/SnapshotInterval`.
                package var SnapshotInterval: Swift.Int?
                /// The number of snapshots to keep beyond the current snapshot.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/Raft/KeepOldSnapshots`.
                package var KeepOldSnapshots: Swift.Int?
                /// The number of log entries to keep around to sync up slow followers
                /// after a snapshot is created.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/Raft/LogEntriesForSlowFollowers`.
                package var LogEntriesForSlowFollowers: Swift.Int?
                /// The number of ticks that a follower will wait for a message from
                /// the leader before becoming a candidate and starting an election.
                /// `ElectionTick` must be greater than `HeartbeatTick`.
                ///
                /// A tick currently defaults to one second, so these translate
                /// directly to seconds currently, but this is NOT guaranteed.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/Raft/ElectionTick`.
                package var ElectionTick: Swift.Int?
                /// The number of ticks between heartbeats. Every HeartbeatTick ticks,
                /// the leader will send a heartbeat to the followers.
                ///
                /// A tick currently defaults to one second, so these translate
                /// directly to seconds currently, but this is NOT guaranteed.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/Raft/HeartbeatTick`.
                package var HeartbeatTick: Swift.Int?
                /// Creates a new `RaftPayload`.
                ///
                /// - Parameters:
                ///   - SnapshotInterval: The number of log entries between snapshots.
                ///   - KeepOldSnapshots: The number of snapshots to keep beyond the current snapshot.
                ///   - LogEntriesForSlowFollowers: The number of log entries to keep around to sync up slow followers
                ///   - ElectionTick: The number of ticks that a follower will wait for a message from
                ///   - HeartbeatTick: The number of ticks between heartbeats. Every HeartbeatTick ticks,
                package init(
                    SnapshotInterval: Swift.Int? = nil,
                    KeepOldSnapshots: Swift.Int? = nil,
                    LogEntriesForSlowFollowers: Swift.Int? = nil,
                    ElectionTick: Swift.Int? = nil,
                    HeartbeatTick: Swift.Int? = nil
                ) {
                    self.SnapshotInterval = SnapshotInterval
                    self.KeepOldSnapshots = KeepOldSnapshots
                    self.LogEntriesForSlowFollowers = LogEntriesForSlowFollowers
                    self.ElectionTick = ElectionTick
                    self.HeartbeatTick = HeartbeatTick
                }
                package enum CodingKeys: String, CodingKey {
                    case SnapshotInterval
                    case KeepOldSnapshots
                    case LogEntriesForSlowFollowers
                    case ElectionTick
                    case HeartbeatTick
                }
            }
            /// Raft configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/Raft`.
            package var Raft: Components.Schemas.SwarmSpec.RaftPayload?
            /// Dispatcher configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/Dispatcher`.
            package struct DispatcherPayload: Codable, Hashable, Sendable {
                /// The delay for an agent to send a heartbeat to the dispatcher.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/Dispatcher/HeartbeatPeriod`.
                package var HeartbeatPeriod: Swift.Int64?
                /// Creates a new `DispatcherPayload`.
                ///
                /// - Parameters:
                ///   - HeartbeatPeriod: The delay for an agent to send a heartbeat to the dispatcher.
                package init(HeartbeatPeriod: Swift.Int64? = nil) {
                    self.HeartbeatPeriod = HeartbeatPeriod
                }
                package enum CodingKeys: String, CodingKey {
                    case HeartbeatPeriod
                }
            }
            /// Dispatcher configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/Dispatcher`.
            package var Dispatcher: Components.Schemas.SwarmSpec.DispatcherPayload?
            /// CA configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig`.
            package struct CAConfigPayload: Codable, Hashable, Sendable {
                /// The duration node certificates are issued for.
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/NodeCertExpiry`.
                package var NodeCertExpiry: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ExternalCAsPayload`.
                package struct ExternalCAsPayloadPayload: Codable, Hashable, Sendable {
                    /// Protocol for communication with the external CA (currently
                    /// only `cfssl` is supported).
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ExternalCAsPayload/Protocol`.
                    @frozen package enum _ProtocolPayload: String, Codable, Hashable, Sendable {
                        case cfssl = "cfssl"
                    }
                    /// Protocol for communication with the external CA (currently
                    /// only `cfssl` is supported).
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ExternalCAsPayload/Protocol`.
                    package var _Protocol: Components.Schemas.SwarmSpec.CAConfigPayload.ExternalCAsPayloadPayload._ProtocolPayload?
                    /// URL where certificate signing requests should be sent.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ExternalCAsPayload/URL`.
                    package var URL: Swift.String?
                    /// An object with key/value pairs that are interpreted as
                    /// protocol-specific options for the external CA driver.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ExternalCAsPayload/Options`.
                    package struct OptionsPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        package var additionalProperties: [String: Swift.String]
                        /// Creates a new `OptionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        package init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        package init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        package func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// An object with key/value pairs that are interpreted as
                    /// protocol-specific options for the external CA driver.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ExternalCAsPayload/Options`.
                    package var Options: Components.Schemas.SwarmSpec.CAConfigPayload.ExternalCAsPayloadPayload.OptionsPayload?
                    /// The root CA certificate (in PEM format) this external CA uses
                    /// to issue TLS certificates (assumed to be to the current swarm
                    /// root CA certificate if not provided).
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ExternalCAsPayload/CACert`.
                    package var CACert: Swift.String?
                    /// Creates a new `ExternalCAsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - _Protocol: Protocol for communication with the external CA (currently
                    ///   - URL: URL where certificate signing requests should be sent.
                    ///   - Options: An object with key/value pairs that are interpreted as
                    ///   - CACert: The root CA certificate (in PEM format) this external CA uses
                    package init(
                        _Protocol: Components.Schemas.SwarmSpec.CAConfigPayload.ExternalCAsPayloadPayload._ProtocolPayload? = nil,
                        URL: Swift.String? = nil,
                        Options: Components.Schemas.SwarmSpec.CAConfigPayload.ExternalCAsPayloadPayload.OptionsPayload? = nil,
                        CACert: Swift.String? = nil
                    ) {
                        self._Protocol = _Protocol
                        self.URL = URL
                        self.Options = Options
                        self.CACert = CACert
                    }
                    package enum CodingKeys: String, CodingKey {
                        case _Protocol = "Protocol"
                        case URL
                        case Options
                        case CACert
                    }
                }
                /// Configuration for forwarding signing requests to an external
                /// certificate authority.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ExternalCAs`.
                package typealias ExternalCAsPayload = [Components.Schemas.SwarmSpec.CAConfigPayload.ExternalCAsPayloadPayload]
                /// Configuration for forwarding signing requests to an external
                /// certificate authority.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ExternalCAs`.
                package var ExternalCAs: Components.Schemas.SwarmSpec.CAConfigPayload.ExternalCAsPayload?
                /// The desired signing CA certificate for all swarm node TLS leaf
                /// certificates, in PEM format.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/SigningCACert`.
                package var SigningCACert: Swift.String?
                /// The desired signing CA key for all swarm node TLS leaf certificates,
                /// in PEM format.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/SigningCAKey`.
                package var SigningCAKey: Swift.String?
                /// An integer whose purpose is to force swarm to generate a new
                /// signing CA certificate and key, if none have been specified in
                /// `SigningCACert` and `SigningCAKey`
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig/ForceRotate`.
                package var ForceRotate: Swift.Int?
                /// Creates a new `CAConfigPayload`.
                ///
                /// - Parameters:
                ///   - NodeCertExpiry: The duration node certificates are issued for.
                ///   - ExternalCAs: Configuration for forwarding signing requests to an external
                ///   - SigningCACert: The desired signing CA certificate for all swarm node TLS leaf
                ///   - SigningCAKey: The desired signing CA key for all swarm node TLS leaf certificates,
                ///   - ForceRotate: An integer whose purpose is to force swarm to generate a new
                package init(
                    NodeCertExpiry: Swift.Int64? = nil,
                    ExternalCAs: Components.Schemas.SwarmSpec.CAConfigPayload.ExternalCAsPayload? = nil,
                    SigningCACert: Swift.String? = nil,
                    SigningCAKey: Swift.String? = nil,
                    ForceRotate: Swift.Int? = nil
                ) {
                    self.NodeCertExpiry = NodeCertExpiry
                    self.ExternalCAs = ExternalCAs
                    self.SigningCACert = SigningCACert
                    self.SigningCAKey = SigningCAKey
                    self.ForceRotate = ForceRotate
                }
                package enum CodingKeys: String, CodingKey {
                    case NodeCertExpiry
                    case ExternalCAs
                    case SigningCACert
                    case SigningCAKey
                    case ForceRotate
                }
            }
            /// CA configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/CAConfig`.
            package var CAConfig: Components.Schemas.SwarmSpec.CAConfigPayload?
            /// Parameters related to encryption-at-rest.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/EncryptionConfig`.
            package struct EncryptionConfigPayload: Codable, Hashable, Sendable {
                /// If set, generate a key and use it to lock data stored on the
                /// managers.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/EncryptionConfig/AutoLockManagers`.
                package var AutoLockManagers: Swift.Bool?
                /// Creates a new `EncryptionConfigPayload`.
                ///
                /// - Parameters:
                ///   - AutoLockManagers: If set, generate a key and use it to lock data stored on the
                package init(AutoLockManagers: Swift.Bool? = nil) {
                    self.AutoLockManagers = AutoLockManagers
                }
                package enum CodingKeys: String, CodingKey {
                    case AutoLockManagers
                }
            }
            /// Parameters related to encryption-at-rest.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/EncryptionConfig`.
            package var EncryptionConfig: Components.Schemas.SwarmSpec.EncryptionConfigPayload?
            /// Defaults for creating tasks in this cluster.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/TaskDefaults`.
            package struct TaskDefaultsPayload: Codable, Hashable, Sendable {
                /// The log driver to use for tasks created in the orchestrator if
                /// unspecified by a service.
                ///
                /// Updating this value only affects new tasks. Existing tasks continue
                /// to use their previously configured log driver until recreated.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/TaskDefaults/LogDriver`.
                package struct LogDriverPayload: Codable, Hashable, Sendable {
                    /// The log driver to use as a default for new tasks.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/SwarmSpec/TaskDefaults/LogDriver/Name`.
                    package var Name: Swift.String?
                    /// Driver-specific options for the selectd log driver, specified
                    /// as key/value pairs.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/SwarmSpec/TaskDefaults/LogDriver/Options`.
                    package struct OptionsPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        package var additionalProperties: [String: Swift.String]
                        /// Creates a new `OptionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        package init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        package init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        package func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// Driver-specific options for the selectd log driver, specified
                    /// as key/value pairs.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/SwarmSpec/TaskDefaults/LogDriver/Options`.
                    package var Options: Components.Schemas.SwarmSpec.TaskDefaultsPayload.LogDriverPayload.OptionsPayload?
                    /// Creates a new `LogDriverPayload`.
                    ///
                    /// - Parameters:
                    ///   - Name: The log driver to use as a default for new tasks.
                    ///   - Options: Driver-specific options for the selectd log driver, specified
                    package init(
                        Name: Swift.String? = nil,
                        Options: Components.Schemas.SwarmSpec.TaskDefaultsPayload.LogDriverPayload.OptionsPayload? = nil
                    ) {
                        self.Name = Name
                        self.Options = Options
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Name
                        case Options
                    }
                }
                /// The log driver to use for tasks created in the orchestrator if
                /// unspecified by a service.
                ///
                /// Updating this value only affects new tasks. Existing tasks continue
                /// to use their previously configured log driver until recreated.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SwarmSpec/TaskDefaults/LogDriver`.
                package var LogDriver: Components.Schemas.SwarmSpec.TaskDefaultsPayload.LogDriverPayload?
                /// Creates a new `TaskDefaultsPayload`.
                ///
                /// - Parameters:
                ///   - LogDriver: The log driver to use for tasks created in the orchestrator if
                package init(LogDriver: Components.Schemas.SwarmSpec.TaskDefaultsPayload.LogDriverPayload? = nil) {
                    self.LogDriver = LogDriver
                }
                package enum CodingKeys: String, CodingKey {
                    case LogDriver
                }
            }
            /// Defaults for creating tasks in this cluster.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmSpec/TaskDefaults`.
            package var TaskDefaults: Components.Schemas.SwarmSpec.TaskDefaultsPayload?
            /// Creates a new `SwarmSpec`.
            ///
            /// - Parameters:
            ///   - Name: Name of the swarm.
            ///   - Labels: User-defined key/value metadata.
            ///   - Orchestration: Orchestration configuration.
            ///   - Raft: Raft configuration.
            ///   - Dispatcher: Dispatcher configuration.
            ///   - CAConfig: CA configuration.
            ///   - EncryptionConfig: Parameters related to encryption-at-rest.
            ///   - TaskDefaults: Defaults for creating tasks in this cluster.
            package init(
                Name: Swift.String? = nil,
                Labels: Components.Schemas.SwarmSpec.LabelsPayload? = nil,
                Orchestration: Components.Schemas.SwarmSpec.OrchestrationPayload? = nil,
                Raft: Components.Schemas.SwarmSpec.RaftPayload? = nil,
                Dispatcher: Components.Schemas.SwarmSpec.DispatcherPayload? = nil,
                CAConfig: Components.Schemas.SwarmSpec.CAConfigPayload? = nil,
                EncryptionConfig: Components.Schemas.SwarmSpec.EncryptionConfigPayload? = nil,
                TaskDefaults: Components.Schemas.SwarmSpec.TaskDefaultsPayload? = nil
            ) {
                self.Name = Name
                self.Labels = Labels
                self.Orchestration = Orchestration
                self.Raft = Raft
                self.Dispatcher = Dispatcher
                self.CAConfig = CAConfig
                self.EncryptionConfig = EncryptionConfig
                self.TaskDefaults = TaskDefaults
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Labels
                case Orchestration
                case Raft
                case Dispatcher
                case CAConfig
                case EncryptionConfig
                case TaskDefaults
            }
        }
        /// ClusterInfo represents information about the swarm as is returned by the
        /// "/info" endpoint. Join-tokens are not included.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ClusterInfo`.
        package struct ClusterInfo: Codable, Hashable, Sendable {
            /// The ID of the swarm.
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/ID`.
            package var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/Version`.
            package var Version: Components.Schemas.ObjectVersion?
            /// Date and time at which the swarm was initialised in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/CreatedAt`.
            package var CreatedAt: Swift.String?
            /// Date and time at which the swarm was last updated in
            /// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/UpdatedAt`.
            package var UpdatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/Spec`.
            package var Spec: Components.Schemas.SwarmSpec?
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/TLSInfo`.
            package var TLSInfo: Components.Schemas.TLSInfo?
            /// Whether there is currently a root CA rotation in progress for the swarm
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/RootRotationInProgress`.
            package var RootRotationInProgress: Swift.Bool?
            /// DataPathPort specifies the data path port number for data traffic.
            /// Acceptable port range is 1024 to 49151.
            /// If no port is set or is set to 0, the default port (4789) is used.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/DataPathPort`.
            package var DataPathPort: Swift.Int?
            /// Default Address Pool specifies default subnet pools for global scope
            /// networks.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/DefaultAddrPool`.
            package var DefaultAddrPool: [Swift.String]?
            /// SubnetSize specifies the subnet size of the networks created from the
            /// default subnet pool.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterInfo/SubnetSize`.
            package var SubnetSize: Swift.Int?
            /// Creates a new `ClusterInfo`.
            ///
            /// - Parameters:
            ///   - ID: The ID of the swarm.
            ///   - Version:
            ///   - CreatedAt: Date and time at which the swarm was initialised in
            ///   - UpdatedAt: Date and time at which the swarm was last updated in
            ///   - Spec:
            ///   - TLSInfo:
            ///   - RootRotationInProgress: Whether there is currently a root CA rotation in progress for the swarm
            ///   - DataPathPort: DataPathPort specifies the data path port number for data traffic.
            ///   - DefaultAddrPool: Default Address Pool specifies default subnet pools for global scope
            ///   - SubnetSize: SubnetSize specifies the subnet size of the networks created from the
            package init(
                ID: Swift.String? = nil,
                Version: Components.Schemas.ObjectVersion? = nil,
                CreatedAt: Swift.String? = nil,
                UpdatedAt: Swift.String? = nil,
                Spec: Components.Schemas.SwarmSpec? = nil,
                TLSInfo: Components.Schemas.TLSInfo? = nil,
                RootRotationInProgress: Swift.Bool? = nil,
                DataPathPort: Swift.Int? = nil,
                DefaultAddrPool: [Swift.String]? = nil,
                SubnetSize: Swift.Int? = nil
            ) {
                self.ID = ID
                self.Version = Version
                self.CreatedAt = CreatedAt
                self.UpdatedAt = UpdatedAt
                self.Spec = Spec
                self.TLSInfo = TLSInfo
                self.RootRotationInProgress = RootRotationInProgress
                self.DataPathPort = DataPathPort
                self.DefaultAddrPool = DefaultAddrPool
                self.SubnetSize = SubnetSize
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Version
                case CreatedAt
                case UpdatedAt
                case Spec
                case TLSInfo
                case RootRotationInProgress
                case DataPathPort
                case DefaultAddrPool
                case SubnetSize
            }
        }
        /// JoinTokens contains the tokens workers and managers need to join the swarm.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/JoinTokens`.
        package struct JoinTokens: Codable, Hashable, Sendable {
            /// The token workers can use to join the swarm.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/JoinTokens/Worker`.
            package var Worker: Swift.String?
            /// The token managers can use to join the swarm.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/JoinTokens/Manager`.
            package var Manager: Swift.String?
            /// Creates a new `JoinTokens`.
            ///
            /// - Parameters:
            ///   - Worker: The token workers can use to join the swarm.
            ///   - Manager: The token managers can use to join the swarm.
            package init(
                Worker: Swift.String? = nil,
                Manager: Swift.String? = nil
            ) {
                self.Worker = Worker
                self.Manager = Manager
            }
            package enum CodingKeys: String, CodingKey {
                case Worker
                case Manager
            }
        }
        /// - Remark: Generated from `#/components/schemas/Swarm`.
        package struct Swarm: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Swarm/value1`.
            package var value1: Components.Schemas.ClusterInfo
            /// - Remark: Generated from `#/components/schemas/Swarm/value2`.
            package struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Swarm/value2/JoinTokens`.
                package var JoinTokens: Components.Schemas.JoinTokens?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - JoinTokens:
                package init(JoinTokens: Components.Schemas.JoinTokens? = nil) {
                    self.JoinTokens = JoinTokens
                }
                package enum CodingKeys: String, CodingKey {
                    case JoinTokens
                }
            }
            /// - Remark: Generated from `#/components/schemas/Swarm/value2`.
            package var value2: Components.Schemas.Swarm.Value2Payload
            /// Creates a new `Swarm`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            package init(
                value1: Components.Schemas.ClusterInfo,
                value2: Components.Schemas.Swarm.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            package init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            package func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// User modifiable task configuration.
        ///
        /// - Remark: Generated from `#/components/schemas/TaskSpec`.
        package struct TaskSpec: Codable, Hashable, Sendable {
            /// Plugin spec for the service.  *(Experimental release only.)*
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            /// > mutually exclusive. PluginSpec is only used when the Runtime field
            /// > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            /// > field is set to `attachment`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/PluginSpec`.
            package struct PluginSpecPayload: Codable, Hashable, Sendable {
                /// The name or 'alias' to use for the plugin.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/PluginSpec/Name`.
                package var Name: Swift.String?
                /// The plugin image reference to use.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/PluginSpec/Remote`.
                package var Remote: Swift.String?
                /// Disable the plugin once scheduled.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/PluginSpec/Disabled`.
                package var Disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/TaskSpec/PluginSpec/PluginPrivilege`.
                package var PluginPrivilege: [Components.Schemas.PluginPrivilege]?
                /// Creates a new `PluginSpecPayload`.
                ///
                /// - Parameters:
                ///   - Name: The name or 'alias' to use for the plugin.
                ///   - Remote: The plugin image reference to use.
                ///   - Disabled: Disable the plugin once scheduled.
                ///   - PluginPrivilege:
                package init(
                    Name: Swift.String? = nil,
                    Remote: Swift.String? = nil,
                    Disabled: Swift.Bool? = nil,
                    PluginPrivilege: [Components.Schemas.PluginPrivilege]? = nil
                ) {
                    self.Name = Name
                    self.Remote = Remote
                    self.Disabled = Disabled
                    self.PluginPrivilege = PluginPrivilege
                }
                package enum CodingKeys: String, CodingKey {
                    case Name
                    case Remote
                    case Disabled
                    case PluginPrivilege
                }
            }
            /// Plugin spec for the service.  *(Experimental release only.)*
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            /// > mutually exclusive. PluginSpec is only used when the Runtime field
            /// > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            /// > field is set to `attachment`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/PluginSpec`.
            package var PluginSpec: Components.Schemas.TaskSpec.PluginSpecPayload?
            /// Container spec for the service.
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            /// > mutually exclusive. PluginSpec is only used when the Runtime field
            /// > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            /// > field is set to `attachment`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec`.
            package struct ContainerSpecPayload: Codable, Hashable, Sendable {
                /// The image name to use for the container
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Image`.
                package var Image: Swift.String?
                /// User-defined key/value data.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Labels`.
                package struct LabelsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `LabelsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// User-defined key/value data.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Labels`.
                package var Labels: Components.Schemas.TaskSpec.ContainerSpecPayload.LabelsPayload?
                /// The command to be run in the image.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Command`.
                package var Command: [Swift.String]?
                /// Arguments to the command.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Args`.
                package var Args: [Swift.String]?
                /// The hostname to use for the container, as a valid
                /// [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Hostname`.
                package var Hostname: Swift.String?
                /// A list of environment variables in the form `VAR=value`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Env`.
                package var Env: [Swift.String]?
                /// The working directory for commands to run in.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Dir`.
                package var Dir: Swift.String?
                /// The user inside the container.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/User`.
                package var User: Swift.String?
                /// A list of additional groups that the container process will run as.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Groups`.
                package var Groups: [Swift.String]?
                /// Security options for the container
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges`.
                package struct PrivilegesPayload: Codable, Hashable, Sendable {
                    /// CredentialSpec for managed service account (Windows only)
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/CredentialSpec`.
                    package struct CredentialSpecPayload: Codable, Hashable, Sendable {
                        /// Load credential spec from a Swarm Config with the given ID.
                        /// The specified config must also be present in the Configs
                        /// field with the Runtime property set.
                        ///
                        /// <p><br /></p>
                        ///
                        ///
                        /// > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
                        /// > and `CredentialSpec.Config` are mutually exclusive.
                        ///
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/CredentialSpec/Config`.
                        package var Config: Swift.String?
                        /// Load credential spec from this file. The file is read by
                        /// the daemon, and must be present in the `CredentialSpecs`
                        /// subdirectory in the docker data directory, which defaults
                        /// to `C:\ProgramData\Docker\` on Windows.
                        ///
                        /// For example, specifying `spec.json` loads
                        /// `C:\ProgramData\Docker\CredentialSpecs\spec.json`.
                        ///
                        /// <p><br /></p>
                        ///
                        /// > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
                        /// > and `CredentialSpec.Config` are mutually exclusive.
                        ///
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/CredentialSpec/File`.
                        package var File: Swift.String?
                        /// Load credential spec from this value in the Windows
                        /// registry. The specified registry value must be located in:
                        ///
                        /// `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs`
                        ///
                        /// <p><br /></p>
                        ///
                        ///
                        /// > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
                        /// > and `CredentialSpec.Config` are mutually exclusive.
                        ///
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/CredentialSpec/Registry`.
                        package var Registry: Swift.String?
                        /// Creates a new `CredentialSpecPayload`.
                        ///
                        /// - Parameters:
                        ///   - Config: Load credential spec from a Swarm Config with the given ID.
                        ///   - File: Load credential spec from this file. The file is read by
                        ///   - Registry: Load credential spec from this value in the Windows
                        package init(
                            Config: Swift.String? = nil,
                            File: Swift.String? = nil,
                            Registry: Swift.String? = nil
                        ) {
                            self.Config = Config
                            self.File = File
                            self.Registry = Registry
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Config
                            case File
                            case Registry
                        }
                    }
                    /// CredentialSpec for managed service account (Windows only)
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/CredentialSpec`.
                    package var CredentialSpec: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.CredentialSpecPayload?
                    /// SELinux labels of the container
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/SELinuxContext`.
                    package struct SELinuxContextPayload: Codable, Hashable, Sendable {
                        /// Disable SELinux
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/SELinuxContext/Disable`.
                        package var Disable: Swift.Bool?
                        /// SELinux user label
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/SELinuxContext/User`.
                        package var User: Swift.String?
                        /// SELinux role label
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/SELinuxContext/Role`.
                        package var Role: Swift.String?
                        /// SELinux type label
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/SELinuxContext/Type`.
                        package var _Type: Swift.String?
                        /// SELinux level label
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/SELinuxContext/Level`.
                        package var Level: Swift.String?
                        /// Creates a new `SELinuxContextPayload`.
                        ///
                        /// - Parameters:
                        ///   - Disable: Disable SELinux
                        ///   - User: SELinux user label
                        ///   - Role: SELinux role label
                        ///   - _Type: SELinux type label
                        ///   - Level: SELinux level label
                        package init(
                            Disable: Swift.Bool? = nil,
                            User: Swift.String? = nil,
                            Role: Swift.String? = nil,
                            _Type: Swift.String? = nil,
                            Level: Swift.String? = nil
                        ) {
                            self.Disable = Disable
                            self.User = User
                            self.Role = Role
                            self._Type = _Type
                            self.Level = Level
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Disable
                            case User
                            case Role
                            case _Type = "Type"
                            case Level
                        }
                    }
                    /// SELinux labels of the container
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/SELinuxContext`.
                    package var SELinuxContext: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.SELinuxContextPayload?
                    /// Options for configuring seccomp on the container
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/Seccomp`.
                    package struct SeccompPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/Seccomp/Mode`.
                        @frozen package enum ModePayload: String, Codable, Hashable, Sendable {
                            case _default = "default"
                            case unconfined = "unconfined"
                            case custom = "custom"
                        }
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/Seccomp/Mode`.
                        package var Mode: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.SeccompPayload.ModePayload?
                        /// The custom seccomp profile as a json object
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/Seccomp/Profile`.
                        package var Profile: Swift.String?
                        /// Creates a new `SeccompPayload`.
                        ///
                        /// - Parameters:
                        ///   - Mode:
                        ///   - Profile: The custom seccomp profile as a json object
                        package init(
                            Mode: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.SeccompPayload.ModePayload? = nil,
                            Profile: Swift.String? = nil
                        ) {
                            self.Mode = Mode
                            self.Profile = Profile
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Mode
                            case Profile
                        }
                    }
                    /// Options for configuring seccomp on the container
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/Seccomp`.
                    package var Seccomp: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.SeccompPayload?
                    /// Options for configuring AppArmor on the container
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/AppArmor`.
                    package struct AppArmorPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/AppArmor/Mode`.
                        @frozen package enum ModePayload: String, Codable, Hashable, Sendable {
                            case _default = "default"
                            case disabled = "disabled"
                        }
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/AppArmor/Mode`.
                        package var Mode: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.AppArmorPayload.ModePayload?
                        /// Creates a new `AppArmorPayload`.
                        ///
                        /// - Parameters:
                        ///   - Mode:
                        package init(Mode: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.AppArmorPayload.ModePayload? = nil) {
                            self.Mode = Mode
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Mode
                        }
                    }
                    /// Options for configuring AppArmor on the container
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/AppArmor`.
                    package var AppArmor: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.AppArmorPayload?
                    /// Configuration of the no_new_privs bit in the container
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges/NoNewPrivileges`.
                    package var NoNewPrivileges: Swift.Bool?
                    /// Creates a new `PrivilegesPayload`.
                    ///
                    /// - Parameters:
                    ///   - CredentialSpec: CredentialSpec for managed service account (Windows only)
                    ///   - SELinuxContext: SELinux labels of the container
                    ///   - Seccomp: Options for configuring seccomp on the container
                    ///   - AppArmor: Options for configuring AppArmor on the container
                    ///   - NoNewPrivileges: Configuration of the no_new_privs bit in the container
                    package init(
                        CredentialSpec: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.CredentialSpecPayload? = nil,
                        SELinuxContext: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.SELinuxContextPayload? = nil,
                        Seccomp: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.SeccompPayload? = nil,
                        AppArmor: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload.AppArmorPayload? = nil,
                        NoNewPrivileges: Swift.Bool? = nil
                    ) {
                        self.CredentialSpec = CredentialSpec
                        self.SELinuxContext = SELinuxContext
                        self.Seccomp = Seccomp
                        self.AppArmor = AppArmor
                        self.NoNewPrivileges = NoNewPrivileges
                    }
                    package enum CodingKeys: String, CodingKey {
                        case CredentialSpec
                        case SELinuxContext
                        case Seccomp
                        case AppArmor
                        case NoNewPrivileges
                    }
                }
                /// Security options for the container
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Privileges`.
                package var Privileges: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload?
                /// Whether a pseudo-TTY should be allocated.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/TTY`.
                package var TTY: Swift.Bool?
                /// Open `stdin`
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/OpenStdin`.
                package var OpenStdin: Swift.Bool?
                /// Mount the container's root filesystem as read only.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ReadOnly`.
                package var ReadOnly: Swift.Bool?
                /// Specification for mounts to be added to containers created as part
                /// of the service.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Mounts`.
                package var Mounts: [Components.Schemas.Mount]?
                /// Signal to stop the container.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/StopSignal`.
                package var StopSignal: Swift.String?
                /// Amount of time to wait for the container to terminate before
                /// forcefully killing it.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/StopGracePeriod`.
                package var StopGracePeriod: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/HealthCheck`.
                package var HealthCheck: Components.Schemas.HealthConfig?
                /// A list of hostname/IP mappings to add to the container's `hosts`
                /// file. The format of extra hosts is specified in the
                /// [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)
                /// man page:
                ///
                ///     IP_address canonical_hostname [aliases...]
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Hosts`.
                package var Hosts: [Swift.String]?
                /// Specification for DNS related configurations in resolver configuration
                /// file (`resolv.conf`).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/DNSConfig`.
                package struct DNSConfigPayload: Codable, Hashable, Sendable {
                    /// The IP addresses of the name servers.
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/DNSConfig/Nameservers`.
                    package var Nameservers: [Swift.String]?
                    /// A search list for host-name lookup.
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/DNSConfig/Search`.
                    package var Search: [Swift.String]?
                    /// A list of internal resolver variables to be modified (e.g.,
                    /// `debug`, `ndots:3`, etc.).
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/DNSConfig/Options`.
                    package var Options: [Swift.String]?
                    /// Creates a new `DNSConfigPayload`.
                    ///
                    /// - Parameters:
                    ///   - Nameservers: The IP addresses of the name servers.
                    ///   - Search: A search list for host-name lookup.
                    ///   - Options: A list of internal resolver variables to be modified (e.g.,
                    package init(
                        Nameservers: [Swift.String]? = nil,
                        Search: [Swift.String]? = nil,
                        Options: [Swift.String]? = nil
                    ) {
                        self.Nameservers = Nameservers
                        self.Search = Search
                        self.Options = Options
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Nameservers
                        case Search
                        case Options
                    }
                }
                /// Specification for DNS related configurations in resolver configuration
                /// file (`resolv.conf`).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/DNSConfig`.
                package var DNSConfig: Components.Schemas.TaskSpec.ContainerSpecPayload.DNSConfigPayload?
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/SecretsPayload`.
                package struct SecretsPayloadPayload: Codable, Hashable, Sendable {
                    /// File represents a specific target that is backed by a file.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/SecretsPayload/File`.
                    package struct FilePayload: Codable, Hashable, Sendable {
                        /// Name represents the final filename in the filesystem.
                        ///
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/SecretsPayload/File/Name`.
                        package var Name: Swift.String?
                        /// UID represents the file UID.
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/SecretsPayload/File/UID`.
                        package var UID: Swift.String?
                        /// GID represents the file GID.
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/SecretsPayload/File/GID`.
                        package var GID: Swift.String?
                        /// Mode represents the FileMode of the file.
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/SecretsPayload/File/Mode`.
                        package var Mode: Swift.Int?
                        /// Creates a new `FilePayload`.
                        ///
                        /// - Parameters:
                        ///   - Name: Name represents the final filename in the filesystem.
                        ///   - UID: UID represents the file UID.
                        ///   - GID: GID represents the file GID.
                        ///   - Mode: Mode represents the FileMode of the file.
                        package init(
                            Name: Swift.String? = nil,
                            UID: Swift.String? = nil,
                            GID: Swift.String? = nil,
                            Mode: Swift.Int? = nil
                        ) {
                            self.Name = Name
                            self.UID = UID
                            self.GID = GID
                            self.Mode = Mode
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Name
                            case UID
                            case GID
                            case Mode
                        }
                    }
                    /// File represents a specific target that is backed by a file.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/SecretsPayload/File`.
                    package var File: Components.Schemas.TaskSpec.ContainerSpecPayload.SecretsPayloadPayload.FilePayload?
                    /// SecretID represents the ID of the specific secret that we're
                    /// referencing.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/SecretsPayload/SecretID`.
                    package var SecretID: Swift.String?
                    /// SecretName is the name of the secret that this references,
                    /// but this is just provided for lookup/display purposes. The
                    /// secret in the reference will be identified by its ID.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/SecretsPayload/SecretName`.
                    package var SecretName: Swift.String?
                    /// Creates a new `SecretsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - File: File represents a specific target that is backed by a file.
                    ///   - SecretID: SecretID represents the ID of the specific secret that we're
                    ///   - SecretName: SecretName is the name of the secret that this references,
                    package init(
                        File: Components.Schemas.TaskSpec.ContainerSpecPayload.SecretsPayloadPayload.FilePayload? = nil,
                        SecretID: Swift.String? = nil,
                        SecretName: Swift.String? = nil
                    ) {
                        self.File = File
                        self.SecretID = SecretID
                        self.SecretName = SecretName
                    }
                    package enum CodingKeys: String, CodingKey {
                        case File
                        case SecretID
                        case SecretName
                    }
                }
                /// Secrets contains references to zero or more secrets that will be
                /// exposed to the service.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Secrets`.
                package typealias SecretsPayload = [Components.Schemas.TaskSpec.ContainerSpecPayload.SecretsPayloadPayload]
                /// Secrets contains references to zero or more secrets that will be
                /// exposed to the service.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Secrets`.
                package var Secrets: Components.Schemas.TaskSpec.ContainerSpecPayload.SecretsPayload?
                /// An integer value containing the score given to the container in
                /// order to tune OOM killer preferences.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/OomScoreAdj`.
                package var OomScoreAdj: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload`.
                package struct ConfigsPayloadPayload: Codable, Hashable, Sendable {
                    /// File represents a specific target that is backed by a file.
                    ///
                    /// <p><br /><p>
                    ///
                    /// > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload/File`.
                    package struct FilePayload: Codable, Hashable, Sendable {
                        /// Name represents the final filename in the filesystem.
                        ///
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload/File/Name`.
                        package var Name: Swift.String?
                        /// UID represents the file UID.
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload/File/UID`.
                        package var UID: Swift.String?
                        /// GID represents the file GID.
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload/File/GID`.
                        package var GID: Swift.String?
                        /// Mode represents the FileMode of the file.
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload/File/Mode`.
                        package var Mode: Swift.Int?
                        /// Creates a new `FilePayload`.
                        ///
                        /// - Parameters:
                        ///   - Name: Name represents the final filename in the filesystem.
                        ///   - UID: UID represents the file UID.
                        ///   - GID: GID represents the file GID.
                        ///   - Mode: Mode represents the FileMode of the file.
                        package init(
                            Name: Swift.String? = nil,
                            UID: Swift.String? = nil,
                            GID: Swift.String? = nil,
                            Mode: Swift.Int? = nil
                        ) {
                            self.Name = Name
                            self.UID = UID
                            self.GID = GID
                            self.Mode = Mode
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Name
                            case UID
                            case GID
                            case Mode
                        }
                    }
                    /// File represents a specific target that is backed by a file.
                    ///
                    /// <p><br /><p>
                    ///
                    /// > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload/File`.
                    package var File: Components.Schemas.TaskSpec.ContainerSpecPayload.ConfigsPayloadPayload.FilePayload?
                    /// Runtime represents a target that is not mounted into the
                    /// container but is used by the task
                    ///
                    /// <p><br /><p>
                    ///
                    /// > **Note**: `Configs.File` and `Configs.Runtime` are mutually
                    /// > exclusive
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload/Runtime`.
                    package var Runtime: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// ConfigID represents the ID of the specific config that we're
                    /// referencing.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload/ConfigID`.
                    package var ConfigID: Swift.String?
                    /// ConfigName is the name of the config that this references,
                    /// but this is just provided for lookup/display purposes. The
                    /// config in the reference will be identified by its ID.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/ConfigsPayload/ConfigName`.
                    package var ConfigName: Swift.String?
                    /// Creates a new `ConfigsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - File: File represents a specific target that is backed by a file.
                    ///   - Runtime: Runtime represents a target that is not mounted into the
                    ///   - ConfigID: ConfigID represents the ID of the specific config that we're
                    ///   - ConfigName: ConfigName is the name of the config that this references,
                    package init(
                        File: Components.Schemas.TaskSpec.ContainerSpecPayload.ConfigsPayloadPayload.FilePayload? = nil,
                        Runtime: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        ConfigID: Swift.String? = nil,
                        ConfigName: Swift.String? = nil
                    ) {
                        self.File = File
                        self.Runtime = Runtime
                        self.ConfigID = ConfigID
                        self.ConfigName = ConfigName
                    }
                    package enum CodingKeys: String, CodingKey {
                        case File
                        case Runtime
                        case ConfigID
                        case ConfigName
                    }
                }
                /// Configs contains references to zero or more configs that will be
                /// exposed to the service.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Configs`.
                package typealias ConfigsPayload = [Components.Schemas.TaskSpec.ContainerSpecPayload.ConfigsPayloadPayload]
                /// Configs contains references to zero or more configs that will be
                /// exposed to the service.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Configs`.
                package var Configs: Components.Schemas.TaskSpec.ContainerSpecPayload.ConfigsPayload?
                /// Isolation technology of the containers running the service.
                /// (Windows only)
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Isolation`.
                @frozen package enum IsolationPayload: String, Codable, Hashable, Sendable {
                    case _default = "default"
                    case process = "process"
                    case hyperv = "hyperv"
                }
                /// Isolation technology of the containers running the service.
                /// (Windows only)
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Isolation`.
                package var Isolation: Components.Schemas.TaskSpec.ContainerSpecPayload.IsolationPayload?
                /// Run an init inside the container that forwards signals and reaps
                /// processes. This field is omitted if empty, and the default (as
                /// configured on the daemon) is used.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Init`.
                package var Init: Swift.Bool?
                /// Set kernel namedspaced parameters (sysctls) in the container.
                /// The Sysctls option on services accepts the same sysctls as the
                /// are supported on containers. Note that while the same sysctls are
                /// supported, no guarantees or checks are made about their
                /// suitability for a clustered environment, and it's up to the user
                /// to determine whether a given sysctl will work properly in a
                /// Service.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Sysctls`.
                package struct SysctlsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `SysctlsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Set kernel namedspaced parameters (sysctls) in the container.
                /// The Sysctls option on services accepts the same sysctls as the
                /// are supported on containers. Note that while the same sysctls are
                /// supported, no guarantees or checks are made about their
                /// suitability for a clustered environment, and it's up to the user
                /// to determine whether a given sysctl will work properly in a
                /// Service.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Sysctls`.
                package var Sysctls: Components.Schemas.TaskSpec.ContainerSpecPayload.SysctlsPayload?
                /// A list of kernel capabilities to add to the default set
                /// for the container.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/CapabilityAdd`.
                package var CapabilityAdd: [Swift.String]?
                /// A list of kernel capabilities to drop from the default set
                /// for the container.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/CapabilityDrop`.
                package var CapabilityDrop: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/UlimitsPayload`.
                package struct UlimitsPayloadPayload: Codable, Hashable, Sendable {
                    /// Name of ulimit
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/UlimitsPayload/Name`.
                    package var Name: Swift.String?
                    /// Soft limit
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/UlimitsPayload/Soft`.
                    package var Soft: Swift.Int?
                    /// Hard limit
                    ///
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/UlimitsPayload/Hard`.
                    package var Hard: Swift.Int?
                    /// Creates a new `UlimitsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - Name: Name of ulimit
                    ///   - Soft: Soft limit
                    ///   - Hard: Hard limit
                    package init(
                        Name: Swift.String? = nil,
                        Soft: Swift.Int? = nil,
                        Hard: Swift.Int? = nil
                    ) {
                        self.Name = Name
                        self.Soft = Soft
                        self.Hard = Hard
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Name
                        case Soft
                        case Hard
                    }
                }
                /// A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Ulimits`.
                package typealias UlimitsPayload = [Components.Schemas.TaskSpec.ContainerSpecPayload.UlimitsPayloadPayload]
                /// A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec/Ulimits`.
                package var Ulimits: Components.Schemas.TaskSpec.ContainerSpecPayload.UlimitsPayload?
                /// Creates a new `ContainerSpecPayload`.
                ///
                /// - Parameters:
                ///   - Image: The image name to use for the container
                ///   - Labels: User-defined key/value data.
                ///   - Command: The command to be run in the image.
                ///   - Args: Arguments to the command.
                ///   - Hostname: The hostname to use for the container, as a valid
                ///   - Env: A list of environment variables in the form `VAR=value`.
                ///   - Dir: The working directory for commands to run in.
                ///   - User: The user inside the container.
                ///   - Groups: A list of additional groups that the container process will run as.
                ///   - Privileges: Security options for the container
                ///   - TTY: Whether a pseudo-TTY should be allocated.
                ///   - OpenStdin: Open `stdin`
                ///   - ReadOnly: Mount the container's root filesystem as read only.
                ///   - Mounts: Specification for mounts to be added to containers created as part
                ///   - StopSignal: Signal to stop the container.
                ///   - StopGracePeriod: Amount of time to wait for the container to terminate before
                ///   - HealthCheck:
                ///   - Hosts: A list of hostname/IP mappings to add to the container's `hosts`
                ///   - DNSConfig: Specification for DNS related configurations in resolver configuration
                ///   - Secrets: Secrets contains references to zero or more secrets that will be
                ///   - OomScoreAdj: An integer value containing the score given to the container in
                ///   - Configs: Configs contains references to zero or more configs that will be
                ///   - Isolation: Isolation technology of the containers running the service.
                ///   - Init: Run an init inside the container that forwards signals and reaps
                ///   - Sysctls: Set kernel namedspaced parameters (sysctls) in the container.
                ///   - CapabilityAdd: A list of kernel capabilities to add to the default set
                ///   - CapabilityDrop: A list of kernel capabilities to drop from the default set
                ///   - Ulimits: A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
                package init(
                    Image: Swift.String? = nil,
                    Labels: Components.Schemas.TaskSpec.ContainerSpecPayload.LabelsPayload? = nil,
                    Command: [Swift.String]? = nil,
                    Args: [Swift.String]? = nil,
                    Hostname: Swift.String? = nil,
                    Env: [Swift.String]? = nil,
                    Dir: Swift.String? = nil,
                    User: Swift.String? = nil,
                    Groups: [Swift.String]? = nil,
                    Privileges: Components.Schemas.TaskSpec.ContainerSpecPayload.PrivilegesPayload? = nil,
                    TTY: Swift.Bool? = nil,
                    OpenStdin: Swift.Bool? = nil,
                    ReadOnly: Swift.Bool? = nil,
                    Mounts: [Components.Schemas.Mount]? = nil,
                    StopSignal: Swift.String? = nil,
                    StopGracePeriod: Swift.Int64? = nil,
                    HealthCheck: Components.Schemas.HealthConfig? = nil,
                    Hosts: [Swift.String]? = nil,
                    DNSConfig: Components.Schemas.TaskSpec.ContainerSpecPayload.DNSConfigPayload? = nil,
                    Secrets: Components.Schemas.TaskSpec.ContainerSpecPayload.SecretsPayload? = nil,
                    OomScoreAdj: Swift.Int64? = nil,
                    Configs: Components.Schemas.TaskSpec.ContainerSpecPayload.ConfigsPayload? = nil,
                    Isolation: Components.Schemas.TaskSpec.ContainerSpecPayload.IsolationPayload? = nil,
                    Init: Swift.Bool? = nil,
                    Sysctls: Components.Schemas.TaskSpec.ContainerSpecPayload.SysctlsPayload? = nil,
                    CapabilityAdd: [Swift.String]? = nil,
                    CapabilityDrop: [Swift.String]? = nil,
                    Ulimits: Components.Schemas.TaskSpec.ContainerSpecPayload.UlimitsPayload? = nil
                ) {
                    self.Image = Image
                    self.Labels = Labels
                    self.Command = Command
                    self.Args = Args
                    self.Hostname = Hostname
                    self.Env = Env
                    self.Dir = Dir
                    self.User = User
                    self.Groups = Groups
                    self.Privileges = Privileges
                    self.TTY = TTY
                    self.OpenStdin = OpenStdin
                    self.ReadOnly = ReadOnly
                    self.Mounts = Mounts
                    self.StopSignal = StopSignal
                    self.StopGracePeriod = StopGracePeriod
                    self.HealthCheck = HealthCheck
                    self.Hosts = Hosts
                    self.DNSConfig = DNSConfig
                    self.Secrets = Secrets
                    self.OomScoreAdj = OomScoreAdj
                    self.Configs = Configs
                    self.Isolation = Isolation
                    self.Init = Init
                    self.Sysctls = Sysctls
                    self.CapabilityAdd = CapabilityAdd
                    self.CapabilityDrop = CapabilityDrop
                    self.Ulimits = Ulimits
                }
                package enum CodingKeys: String, CodingKey {
                    case Image
                    case Labels
                    case Command
                    case Args
                    case Hostname
                    case Env
                    case Dir
                    case User
                    case Groups
                    case Privileges
                    case TTY
                    case OpenStdin
                    case ReadOnly
                    case Mounts
                    case StopSignal
                    case StopGracePeriod
                    case HealthCheck
                    case Hosts
                    case DNSConfig
                    case Secrets
                    case OomScoreAdj
                    case Configs
                    case Isolation
                    case Init
                    case Sysctls
                    case CapabilityAdd
                    case CapabilityDrop
                    case Ulimits
                }
            }
            /// Container spec for the service.
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            /// > mutually exclusive. PluginSpec is only used when the Runtime field
            /// > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            /// > field is set to `attachment`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/ContainerSpec`.
            package var ContainerSpec: Components.Schemas.TaskSpec.ContainerSpecPayload?
            /// Read-only spec type for non-swarm containers attached to swarm overlay
            /// networks.
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            /// > mutually exclusive. PluginSpec is only used when the Runtime field
            /// > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            /// > field is set to `attachment`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/NetworkAttachmentSpec`.
            package struct NetworkAttachmentSpecPayload: Codable, Hashable, Sendable {
                /// ID of the container represented by this task
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/NetworkAttachmentSpec/ContainerID`.
                package var ContainerID: Swift.String?
                /// Creates a new `NetworkAttachmentSpecPayload`.
                ///
                /// - Parameters:
                ///   - ContainerID: ID of the container represented by this task
                package init(ContainerID: Swift.String? = nil) {
                    self.ContainerID = ContainerID
                }
                package enum CodingKeys: String, CodingKey {
                    case ContainerID
                }
            }
            /// Read-only spec type for non-swarm containers attached to swarm overlay
            /// networks.
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            /// > mutually exclusive. PluginSpec is only used when the Runtime field
            /// > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            /// > field is set to `attachment`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/NetworkAttachmentSpec`.
            package var NetworkAttachmentSpec: Components.Schemas.TaskSpec.NetworkAttachmentSpecPayload?
            /// Resource requirements which apply to each individual container created
            /// as part of the service.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/Resources`.
            package struct ResourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TaskSpec/Resources/Limits`.
                package var Limits: Components.Schemas.Limit?
                /// - Remark: Generated from `#/components/schemas/TaskSpec/Resources/Reservations`.
                package var Reservations: Components.Schemas.ResourceObject?
                /// Creates a new `ResourcesPayload`.
                ///
                /// - Parameters:
                ///   - Limits:
                ///   - Reservations:
                package init(
                    Limits: Components.Schemas.Limit? = nil,
                    Reservations: Components.Schemas.ResourceObject? = nil
                ) {
                    self.Limits = Limits
                    self.Reservations = Reservations
                }
                package enum CodingKeys: String, CodingKey {
                    case Limits
                    case Reservations
                }
            }
            /// Resource requirements which apply to each individual container created
            /// as part of the service.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/Resources`.
            package var Resources: Components.Schemas.TaskSpec.ResourcesPayload?
            /// Specification for the restart policy which applies to containers
            /// created as part of this service.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/RestartPolicy`.
            package struct RestartPolicyPayload: Codable, Hashable, Sendable {
                /// Condition for restart.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/RestartPolicy/Condition`.
                @frozen package enum ConditionPayload: String, Codable, Hashable, Sendable {
                    case none = "none"
                    case on_hyphen_failure = "on-failure"
                    case any = "any"
                }
                /// Condition for restart.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/RestartPolicy/Condition`.
                package var Condition: Components.Schemas.TaskSpec.RestartPolicyPayload.ConditionPayload?
                /// Delay between restart attempts.
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/RestartPolicy/Delay`.
                package var Delay: Swift.Int64?
                /// Maximum attempts to restart a given container before giving up
                /// (default value is 0, which is ignored).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/RestartPolicy/MaxAttempts`.
                package var MaxAttempts: Swift.Int64?
                /// Windows is the time window used to evaluate the restart policy
                /// (default value is 0, which is unbounded).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/RestartPolicy/Window`.
                package var Window: Swift.Int64?
                /// Creates a new `RestartPolicyPayload`.
                ///
                /// - Parameters:
                ///   - Condition: Condition for restart.
                ///   - Delay: Delay between restart attempts.
                ///   - MaxAttempts: Maximum attempts to restart a given container before giving up
                ///   - Window: Windows is the time window used to evaluate the restart policy
                package init(
                    Condition: Components.Schemas.TaskSpec.RestartPolicyPayload.ConditionPayload? = nil,
                    Delay: Swift.Int64? = nil,
                    MaxAttempts: Swift.Int64? = nil,
                    Window: Swift.Int64? = nil
                ) {
                    self.Condition = Condition
                    self.Delay = Delay
                    self.MaxAttempts = MaxAttempts
                    self.Window = Window
                }
                package enum CodingKeys: String, CodingKey {
                    case Condition
                    case Delay
                    case MaxAttempts
                    case Window
                }
            }
            /// Specification for the restart policy which applies to containers
            /// created as part of this service.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/RestartPolicy`.
            package var RestartPolicy: Components.Schemas.TaskSpec.RestartPolicyPayload?
            /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement`.
            package struct PlacementPayload: Codable, Hashable, Sendable {
                /// An array of constraint expressions to limit the set of nodes where
                /// a task can be scheduled. Constraint expressions can either use a
                /// _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find
                /// nodes that satisfy every expression (AND match). Constraints can
                /// match node or Docker Engine labels as follows:
                ///
                /// node attribute       | matches                        | example
                /// ---------------------|--------------------------------|-----------------------------------------------
                /// `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`
                /// `node.hostname`      | Node hostname                  | `node.hostname!=node-2`
                /// `node.role`          | Node role (`manager`/`worker`) | `node.role==manager`
                /// `node.platform.os`   | Node operating system          | `node.platform.os==windows`
                /// `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`
                /// `node.labels`        | User-defined node labels       | `node.labels.security==high`
                /// `engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-24.04`
                ///
                /// `engine.labels` apply to Docker Engine labels like operating system,
                /// drivers, etc. Swarm administrators add `node.labels` for operational
                /// purposes by using the [`node update endpoint`](#operation/NodeUpdate).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement/Constraints`.
                package var Constraints: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement/PreferencesPayload`.
                package struct PreferencesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement/PreferencesPayload/Spread`.
                    package struct SpreadPayload: Codable, Hashable, Sendable {
                        /// label descriptor, such as `engine.labels.az`.
                        ///
                        ///
                        /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement/PreferencesPayload/Spread/SpreadDescriptor`.
                        package var SpreadDescriptor: Swift.String?
                        /// Creates a new `SpreadPayload`.
                        ///
                        /// - Parameters:
                        ///   - SpreadDescriptor: label descriptor, such as `engine.labels.az`.
                        package init(SpreadDescriptor: Swift.String? = nil) {
                            self.SpreadDescriptor = SpreadDescriptor
                        }
                        package enum CodingKeys: String, CodingKey {
                            case SpreadDescriptor
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement/PreferencesPayload/Spread`.
                    package var Spread: Components.Schemas.TaskSpec.PlacementPayload.PreferencesPayloadPayload.SpreadPayload?
                    /// Creates a new `PreferencesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - Spread:
                    package init(Spread: Components.Schemas.TaskSpec.PlacementPayload.PreferencesPayloadPayload.SpreadPayload? = nil) {
                        self.Spread = Spread
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Spread
                    }
                }
                /// Preferences provide a way to make the scheduler aware of factors
                /// such as topology. They are provided in order from highest to
                /// lowest precedence.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement/Preferences`.
                package typealias PreferencesPayload = [Components.Schemas.TaskSpec.PlacementPayload.PreferencesPayloadPayload]
                /// Preferences provide a way to make the scheduler aware of factors
                /// such as topology. They are provided in order from highest to
                /// lowest precedence.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement/Preferences`.
                package var Preferences: Components.Schemas.TaskSpec.PlacementPayload.PreferencesPayload?
                /// Maximum number of replicas for per node (default value is 0, which
                /// is unlimited)
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement/MaxReplicas`.
                package var MaxReplicas: Swift.Int64?
                /// Platforms stores all the platforms that the service's image can
                /// run on. This field is used in the platform filter for scheduling.
                /// If empty, then the platform filter is off, meaning there are no
                /// scheduling restrictions.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement/Platforms`.
                package var Platforms: [Components.Schemas.Platform]?
                /// Creates a new `PlacementPayload`.
                ///
                /// - Parameters:
                ///   - Constraints: An array of constraint expressions to limit the set of nodes where
                ///   - Preferences: Preferences provide a way to make the scheduler aware of factors
                ///   - MaxReplicas: Maximum number of replicas for per node (default value is 0, which
                ///   - Platforms: Platforms stores all the platforms that the service's image can
                package init(
                    Constraints: [Swift.String]? = nil,
                    Preferences: Components.Schemas.TaskSpec.PlacementPayload.PreferencesPayload? = nil,
                    MaxReplicas: Swift.Int64? = nil,
                    Platforms: [Components.Schemas.Platform]? = nil
                ) {
                    self.Constraints = Constraints
                    self.Preferences = Preferences
                    self.MaxReplicas = MaxReplicas
                    self.Platforms = Platforms
                }
                package enum CodingKeys: String, CodingKey {
                    case Constraints
                    case Preferences
                    case MaxReplicas
                    case Platforms
                }
            }
            /// - Remark: Generated from `#/components/schemas/TaskSpec/Placement`.
            package var Placement: Components.Schemas.TaskSpec.PlacementPayload?
            /// A counter that triggers an update even if no relevant parameters have
            /// been changed.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/ForceUpdate`.
            package var ForceUpdate: Swift.Int?
            /// Runtime is the type of runtime specified for the task executor.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/Runtime`.
            package var Runtime: Swift.String?
            /// Specifies which networks the service should attach to.
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/Networks`.
            package var Networks: [Components.Schemas.NetworkAttachmentConfig]?
            /// Specifies the log driver to use for tasks created from this spec. If
            /// not present, the default one for the swarm will be used, finally
            /// falling back to the engine default if not specified.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/LogDriver`.
            package struct LogDriverPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TaskSpec/LogDriver/Name`.
                package var Name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/TaskSpec/LogDriver/Options`.
                package struct OptionsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `OptionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/TaskSpec/LogDriver/Options`.
                package var Options: Components.Schemas.TaskSpec.LogDriverPayload.OptionsPayload?
                /// Creates a new `LogDriverPayload`.
                ///
                /// - Parameters:
                ///   - Name:
                ///   - Options:
                package init(
                    Name: Swift.String? = nil,
                    Options: Components.Schemas.TaskSpec.LogDriverPayload.OptionsPayload? = nil
                ) {
                    self.Name = Name
                    self.Options = Options
                }
                package enum CodingKeys: String, CodingKey {
                    case Name
                    case Options
                }
            }
            /// Specifies the log driver to use for tasks created from this spec. If
            /// not present, the default one for the swarm will be used, finally
            /// falling back to the engine default if not specified.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TaskSpec/LogDriver`.
            package var LogDriver: Components.Schemas.TaskSpec.LogDriverPayload?
            /// Creates a new `TaskSpec`.
            ///
            /// - Parameters:
            ///   - PluginSpec: Plugin spec for the service.  *(Experimental release only.)*
            ///   - ContainerSpec: Container spec for the service.
            ///   - NetworkAttachmentSpec: Read-only spec type for non-swarm containers attached to swarm overlay
            ///   - Resources: Resource requirements which apply to each individual container created
            ///   - RestartPolicy: Specification for the restart policy which applies to containers
            ///   - Placement:
            ///   - ForceUpdate: A counter that triggers an update even if no relevant parameters have
            ///   - Runtime: Runtime is the type of runtime specified for the task executor.
            ///   - Networks: Specifies which networks the service should attach to.
            ///   - LogDriver: Specifies the log driver to use for tasks created from this spec. If
            package init(
                PluginSpec: Components.Schemas.TaskSpec.PluginSpecPayload? = nil,
                ContainerSpec: Components.Schemas.TaskSpec.ContainerSpecPayload? = nil,
                NetworkAttachmentSpec: Components.Schemas.TaskSpec.NetworkAttachmentSpecPayload? = nil,
                Resources: Components.Schemas.TaskSpec.ResourcesPayload? = nil,
                RestartPolicy: Components.Schemas.TaskSpec.RestartPolicyPayload? = nil,
                Placement: Components.Schemas.TaskSpec.PlacementPayload? = nil,
                ForceUpdate: Swift.Int? = nil,
                Runtime: Swift.String? = nil,
                Networks: [Components.Schemas.NetworkAttachmentConfig]? = nil,
                LogDriver: Components.Schemas.TaskSpec.LogDriverPayload? = nil
            ) {
                self.PluginSpec = PluginSpec
                self.ContainerSpec = ContainerSpec
                self.NetworkAttachmentSpec = NetworkAttachmentSpec
                self.Resources = Resources
                self.RestartPolicy = RestartPolicy
                self.Placement = Placement
                self.ForceUpdate = ForceUpdate
                self.Runtime = Runtime
                self.Networks = Networks
                self.LogDriver = LogDriver
            }
            package enum CodingKeys: String, CodingKey {
                case PluginSpec
                case ContainerSpec
                case NetworkAttachmentSpec
                case Resources
                case RestartPolicy
                case Placement
                case ForceUpdate
                case Runtime
                case Networks
                case LogDriver
            }
        }
        /// - Remark: Generated from `#/components/schemas/TaskState`.
        @frozen package enum TaskState: String, Codable, Hashable, Sendable {
            case new = "new"
            case allocated = "allocated"
            case pending = "pending"
            case assigned = "assigned"
            case accepted = "accepted"
            case preparing = "preparing"
            case ready = "ready"
            case starting = "starting"
            case running = "running"
            case complete = "complete"
            case shutdown = "shutdown"
            case failed = "failed"
            case rejected = "rejected"
            case remove = "remove"
            case orphaned = "orphaned"
        }
        /// represents the status of a container.
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerStatus`.
        package struct ContainerStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContainerStatus/ContainerID`.
            package var ContainerID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerStatus/PID`.
            package var PID: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerStatus/ExitCode`.
            package var ExitCode: Swift.Int?
            /// Creates a new `ContainerStatus`.
            ///
            /// - Parameters:
            ///   - ContainerID:
            ///   - PID:
            ///   - ExitCode:
            package init(
                ContainerID: Swift.String? = nil,
                PID: Swift.Int? = nil,
                ExitCode: Swift.Int? = nil
            ) {
                self.ContainerID = ContainerID
                self.PID = PID
                self.ExitCode = ExitCode
            }
            package enum CodingKeys: String, CodingKey {
                case ContainerID
                case PID
                case ExitCode
            }
        }
        /// represents the port status of a task's host ports whose service has published host ports
        ///
        /// - Remark: Generated from `#/components/schemas/PortStatus`.
        package struct PortStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PortStatus/Ports`.
            package var Ports: [Components.Schemas.EndpointPortConfig]?
            /// Creates a new `PortStatus`.
            ///
            /// - Parameters:
            ///   - Ports:
            package init(Ports: [Components.Schemas.EndpointPortConfig]? = nil) {
                self.Ports = Ports
            }
            package enum CodingKeys: String, CodingKey {
                case Ports
            }
        }
        /// represents the status of a task.
        ///
        /// - Remark: Generated from `#/components/schemas/TaskStatus`.
        package struct TaskStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TaskStatus/Timestamp`.
            package var Timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TaskStatus/State`.
            package var State: Components.Schemas.TaskState?
            /// - Remark: Generated from `#/components/schemas/TaskStatus/Message`.
            package var Message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TaskStatus/Err`.
            package var Err: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TaskStatus/ContainerStatus`.
            package var ContainerStatus: Components.Schemas.ContainerStatus?
            /// - Remark: Generated from `#/components/schemas/TaskStatus/PortStatus`.
            package var PortStatus: Components.Schemas.PortStatus?
            /// Creates a new `TaskStatus`.
            ///
            /// - Parameters:
            ///   - Timestamp:
            ///   - State:
            ///   - Message:
            ///   - Err:
            ///   - ContainerStatus:
            ///   - PortStatus:
            package init(
                Timestamp: Swift.String? = nil,
                State: Components.Schemas.TaskState? = nil,
                Message: Swift.String? = nil,
                Err: Swift.String? = nil,
                ContainerStatus: Components.Schemas.ContainerStatus? = nil,
                PortStatus: Components.Schemas.PortStatus? = nil
            ) {
                self.Timestamp = Timestamp
                self.State = State
                self.Message = Message
                self.Err = Err
                self.ContainerStatus = ContainerStatus
                self.PortStatus = PortStatus
            }
            package enum CodingKeys: String, CodingKey {
                case Timestamp
                case State
                case Message
                case Err
                case ContainerStatus
                case PortStatus
            }
        }
        /// - Remark: Generated from `#/components/schemas/Task`.
        package struct Task: Codable, Hashable, Sendable {
            /// The ID of the task.
            ///
            /// - Remark: Generated from `#/components/schemas/Task/ID`.
            package var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Task/Version`.
            package var Version: Components.Schemas.ObjectVersion?
            /// - Remark: Generated from `#/components/schemas/Task/CreatedAt`.
            package var CreatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Task/UpdatedAt`.
            package var UpdatedAt: Swift.String?
            /// Name of the task.
            ///
            /// - Remark: Generated from `#/components/schemas/Task/Name`.
            package var Name: Swift.String?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Task/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Task/Labels`.
            package var Labels: Components.Schemas.Task.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/Task/Spec`.
            package var Spec: Components.Schemas.TaskSpec?
            /// The ID of the service this task is part of.
            ///
            /// - Remark: Generated from `#/components/schemas/Task/ServiceID`.
            package var ServiceID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Task/Slot`.
            package var Slot: Swift.Int?
            /// The ID of the node that this task is on.
            ///
            /// - Remark: Generated from `#/components/schemas/Task/NodeID`.
            package var NodeID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Task/AssignedGenericResources`.
            package var AssignedGenericResources: Components.Schemas.GenericResources?
            /// - Remark: Generated from `#/components/schemas/Task/Status`.
            package var Status: Components.Schemas.TaskStatus?
            /// - Remark: Generated from `#/components/schemas/Task/DesiredState`.
            package var DesiredState: Components.Schemas.TaskState?
            /// - Remark: Generated from `#/components/schemas/Task/JobIteration`.
            package var JobIteration: Components.Schemas.ObjectVersion?
            /// Creates a new `Task`.
            ///
            /// - Parameters:
            ///   - ID: The ID of the task.
            ///   - Version:
            ///   - CreatedAt:
            ///   - UpdatedAt:
            ///   - Name: Name of the task.
            ///   - Labels: User-defined key/value metadata.
            ///   - Spec:
            ///   - ServiceID: The ID of the service this task is part of.
            ///   - Slot:
            ///   - NodeID: The ID of the node that this task is on.
            ///   - AssignedGenericResources:
            ///   - Status:
            ///   - DesiredState:
            ///   - JobIteration:
            package init(
                ID: Swift.String? = nil,
                Version: Components.Schemas.ObjectVersion? = nil,
                CreatedAt: Swift.String? = nil,
                UpdatedAt: Swift.String? = nil,
                Name: Swift.String? = nil,
                Labels: Components.Schemas.Task.LabelsPayload? = nil,
                Spec: Components.Schemas.TaskSpec? = nil,
                ServiceID: Swift.String? = nil,
                Slot: Swift.Int? = nil,
                NodeID: Swift.String? = nil,
                AssignedGenericResources: Components.Schemas.GenericResources? = nil,
                Status: Components.Schemas.TaskStatus? = nil,
                DesiredState: Components.Schemas.TaskState? = nil,
                JobIteration: Components.Schemas.ObjectVersion? = nil
            ) {
                self.ID = ID
                self.Version = Version
                self.CreatedAt = CreatedAt
                self.UpdatedAt = UpdatedAt
                self.Name = Name
                self.Labels = Labels
                self.Spec = Spec
                self.ServiceID = ServiceID
                self.Slot = Slot
                self.NodeID = NodeID
                self.AssignedGenericResources = AssignedGenericResources
                self.Status = Status
                self.DesiredState = DesiredState
                self.JobIteration = JobIteration
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Version
                case CreatedAt
                case UpdatedAt
                case Name
                case Labels
                case Spec
                case ServiceID
                case Slot
                case NodeID
                case AssignedGenericResources
                case Status
                case DesiredState
                case JobIteration
            }
        }
        /// User modifiable configuration for a service.
        ///
        /// - Remark: Generated from `#/components/schemas/ServiceSpec`.
        package struct ServiceSpec: Codable, Hashable, Sendable {
            /// Name of the service.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/Name`.
            package var Name: Swift.String?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/Labels`.
            package var Labels: Components.Schemas.ServiceSpec.LabelsPayload?
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/TaskTemplate`.
            package var TaskTemplate: Components.Schemas.TaskSpec?
            /// Scheduling mode for the service.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode`.
            package struct ModePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode/Replicated`.
                package struct ReplicatedPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode/Replicated/Replicas`.
                    package var Replicas: Swift.Int64?
                    /// Creates a new `ReplicatedPayload`.
                    ///
                    /// - Parameters:
                    ///   - Replicas:
                    package init(Replicas: Swift.Int64? = nil) {
                        self.Replicas = Replicas
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Replicas
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode/Replicated`.
                package var Replicated: Components.Schemas.ServiceSpec.ModePayload.ReplicatedPayload?
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode/Global`.
                package var Global: OpenAPIRuntime.OpenAPIObjectContainer?
                /// The mode used for services with a finite number of tasks that run
                /// to a completed state.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode/ReplicatedJob`.
                package struct ReplicatedJobPayload: Codable, Hashable, Sendable {
                    /// The maximum number of replicas to run simultaneously.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode/ReplicatedJob/MaxConcurrent`.
                    package var MaxConcurrent: Swift.Int64?
                    /// The total number of replicas desired to reach the Completed
                    /// state. If unset, will default to the value of `MaxConcurrent`
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode/ReplicatedJob/TotalCompletions`.
                    package var TotalCompletions: Swift.Int64?
                    /// Creates a new `ReplicatedJobPayload`.
                    ///
                    /// - Parameters:
                    ///   - MaxConcurrent: The maximum number of replicas to run simultaneously.
                    ///   - TotalCompletions: The total number of replicas desired to reach the Completed
                    package init(
                        MaxConcurrent: Swift.Int64? = nil,
                        TotalCompletions: Swift.Int64? = nil
                    ) {
                        self.MaxConcurrent = MaxConcurrent
                        self.TotalCompletions = TotalCompletions
                    }
                    package enum CodingKeys: String, CodingKey {
                        case MaxConcurrent
                        case TotalCompletions
                    }
                }
                /// The mode used for services with a finite number of tasks that run
                /// to a completed state.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode/ReplicatedJob`.
                package var ReplicatedJob: Components.Schemas.ServiceSpec.ModePayload.ReplicatedJobPayload?
                /// The mode used for services which run a task to the completed state
                /// on each valid node.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode/GlobalJob`.
                package var GlobalJob: OpenAPIRuntime.OpenAPIObjectContainer?
                /// Creates a new `ModePayload`.
                ///
                /// - Parameters:
                ///   - Replicated:
                ///   - Global:
                ///   - ReplicatedJob: The mode used for services with a finite number of tasks that run
                ///   - GlobalJob: The mode used for services which run a task to the completed state
                package init(
                    Replicated: Components.Schemas.ServiceSpec.ModePayload.ReplicatedPayload? = nil,
                    Global: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                    ReplicatedJob: Components.Schemas.ServiceSpec.ModePayload.ReplicatedJobPayload? = nil,
                    GlobalJob: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                ) {
                    self.Replicated = Replicated
                    self.Global = Global
                    self.ReplicatedJob = ReplicatedJob
                    self.GlobalJob = GlobalJob
                }
                package enum CodingKeys: String, CodingKey {
                    case Replicated
                    case Global
                    case ReplicatedJob
                    case GlobalJob
                }
            }
            /// Scheduling mode for the service.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/Mode`.
            package var Mode: Components.Schemas.ServiceSpec.ModePayload?
            /// Specification for the update strategy of the service.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig`.
            package struct UpdateConfigPayload: Codable, Hashable, Sendable {
                /// Maximum number of tasks to be updated in one iteration (0 means
                /// unlimited parallelism).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig/Parallelism`.
                package var Parallelism: Swift.Int64?
                /// Amount of time between updates, in nanoseconds.
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig/Delay`.
                package var Delay: Swift.Int64?
                /// Action to take if an updated task fails to run, or stops running
                /// during the update.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig/FailureAction`.
                @frozen package enum FailureActionPayload: String, Codable, Hashable, Sendable {
                    case _continue = "continue"
                    case pause = "pause"
                    case rollback = "rollback"
                }
                /// Action to take if an updated task fails to run, or stops running
                /// during the update.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig/FailureAction`.
                package var FailureAction: Components.Schemas.ServiceSpec.UpdateConfigPayload.FailureActionPayload?
                /// Amount of time to monitor each updated task for failures, in
                /// nanoseconds.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig/Monitor`.
                package var Monitor: Swift.Int64?
                /// The fraction of tasks that may fail during an update before the
                /// failure action is invoked, specified as a floating point number
                /// between 0 and 1.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig/MaxFailureRatio`.
                package var MaxFailureRatio: Swift.Double?
                /// The order of operations when rolling out an updated task. Either
                /// the old task is shut down before the new task is started, or the
                /// new task is started before the old task is shut down.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig/Order`.
                @frozen package enum OrderPayload: String, Codable, Hashable, Sendable {
                    case stop_hyphen_first = "stop-first"
                    case start_hyphen_first = "start-first"
                }
                /// The order of operations when rolling out an updated task. Either
                /// the old task is shut down before the new task is started, or the
                /// new task is started before the old task is shut down.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig/Order`.
                package var Order: Components.Schemas.ServiceSpec.UpdateConfigPayload.OrderPayload?
                /// Creates a new `UpdateConfigPayload`.
                ///
                /// - Parameters:
                ///   - Parallelism: Maximum number of tasks to be updated in one iteration (0 means
                ///   - Delay: Amount of time between updates, in nanoseconds.
                ///   - FailureAction: Action to take if an updated task fails to run, or stops running
                ///   - Monitor: Amount of time to monitor each updated task for failures, in
                ///   - MaxFailureRatio: The fraction of tasks that may fail during an update before the
                ///   - Order: The order of operations when rolling out an updated task. Either
                package init(
                    Parallelism: Swift.Int64? = nil,
                    Delay: Swift.Int64? = nil,
                    FailureAction: Components.Schemas.ServiceSpec.UpdateConfigPayload.FailureActionPayload? = nil,
                    Monitor: Swift.Int64? = nil,
                    MaxFailureRatio: Swift.Double? = nil,
                    Order: Components.Schemas.ServiceSpec.UpdateConfigPayload.OrderPayload? = nil
                ) {
                    self.Parallelism = Parallelism
                    self.Delay = Delay
                    self.FailureAction = FailureAction
                    self.Monitor = Monitor
                    self.MaxFailureRatio = MaxFailureRatio
                    self.Order = Order
                }
                package enum CodingKeys: String, CodingKey {
                    case Parallelism
                    case Delay
                    case FailureAction
                    case Monitor
                    case MaxFailureRatio
                    case Order
                }
            }
            /// Specification for the update strategy of the service.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/UpdateConfig`.
            package var UpdateConfig: Components.Schemas.ServiceSpec.UpdateConfigPayload?
            /// Specification for the rollback strategy of the service.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig`.
            package struct RollbackConfigPayload: Codable, Hashable, Sendable {
                /// Maximum number of tasks to be rolled back in one iteration (0 means
                /// unlimited parallelism).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig/Parallelism`.
                package var Parallelism: Swift.Int64?
                /// Amount of time between rollback iterations, in nanoseconds.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig/Delay`.
                package var Delay: Swift.Int64?
                /// Action to take if an rolled back task fails to run, or stops
                /// running during the rollback.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig/FailureAction`.
                @frozen package enum FailureActionPayload: String, Codable, Hashable, Sendable {
                    case _continue = "continue"
                    case pause = "pause"
                }
                /// Action to take if an rolled back task fails to run, or stops
                /// running during the rollback.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig/FailureAction`.
                package var FailureAction: Components.Schemas.ServiceSpec.RollbackConfigPayload.FailureActionPayload?
                /// Amount of time to monitor each rolled back task for failures, in
                /// nanoseconds.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig/Monitor`.
                package var Monitor: Swift.Int64?
                /// The fraction of tasks that may fail during a rollback before the
                /// failure action is invoked, specified as a floating point number
                /// between 0 and 1.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig/MaxFailureRatio`.
                package var MaxFailureRatio: Swift.Double?
                /// The order of operations when rolling back a task. Either the old
                /// task is shut down before the new task is started, or the new task
                /// is started before the old task is shut down.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig/Order`.
                @frozen package enum OrderPayload: String, Codable, Hashable, Sendable {
                    case stop_hyphen_first = "stop-first"
                    case start_hyphen_first = "start-first"
                }
                /// The order of operations when rolling back a task. Either the old
                /// task is shut down before the new task is started, or the new task
                /// is started before the old task is shut down.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig/Order`.
                package var Order: Components.Schemas.ServiceSpec.RollbackConfigPayload.OrderPayload?
                /// Creates a new `RollbackConfigPayload`.
                ///
                /// - Parameters:
                ///   - Parallelism: Maximum number of tasks to be rolled back in one iteration (0 means
                ///   - Delay: Amount of time between rollback iterations, in nanoseconds.
                ///   - FailureAction: Action to take if an rolled back task fails to run, or stops
                ///   - Monitor: Amount of time to monitor each rolled back task for failures, in
                ///   - MaxFailureRatio: The fraction of tasks that may fail during a rollback before the
                ///   - Order: The order of operations when rolling back a task. Either the old
                package init(
                    Parallelism: Swift.Int64? = nil,
                    Delay: Swift.Int64? = nil,
                    FailureAction: Components.Schemas.ServiceSpec.RollbackConfigPayload.FailureActionPayload? = nil,
                    Monitor: Swift.Int64? = nil,
                    MaxFailureRatio: Swift.Double? = nil,
                    Order: Components.Schemas.ServiceSpec.RollbackConfigPayload.OrderPayload? = nil
                ) {
                    self.Parallelism = Parallelism
                    self.Delay = Delay
                    self.FailureAction = FailureAction
                    self.Monitor = Monitor
                    self.MaxFailureRatio = MaxFailureRatio
                    self.Order = Order
                }
                package enum CodingKeys: String, CodingKey {
                    case Parallelism
                    case Delay
                    case FailureAction
                    case Monitor
                    case MaxFailureRatio
                    case Order
                }
            }
            /// Specification for the rollback strategy of the service.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/RollbackConfig`.
            package var RollbackConfig: Components.Schemas.ServiceSpec.RollbackConfigPayload?
            /// Specifies which networks the service should attach to.
            ///
            /// Deprecated: This field is deprecated since v1.44. The Networks field in TaskSpec should be used instead.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/Networks`.
            package var Networks: [Components.Schemas.NetworkAttachmentConfig]?
            /// - Remark: Generated from `#/components/schemas/ServiceSpec/EndpointSpec`.
            package var EndpointSpec: Components.Schemas.EndpointSpec?
            /// Creates a new `ServiceSpec`.
            ///
            /// - Parameters:
            ///   - Name: Name of the service.
            ///   - Labels: User-defined key/value metadata.
            ///   - TaskTemplate:
            ///   - Mode: Scheduling mode for the service.
            ///   - UpdateConfig: Specification for the update strategy of the service.
            ///   - RollbackConfig: Specification for the rollback strategy of the service.
            ///   - Networks: Specifies which networks the service should attach to.
            ///   - EndpointSpec:
            package init(
                Name: Swift.String? = nil,
                Labels: Components.Schemas.ServiceSpec.LabelsPayload? = nil,
                TaskTemplate: Components.Schemas.TaskSpec? = nil,
                Mode: Components.Schemas.ServiceSpec.ModePayload? = nil,
                UpdateConfig: Components.Schemas.ServiceSpec.UpdateConfigPayload? = nil,
                RollbackConfig: Components.Schemas.ServiceSpec.RollbackConfigPayload? = nil,
                Networks: [Components.Schemas.NetworkAttachmentConfig]? = nil,
                EndpointSpec: Components.Schemas.EndpointSpec? = nil
            ) {
                self.Name = Name
                self.Labels = Labels
                self.TaskTemplate = TaskTemplate
                self.Mode = Mode
                self.UpdateConfig = UpdateConfig
                self.RollbackConfig = RollbackConfig
                self.Networks = Networks
                self.EndpointSpec = EndpointSpec
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Labels
                case TaskTemplate
                case Mode
                case UpdateConfig
                case RollbackConfig
                case Networks
                case EndpointSpec
            }
        }
        /// - Remark: Generated from `#/components/schemas/EndpointPortConfig`.
        package struct EndpointPortConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EndpointPortConfig/Name`.
            package var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EndpointPortConfig/Protocol`.
            @frozen package enum _ProtocolPayload: String, Codable, Hashable, Sendable {
                case tcp = "tcp"
                case udp = "udp"
                case sctp = "sctp"
            }
            /// - Remark: Generated from `#/components/schemas/EndpointPortConfig/Protocol`.
            package var _Protocol: Components.Schemas.EndpointPortConfig._ProtocolPayload?
            /// The port inside the container.
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointPortConfig/TargetPort`.
            package var TargetPort: Swift.Int?
            /// The port on the swarm hosts.
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointPortConfig/PublishedPort`.
            package var PublishedPort: Swift.Int?
            /// The mode in which port is published.
            ///
            /// <p><br /></p>
            ///
            /// - "ingress" makes the target port accessible on every node,
            ///   regardless of whether there is a task for the service running on
            ///   that node or not.
            /// - "host" bypasses the routing mesh and publish the port directly on
            ///   the swarm node where that service is running.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointPortConfig/PublishMode`.
            @frozen package enum PublishModePayload: String, Codable, Hashable, Sendable {
                case ingress = "ingress"
                case host = "host"
            }
            /// The mode in which port is published.
            ///
            /// <p><br /></p>
            ///
            /// - "ingress" makes the target port accessible on every node,
            ///   regardless of whether there is a task for the service running on
            ///   that node or not.
            /// - "host" bypasses the routing mesh and publish the port directly on
            ///   the swarm node where that service is running.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointPortConfig/PublishMode`.
            package var PublishMode: Components.Schemas.EndpointPortConfig.PublishModePayload?
            /// Creates a new `EndpointPortConfig`.
            ///
            /// - Parameters:
            ///   - Name:
            ///   - _Protocol:
            ///   - TargetPort: The port inside the container.
            ///   - PublishedPort: The port on the swarm hosts.
            ///   - PublishMode: The mode in which port is published.
            package init(
                Name: Swift.String? = nil,
                _Protocol: Components.Schemas.EndpointPortConfig._ProtocolPayload? = nil,
                TargetPort: Swift.Int? = nil,
                PublishedPort: Swift.Int? = nil,
                PublishMode: Components.Schemas.EndpointPortConfig.PublishModePayload? = nil
            ) {
                self.Name = Name
                self._Protocol = _Protocol
                self.TargetPort = TargetPort
                self.PublishedPort = PublishedPort
                self.PublishMode = PublishMode
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case _Protocol = "Protocol"
                case TargetPort
                case PublishedPort
                case PublishMode
            }
        }
        /// Properties that can be configured to access and load balance a service.
        ///
        /// - Remark: Generated from `#/components/schemas/EndpointSpec`.
        package struct EndpointSpec: Codable, Hashable, Sendable {
            /// The mode of resolution to use for internal load balancing between tasks.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSpec/Mode`.
            @frozen package enum ModePayload: String, Codable, Hashable, Sendable {
                case vip = "vip"
                case dnsrr = "dnsrr"
            }
            /// The mode of resolution to use for internal load balancing between tasks.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSpec/Mode`.
            package var Mode: Components.Schemas.EndpointSpec.ModePayload?
            /// List of exposed ports that this service is accessible on from the
            /// outside. Ports can only be provided if `vip` resolution mode is used.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EndpointSpec/Ports`.
            package var Ports: [Components.Schemas.EndpointPortConfig]?
            /// Creates a new `EndpointSpec`.
            ///
            /// - Parameters:
            ///   - Mode: The mode of resolution to use for internal load balancing between tasks.
            ///   - Ports: List of exposed ports that this service is accessible on from the
            package init(
                Mode: Components.Schemas.EndpointSpec.ModePayload? = nil,
                Ports: [Components.Schemas.EndpointPortConfig]? = nil
            ) {
                self.Mode = Mode
                self.Ports = Ports
            }
            package enum CodingKeys: String, CodingKey {
                case Mode
                case Ports
            }
        }
        /// - Remark: Generated from `#/components/schemas/Service`.
        package struct Service: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Service/ID`.
            package var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Service/Version`.
            package var Version: Components.Schemas.ObjectVersion?
            /// - Remark: Generated from `#/components/schemas/Service/CreatedAt`.
            package var CreatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Service/UpdatedAt`.
            package var UpdatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Service/Spec`.
            package var Spec: Components.Schemas.ServiceSpec?
            /// - Remark: Generated from `#/components/schemas/Service/Endpoint`.
            package struct EndpointPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Service/Endpoint/Spec`.
                package var Spec: Components.Schemas.EndpointSpec?
                /// - Remark: Generated from `#/components/schemas/Service/Endpoint/Ports`.
                package var Ports: [Components.Schemas.EndpointPortConfig]?
                /// - Remark: Generated from `#/components/schemas/Service/Endpoint/VirtualIPsPayload`.
                package struct VirtualIPsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Service/Endpoint/VirtualIPsPayload/NetworkID`.
                    package var NetworkID: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/Service/Endpoint/VirtualIPsPayload/Addr`.
                    package var Addr: Swift.String?
                    /// Creates a new `VirtualIPsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - NetworkID:
                    ///   - Addr:
                    package init(
                        NetworkID: Swift.String? = nil,
                        Addr: Swift.String? = nil
                    ) {
                        self.NetworkID = NetworkID
                        self.Addr = Addr
                    }
                    package enum CodingKeys: String, CodingKey {
                        case NetworkID
                        case Addr
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Service/Endpoint/VirtualIPs`.
                package typealias VirtualIPsPayload = [Components.Schemas.Service.EndpointPayload.VirtualIPsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/Service/Endpoint/VirtualIPs`.
                package var VirtualIPs: Components.Schemas.Service.EndpointPayload.VirtualIPsPayload?
                /// Creates a new `EndpointPayload`.
                ///
                /// - Parameters:
                ///   - Spec:
                ///   - Ports:
                ///   - VirtualIPs:
                package init(
                    Spec: Components.Schemas.EndpointSpec? = nil,
                    Ports: [Components.Schemas.EndpointPortConfig]? = nil,
                    VirtualIPs: Components.Schemas.Service.EndpointPayload.VirtualIPsPayload? = nil
                ) {
                    self.Spec = Spec
                    self.Ports = Ports
                    self.VirtualIPs = VirtualIPs
                }
                package enum CodingKeys: String, CodingKey {
                    case Spec
                    case Ports
                    case VirtualIPs
                }
            }
            /// - Remark: Generated from `#/components/schemas/Service/Endpoint`.
            package var Endpoint: Components.Schemas.Service.EndpointPayload?
            /// The status of a service update.
            ///
            /// - Remark: Generated from `#/components/schemas/Service/UpdateStatus`.
            package struct UpdateStatusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Service/UpdateStatus/State`.
                @frozen package enum StatePayload: String, Codable, Hashable, Sendable {
                    case updating = "updating"
                    case paused = "paused"
                    case completed = "completed"
                }
                /// - Remark: Generated from `#/components/schemas/Service/UpdateStatus/State`.
                package var State: Components.Schemas.Service.UpdateStatusPayload.StatePayload?
                /// - Remark: Generated from `#/components/schemas/Service/UpdateStatus/StartedAt`.
                package var StartedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Service/UpdateStatus/CompletedAt`.
                package var CompletedAt: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Service/UpdateStatus/Message`.
                package var Message: Swift.String?
                /// Creates a new `UpdateStatusPayload`.
                ///
                /// - Parameters:
                ///   - State:
                ///   - StartedAt:
                ///   - CompletedAt:
                ///   - Message:
                package init(
                    State: Components.Schemas.Service.UpdateStatusPayload.StatePayload? = nil,
                    StartedAt: Swift.String? = nil,
                    CompletedAt: Swift.String? = nil,
                    Message: Swift.String? = nil
                ) {
                    self.State = State
                    self.StartedAt = StartedAt
                    self.CompletedAt = CompletedAt
                    self.Message = Message
                }
                package enum CodingKeys: String, CodingKey {
                    case State
                    case StartedAt
                    case CompletedAt
                    case Message
                }
            }
            /// The status of a service update.
            ///
            /// - Remark: Generated from `#/components/schemas/Service/UpdateStatus`.
            package var UpdateStatus: Components.Schemas.Service.UpdateStatusPayload?
            /// The status of the service's tasks. Provided only when requested as
            /// part of a ServiceList operation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Service/ServiceStatus`.
            package struct ServiceStatusPayload: Codable, Hashable, Sendable {
                /// The number of tasks for the service currently in the Running state.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Service/ServiceStatus/RunningTasks`.
                package var RunningTasks: Swift.Int?
                /// The number of tasks for the service desired to be running.
                /// For replicated services, this is the replica count from the
                /// service spec. For global services, this is computed by taking
                /// count of all tasks for the service with a Desired State other
                /// than Shutdown.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Service/ServiceStatus/DesiredTasks`.
                package var DesiredTasks: Swift.Int?
                /// The number of tasks for a job that are in the Completed state.
                /// This field must be cross-referenced with the service type, as the
                /// value of 0 may mean the service is not in a job mode, or it may
                /// mean the job-mode service has no tasks yet Completed.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Service/ServiceStatus/CompletedTasks`.
                package var CompletedTasks: Swift.Int?
                /// Creates a new `ServiceStatusPayload`.
                ///
                /// - Parameters:
                ///   - RunningTasks: The number of tasks for the service currently in the Running state.
                ///   - DesiredTasks: The number of tasks for the service desired to be running.
                ///   - CompletedTasks: The number of tasks for a job that are in the Completed state.
                package init(
                    RunningTasks: Swift.Int? = nil,
                    DesiredTasks: Swift.Int? = nil,
                    CompletedTasks: Swift.Int? = nil
                ) {
                    self.RunningTasks = RunningTasks
                    self.DesiredTasks = DesiredTasks
                    self.CompletedTasks = CompletedTasks
                }
                package enum CodingKeys: String, CodingKey {
                    case RunningTasks
                    case DesiredTasks
                    case CompletedTasks
                }
            }
            /// The status of the service's tasks. Provided only when requested as
            /// part of a ServiceList operation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Service/ServiceStatus`.
            package var ServiceStatus: Components.Schemas.Service.ServiceStatusPayload?
            /// The status of the service when it is in one of ReplicatedJob or
            /// GlobalJob modes. Absent on Replicated and Global mode services. The
            /// JobIteration is an ObjectVersion, but unlike the Service's version,
            /// does not need to be sent with an update request.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Service/JobStatus`.
            package struct JobStatusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Service/JobStatus/JobIteration`.
                package var JobIteration: Components.Schemas.ObjectVersion?
                /// The last time, as observed by the server, that this job was
                /// started.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Service/JobStatus/LastExecution`.
                package var LastExecution: Swift.String?
                /// Creates a new `JobStatusPayload`.
                ///
                /// - Parameters:
                ///   - JobIteration:
                ///   - LastExecution: The last time, as observed by the server, that this job was
                package init(
                    JobIteration: Components.Schemas.ObjectVersion? = nil,
                    LastExecution: Swift.String? = nil
                ) {
                    self.JobIteration = JobIteration
                    self.LastExecution = LastExecution
                }
                package enum CodingKeys: String, CodingKey {
                    case JobIteration
                    case LastExecution
                }
            }
            /// The status of the service when it is in one of ReplicatedJob or
            /// GlobalJob modes. Absent on Replicated and Global mode services. The
            /// JobIteration is an ObjectVersion, but unlike the Service's version,
            /// does not need to be sent with an update request.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Service/JobStatus`.
            package var JobStatus: Components.Schemas.Service.JobStatusPayload?
            /// Creates a new `Service`.
            ///
            /// - Parameters:
            ///   - ID:
            ///   - Version:
            ///   - CreatedAt:
            ///   - UpdatedAt:
            ///   - Spec:
            ///   - Endpoint:
            ///   - UpdateStatus: The status of a service update.
            ///   - ServiceStatus: The status of the service's tasks. Provided only when requested as
            ///   - JobStatus: The status of the service when it is in one of ReplicatedJob or
            package init(
                ID: Swift.String? = nil,
                Version: Components.Schemas.ObjectVersion? = nil,
                CreatedAt: Swift.String? = nil,
                UpdatedAt: Swift.String? = nil,
                Spec: Components.Schemas.ServiceSpec? = nil,
                Endpoint: Components.Schemas.Service.EndpointPayload? = nil,
                UpdateStatus: Components.Schemas.Service.UpdateStatusPayload? = nil,
                ServiceStatus: Components.Schemas.Service.ServiceStatusPayload? = nil,
                JobStatus: Components.Schemas.Service.JobStatusPayload? = nil
            ) {
                self.ID = ID
                self.Version = Version
                self.CreatedAt = CreatedAt
                self.UpdatedAt = UpdatedAt
                self.Spec = Spec
                self.Endpoint = Endpoint
                self.UpdateStatus = UpdateStatus
                self.ServiceStatus = ServiceStatus
                self.JobStatus = JobStatus
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Version
                case CreatedAt
                case UpdatedAt
                case Spec
                case Endpoint
                case UpdateStatus
                case ServiceStatus
                case JobStatus
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImageDeleteResponseItem`.
        package struct ImageDeleteResponseItem: Codable, Hashable, Sendable {
            /// The image ID of an image that was untagged
            ///
            /// - Remark: Generated from `#/components/schemas/ImageDeleteResponseItem/Untagged`.
            package var Untagged: Swift.String?
            /// The image ID of an image that was deleted
            ///
            /// - Remark: Generated from `#/components/schemas/ImageDeleteResponseItem/Deleted`.
            package var Deleted: Swift.String?
            /// Creates a new `ImageDeleteResponseItem`.
            ///
            /// - Parameters:
            ///   - Untagged: The image ID of an image that was untagged
            ///   - Deleted: The image ID of an image that was deleted
            package init(
                Untagged: Swift.String? = nil,
                Deleted: Swift.String? = nil
            ) {
                self.Untagged = Untagged
                self.Deleted = Deleted
            }
            package enum CodingKeys: String, CodingKey {
                case Untagged
                case Deleted
            }
        }
        /// contains the information returned to a client on the
        /// creation of a new service.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ServiceCreateResponse`.
        package struct ServiceCreateResponse: Codable, Hashable, Sendable {
            /// The ID of the created service.
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceCreateResponse/ID`.
            package var ID: Swift.String?
            /// Optional warning message.
            ///
            /// FIXME(thaJeztah): this should have "omitempty" in the generated type.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceCreateResponse/Warnings`.
            package var Warnings: [Swift.String]?
            /// Creates a new `ServiceCreateResponse`.
            ///
            /// - Parameters:
            ///   - ID: The ID of the created service.
            ///   - Warnings: Optional warning message.
            package init(
                ID: Swift.String? = nil,
                Warnings: [Swift.String]? = nil
            ) {
                self.ID = ID
                self.Warnings = Warnings
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Warnings
            }
        }
        /// - Remark: Generated from `#/components/schemas/ServiceUpdateResponse`.
        package struct ServiceUpdateResponse: Codable, Hashable, Sendable {
            /// Optional warning messages
            ///
            /// - Remark: Generated from `#/components/schemas/ServiceUpdateResponse/Warnings`.
            package var Warnings: [Swift.String]?
            /// Creates a new `ServiceUpdateResponse`.
            ///
            /// - Parameters:
            ///   - Warnings: Optional warning messages
            package init(Warnings: [Swift.String]? = nil) {
                self.Warnings = Warnings
            }
            package enum CodingKeys: String, CodingKey {
                case Warnings
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContainerSummary`.
        package struct ContainerSummary: Codable, Hashable, Sendable {
            /// The ID of this container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Id`.
            package var Id: Swift.String?
            /// The names that this container has been given
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Names`.
            package var Names: [Swift.String]?
            /// The name of the image used when creating this container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Image`.
            package var Image: Swift.String?
            /// The ID of the image that this container was created from
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/ImageID`.
            package var ImageID: Swift.String?
            /// Command to run when starting the container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Command`.
            package var Command: Swift.String?
            /// When the container was created
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Created`.
            package var Created: Swift.Int64?
            /// The ports exposed by this container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Ports`.
            package var Ports: [Components.Schemas.Port]?
            /// The size of files that have been created or changed by this container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/SizeRw`.
            package var SizeRw: Swift.Int64?
            /// The total size of all the files in this container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/SizeRootFs`.
            package var SizeRootFs: Swift.Int64?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Labels`.
            package var Labels: Components.Schemas.ContainerSummary.LabelsPayload?
            /// The state of this container (e.g. `Exited`)
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/State`.
            package var State: Swift.String?
            /// Additional human-readable status of this container (e.g. `Exit 0`)
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Status`.
            package var Status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/HostConfig`.
            package struct HostConfigPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ContainerSummary/HostConfig/NetworkMode`.
                package var NetworkMode: Swift.String?
                /// Arbitrary key-value metadata attached to container
                ///
                /// - Remark: Generated from `#/components/schemas/ContainerSummary/HostConfig/Annotations`.
                package struct AnnotationsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `AnnotationsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Arbitrary key-value metadata attached to container
                ///
                /// - Remark: Generated from `#/components/schemas/ContainerSummary/HostConfig/Annotations`.
                package var Annotations: Components.Schemas.ContainerSummary.HostConfigPayload.AnnotationsPayload?
                /// Creates a new `HostConfigPayload`.
                ///
                /// - Parameters:
                ///   - NetworkMode:
                ///   - Annotations: Arbitrary key-value metadata attached to container
                package init(
                    NetworkMode: Swift.String? = nil,
                    Annotations: Components.Schemas.ContainerSummary.HostConfigPayload.AnnotationsPayload? = nil
                ) {
                    self.NetworkMode = NetworkMode
                    self.Annotations = Annotations
                }
                package enum CodingKeys: String, CodingKey {
                    case NetworkMode
                    case Annotations
                }
            }
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/HostConfig`.
            package var HostConfig: Components.Schemas.ContainerSummary.HostConfigPayload?
            /// A summary of the container's network settings
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/NetworkSettings`.
            package struct NetworkSettingsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ContainerSummary/NetworkSettings/Networks`.
                package struct NetworksPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Components.Schemas.EndpointSettings]
                    /// Creates a new `NetworksPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Components.Schemas.EndpointSettings] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ContainerSummary/NetworkSettings/Networks`.
                package var Networks: Components.Schemas.ContainerSummary.NetworkSettingsPayload.NetworksPayload?
                /// Creates a new `NetworkSettingsPayload`.
                ///
                /// - Parameters:
                ///   - Networks:
                package init(Networks: Components.Schemas.ContainerSummary.NetworkSettingsPayload.NetworksPayload? = nil) {
                    self.Networks = Networks
                }
                package enum CodingKeys: String, CodingKey {
                    case Networks
                }
            }
            /// A summary of the container's network settings
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/NetworkSettings`.
            package var NetworkSettings: Components.Schemas.ContainerSummary.NetworkSettingsPayload?
            /// - Remark: Generated from `#/components/schemas/ContainerSummary/Mounts`.
            package var Mounts: [Components.Schemas.MountPoint]?
            /// Creates a new `ContainerSummary`.
            ///
            /// - Parameters:
            ///   - Id: The ID of this container
            ///   - Names: The names that this container has been given
            ///   - Image: The name of the image used when creating this container
            ///   - ImageID: The ID of the image that this container was created from
            ///   - Command: Command to run when starting the container
            ///   - Created: When the container was created
            ///   - Ports: The ports exposed by this container
            ///   - SizeRw: The size of files that have been created or changed by this container
            ///   - SizeRootFs: The total size of all the files in this container
            ///   - Labels: User-defined key/value metadata.
            ///   - State: The state of this container (e.g. `Exited`)
            ///   - Status: Additional human-readable status of this container (e.g. `Exit 0`)
            ///   - HostConfig:
            ///   - NetworkSettings: A summary of the container's network settings
            ///   - Mounts:
            package init(
                Id: Swift.String? = nil,
                Names: [Swift.String]? = nil,
                Image: Swift.String? = nil,
                ImageID: Swift.String? = nil,
                Command: Swift.String? = nil,
                Created: Swift.Int64? = nil,
                Ports: [Components.Schemas.Port]? = nil,
                SizeRw: Swift.Int64? = nil,
                SizeRootFs: Swift.Int64? = nil,
                Labels: Components.Schemas.ContainerSummary.LabelsPayload? = nil,
                State: Swift.String? = nil,
                Status: Swift.String? = nil,
                HostConfig: Components.Schemas.ContainerSummary.HostConfigPayload? = nil,
                NetworkSettings: Components.Schemas.ContainerSummary.NetworkSettingsPayload? = nil,
                Mounts: [Components.Schemas.MountPoint]? = nil
            ) {
                self.Id = Id
                self.Names = Names
                self.Image = Image
                self.ImageID = ImageID
                self.Command = Command
                self.Created = Created
                self.Ports = Ports
                self.SizeRw = SizeRw
                self.SizeRootFs = SizeRootFs
                self.Labels = Labels
                self.State = State
                self.Status = Status
                self.HostConfig = HostConfig
                self.NetworkSettings = NetworkSettings
                self.Mounts = Mounts
            }
            package enum CodingKeys: String, CodingKey {
                case Id
                case Names
                case Image
                case ImageID
                case Command
                case Created
                case Ports
                case SizeRw
                case SizeRootFs
                case Labels
                case State
                case Status
                case HostConfig
                case NetworkSettings
                case Mounts
            }
        }
        /// Driver represents a driver (network, logging, secrets).
        ///
        /// - Remark: Generated from `#/components/schemas/Driver`.
        package struct Driver: Codable, Hashable, Sendable {
            /// Name of the driver.
            ///
            /// - Remark: Generated from `#/components/schemas/Driver/Name`.
            package var Name: Swift.String
            /// Key/value map of driver-specific options.
            ///
            /// - Remark: Generated from `#/components/schemas/Driver/Options`.
            package struct OptionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `OptionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Key/value map of driver-specific options.
            ///
            /// - Remark: Generated from `#/components/schemas/Driver/Options`.
            package var Options: Components.Schemas.Driver.OptionsPayload?
            /// Creates a new `Driver`.
            ///
            /// - Parameters:
            ///   - Name: Name of the driver.
            ///   - Options: Key/value map of driver-specific options.
            package init(
                Name: Swift.String,
                Options: Components.Schemas.Driver.OptionsPayload? = nil
            ) {
                self.Name = Name
                self.Options = Options
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Options
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecretSpec`.
        package struct SecretSpec: Codable, Hashable, Sendable {
            /// User-defined name of the secret.
            ///
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Name`.
            package var Name: Swift.String?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Labels`.
            package var Labels: Components.Schemas.SecretSpec.LabelsPayload?
            /// Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
            /// data to store as secret.
            ///
            /// This field is only used to _create_ a secret, and is not returned by
            /// other endpoints.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Data`.
            package var Data: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Driver`.
            package var Driver: Components.Schemas.Driver?
            /// - Remark: Generated from `#/components/schemas/SecretSpec/Templating`.
            package var Templating: Components.Schemas.Driver?
            /// Creates a new `SecretSpec`.
            ///
            /// - Parameters:
            ///   - Name: User-defined name of the secret.
            ///   - Labels: User-defined key/value metadata.
            ///   - Data: Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
            ///   - Driver:
            ///   - Templating:
            package init(
                Name: Swift.String? = nil,
                Labels: Components.Schemas.SecretSpec.LabelsPayload? = nil,
                Data: Swift.String? = nil,
                Driver: Components.Schemas.Driver? = nil,
                Templating: Components.Schemas.Driver? = nil
            ) {
                self.Name = Name
                self.Labels = Labels
                self.Data = Data
                self.Driver = Driver
                self.Templating = Templating
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Labels
                case Data
                case Driver
                case Templating
            }
        }
        /// - Remark: Generated from `#/components/schemas/Secret`.
        package struct Secret: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Secret/ID`.
            package var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Secret/Version`.
            package var Version: Components.Schemas.ObjectVersion?
            /// - Remark: Generated from `#/components/schemas/Secret/CreatedAt`.
            package var CreatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Secret/UpdatedAt`.
            package var UpdatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Secret/Spec`.
            package var Spec: Components.Schemas.SecretSpec?
            /// Creates a new `Secret`.
            ///
            /// - Parameters:
            ///   - ID:
            ///   - Version:
            ///   - CreatedAt:
            ///   - UpdatedAt:
            ///   - Spec:
            package init(
                ID: Swift.String? = nil,
                Version: Components.Schemas.ObjectVersion? = nil,
                CreatedAt: Swift.String? = nil,
                UpdatedAt: Swift.String? = nil,
                Spec: Components.Schemas.SecretSpec? = nil
            ) {
                self.ID = ID
                self.Version = Version
                self.CreatedAt = CreatedAt
                self.UpdatedAt = UpdatedAt
                self.Spec = Spec
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Version
                case CreatedAt
                case UpdatedAt
                case Spec
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConfigSpec`.
        package struct ConfigSpec: Codable, Hashable, Sendable {
            /// User-defined name of the config.
            ///
            /// - Remark: Generated from `#/components/schemas/ConfigSpec/Name`.
            package var Name: Swift.String?
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ConfigSpec/Labels`.
            package struct LabelsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `LabelsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// User-defined key/value metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/ConfigSpec/Labels`.
            package var Labels: Components.Schemas.ConfigSpec.LabelsPayload?
            /// Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
            /// config data.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ConfigSpec/Data`.
            package var Data: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConfigSpec/Templating`.
            package var Templating: Components.Schemas.Driver?
            /// Creates a new `ConfigSpec`.
            ///
            /// - Parameters:
            ///   - Name: User-defined name of the config.
            ///   - Labels: User-defined key/value metadata.
            ///   - Data: Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
            ///   - Templating:
            package init(
                Name: Swift.String? = nil,
                Labels: Components.Schemas.ConfigSpec.LabelsPayload? = nil,
                Data: Swift.String? = nil,
                Templating: Components.Schemas.Driver? = nil
            ) {
                self.Name = Name
                self.Labels = Labels
                self.Data = Data
                self.Templating = Templating
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Labels
                case Data
                case Templating
            }
        }
        /// - Remark: Generated from `#/components/schemas/Config`.
        package struct Config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Config/ID`.
            package var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/Version`.
            package var Version: Components.Schemas.ObjectVersion?
            /// - Remark: Generated from `#/components/schemas/Config/CreatedAt`.
            package var CreatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/UpdatedAt`.
            package var UpdatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Config/Spec`.
            package var Spec: Components.Schemas.ConfigSpec?
            /// Creates a new `Config`.
            ///
            /// - Parameters:
            ///   - ID:
            ///   - Version:
            ///   - CreatedAt:
            ///   - UpdatedAt:
            ///   - Spec:
            package init(
                ID: Swift.String? = nil,
                Version: Components.Schemas.ObjectVersion? = nil,
                CreatedAt: Swift.String? = nil,
                UpdatedAt: Swift.String? = nil,
                Spec: Components.Schemas.ConfigSpec? = nil
            ) {
                self.ID = ID
                self.Version = Version
                self.CreatedAt = CreatedAt
                self.UpdatedAt = UpdatedAt
                self.Spec = Spec
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Version
                case CreatedAt
                case UpdatedAt
                case Spec
            }
        }
        /// ContainerState stores container's running state. It's part of ContainerJSONBase
        /// and will be returned by the "inspect" command.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerState`.
        package struct ContainerState: Codable, Hashable, Sendable {
            /// String representation of the container state. Can be one of "created",
            /// "running", "paused", "restarting", "removing", "exited", or "dead".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/Status`.
            @frozen package enum StatusPayload: String, Codable, Hashable, Sendable {
                case created = "created"
                case running = "running"
                case paused = "paused"
                case restarting = "restarting"
                case removing = "removing"
                case exited = "exited"
                case dead = "dead"
            }
            /// String representation of the container state. Can be one of "created",
            /// "running", "paused", "restarting", "removing", "exited", or "dead".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/Status`.
            package var Status: Components.Schemas.ContainerState.StatusPayload?
            /// Whether this container is running.
            ///
            /// Note that a running container can be _paused_. The `Running` and `Paused`
            /// booleans are not mutually exclusive:
            ///
            /// When pausing a container (on Linux), the freezer cgroup is used to suspend
            /// all processes in the container. Freezing the process requires the process to
            /// be running. As a result, paused containers are both `Running` _and_ `Paused`.
            ///
            /// Use the `Status` field instead to determine if a container's state is "running".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/Running`.
            package var Running: Swift.Bool?
            /// Whether this container is paused.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/Paused`.
            package var Paused: Swift.Bool?
            /// Whether this container is restarting.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/Restarting`.
            package var Restarting: Swift.Bool?
            /// Whether a process within this container has been killed because it ran
            /// out of memory since the container was last started.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/OOMKilled`.
            package var OOMKilled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Dead`.
            package var Dead: Swift.Bool?
            /// The process ID of this container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/Pid`.
            package var Pid: Swift.Int?
            /// The last exit code of this container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/ExitCode`.
            package var ExitCode: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Error`.
            package var _Error: Swift.String?
            /// The time when this container was last started.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/StartedAt`.
            package var StartedAt: Swift.String?
            /// The time when this container last exited.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerState/FinishedAt`.
            package var FinishedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContainerState/Health`.
            package var Health: Components.Schemas.Health?
            /// Creates a new `ContainerState`.
            ///
            /// - Parameters:
            ///   - Status: String representation of the container state. Can be one of "created",
            ///   - Running: Whether this container is running.
            ///   - Paused: Whether this container is paused.
            ///   - Restarting: Whether this container is restarting.
            ///   - OOMKilled: Whether a process within this container has been killed because it ran
            ///   - Dead:
            ///   - Pid: The process ID of this container
            ///   - ExitCode: The last exit code of this container
            ///   - _Error:
            ///   - StartedAt: The time when this container was last started.
            ///   - FinishedAt: The time when this container last exited.
            ///   - Health:
            package init(
                Status: Components.Schemas.ContainerState.StatusPayload? = nil,
                Running: Swift.Bool? = nil,
                Paused: Swift.Bool? = nil,
                Restarting: Swift.Bool? = nil,
                OOMKilled: Swift.Bool? = nil,
                Dead: Swift.Bool? = nil,
                Pid: Swift.Int? = nil,
                ExitCode: Swift.Int? = nil,
                _Error: Swift.String? = nil,
                StartedAt: Swift.String? = nil,
                FinishedAt: Swift.String? = nil,
                Health: Components.Schemas.Health? = nil
            ) {
                self.Status = Status
                self.Running = Running
                self.Paused = Paused
                self.Restarting = Restarting
                self.OOMKilled = OOMKilled
                self.Dead = Dead
                self.Pid = Pid
                self.ExitCode = ExitCode
                self._Error = _Error
                self.StartedAt = StartedAt
                self.FinishedAt = FinishedAt
                self.Health = Health
            }
            package enum CodingKeys: String, CodingKey {
                case Status
                case Running
                case Paused
                case Restarting
                case OOMKilled
                case Dead
                case Pid
                case ExitCode
                case _Error = "Error"
                case StartedAt
                case FinishedAt
                case Health
            }
        }
        /// OK response to ContainerCreate operation
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerCreateResponse`.
        package struct ContainerCreateResponse: Codable, Hashable, Sendable {
            /// The ID of the created container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerCreateResponse/Id`.
            package var Id: Swift.String
            /// Warnings encountered when creating the container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerCreateResponse/Warnings`.
            package var Warnings: [Swift.String]
            /// Creates a new `ContainerCreateResponse`.
            ///
            /// - Parameters:
            ///   - Id: The ID of the created container
            ///   - Warnings: Warnings encountered when creating the container
            package init(
                Id: Swift.String,
                Warnings: [Swift.String]
            ) {
                self.Id = Id
                self.Warnings = Warnings
            }
            package enum CodingKeys: String, CodingKey {
                case Id
                case Warnings
            }
        }
        /// OK response to ContainerWait operation
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerWaitResponse`.
        package struct ContainerWaitResponse: Codable, Hashable, Sendable {
            /// Exit code of the container
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerWaitResponse/StatusCode`.
            package var StatusCode: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ContainerWaitResponse/Error`.
            package var _Error: Components.Schemas.ContainerWaitExitError?
            /// Creates a new `ContainerWaitResponse`.
            ///
            /// - Parameters:
            ///   - StatusCode: Exit code of the container
            ///   - _Error:
            package init(
                StatusCode: Swift.Int64,
                _Error: Components.Schemas.ContainerWaitExitError? = nil
            ) {
                self.StatusCode = StatusCode
                self._Error = _Error
            }
            package enum CodingKeys: String, CodingKey {
                case StatusCode
                case _Error = "Error"
            }
        }
        /// container waiting error, if any
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerWaitExitError`.
        package struct ContainerWaitExitError: Codable, Hashable, Sendable {
            /// Details of an error
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerWaitExitError/Message`.
            package var Message: Swift.String?
            /// Creates a new `ContainerWaitExitError`.
            ///
            /// - Parameters:
            ///   - Message: Details of an error
            package init(Message: Swift.String? = nil) {
                self.Message = Message
            }
            package enum CodingKeys: String, CodingKey {
                case Message
            }
        }
        /// Response of Engine API: GET "/version"
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVersion`.
        package struct SystemVersion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVersion/Platform`.
            package struct PlatformPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SystemVersion/Platform/Name`.
                package var Name: Swift.String
                /// Creates a new `PlatformPayload`.
                ///
                /// - Parameters:
                ///   - Name:
                package init(Name: Swift.String) {
                    self.Name = Name
                }
                package enum CodingKeys: String, CodingKey {
                    case Name
                }
            }
            /// - Remark: Generated from `#/components/schemas/SystemVersion/Platform`.
            package var Platform: Components.Schemas.SystemVersion.PlatformPayload?
            /// - Remark: Generated from `#/components/schemas/SystemVersion/ComponentsPayload`.
            package struct ComponentsPayloadPayload: Codable, Hashable, Sendable {
                /// Name of the component
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SystemVersion/ComponentsPayload/Name`.
                package var Name: Swift.String
                /// Version of the component
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SystemVersion/ComponentsPayload/Version`.
                package var Version: Swift.String
                /// Key/value pairs of strings with additional information about the
                /// component. These values are intended for informational purposes
                /// only, and their content is not defined, and not part of the API
                /// specification.
                ///
                /// These messages can be printed by the client as information to the user.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SystemVersion/ComponentsPayload/Details`.
                package var Details: OpenAPIRuntime.OpenAPIObjectContainer?
                /// Creates a new `ComponentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - Name: Name of the component
                ///   - Version: Version of the component
                ///   - Details: Key/value pairs of strings with additional information about the
                package init(
                    Name: Swift.String,
                    Version: Swift.String,
                    Details: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                ) {
                    self.Name = Name
                    self.Version = Version
                    self.Details = Details
                }
                package enum CodingKeys: String, CodingKey {
                    case Name
                    case Version
                    case Details
                }
            }
            /// Information about system components
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/Components`.
            package typealias ComponentsPayload = [Components.Schemas.SystemVersion.ComponentsPayloadPayload]
            /// Information about system components
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/Components`.
            package var Components: Components.Schemas.SystemVersion.ComponentsPayload?
            /// The version of the daemon
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/Version`.
            package var Version: Swift.String?
            /// The default (and highest) API version that is supported by the daemon
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/ApiVersion`.
            package var ApiVersion: Swift.String?
            /// The minimum API version that is supported by the daemon
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/MinAPIVersion`.
            package var MinAPIVersion: Swift.String?
            /// The Git commit of the source code that was used to build the daemon
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/GitCommit`.
            package var GitCommit: Swift.String?
            /// The version Go used to compile the daemon, and the version of the Go
            /// runtime in use.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/GoVersion`.
            package var GoVersion: Swift.String?
            /// The operating system that the daemon is running on ("linux" or "windows")
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/Os`.
            package var Os: Swift.String?
            /// The architecture that the daemon is running on
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/Arch`.
            package var Arch: Swift.String?
            /// The kernel version (`uname -r`) that the daemon is running on.
            ///
            /// This field is omitted when empty.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/KernelVersion`.
            package var KernelVersion: Swift.String?
            /// Indicates if the daemon is started with experimental features enabled.
            ///
            /// This field is omitted when empty / false.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/Experimental`.
            package var Experimental: Swift.Bool?
            /// The date and time that the daemon was compiled.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemVersion/BuildTime`.
            package var BuildTime: Swift.String?
            /// Creates a new `SystemVersion`.
            ///
            /// - Parameters:
            ///   - Platform:
            ///   - Components: Information about system components
            ///   - Version: The version of the daemon
            ///   - ApiVersion: The default (and highest) API version that is supported by the daemon
            ///   - MinAPIVersion: The minimum API version that is supported by the daemon
            ///   - GitCommit: The Git commit of the source code that was used to build the daemon
            ///   - GoVersion: The version Go used to compile the daemon, and the version of the Go
            ///   - Os: The operating system that the daemon is running on ("linux" or "windows")
            ///   - Arch: The architecture that the daemon is running on
            ///   - KernelVersion: The kernel version (`uname -r`) that the daemon is running on.
            ///   - Experimental: Indicates if the daemon is started with experimental features enabled.
            ///   - BuildTime: The date and time that the daemon was compiled.
            package init(
                Platform: Components.Schemas.SystemVersion.PlatformPayload? = nil,
                Components: Components.Schemas.SystemVersion.ComponentsPayload? = nil,
                Version: Swift.String? = nil,
                ApiVersion: Swift.String? = nil,
                MinAPIVersion: Swift.String? = nil,
                GitCommit: Swift.String? = nil,
                GoVersion: Swift.String? = nil,
                Os: Swift.String? = nil,
                Arch: Swift.String? = nil,
                KernelVersion: Swift.String? = nil,
                Experimental: Swift.Bool? = nil,
                BuildTime: Swift.String? = nil
            ) {
                self.Platform = Platform
                self.Components = Components
                self.Version = Version
                self.ApiVersion = ApiVersion
                self.MinAPIVersion = MinAPIVersion
                self.GitCommit = GitCommit
                self.GoVersion = GoVersion
                self.Os = Os
                self.Arch = Arch
                self.KernelVersion = KernelVersion
                self.Experimental = Experimental
                self.BuildTime = BuildTime
            }
            package enum CodingKeys: String, CodingKey {
                case Platform
                case Components
                case Version
                case ApiVersion
                case MinAPIVersion
                case GitCommit
                case GoVersion
                case Os
                case Arch
                case KernelVersion
                case Experimental
                case BuildTime
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemInfo`.
        package struct SystemInfo: Codable, Hashable, Sendable {
            /// Unique identifier of the daemon.
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: The format of the ID itself is not part of the API, and
            /// > should not be considered stable.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/ID`.
            package var ID: Swift.String?
            /// Total number of containers on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Containers`.
            package var Containers: Swift.Int?
            /// Number of containers with status `"running"`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/ContainersRunning`.
            package var ContainersRunning: Swift.Int?
            /// Number of containers with status `"paused"`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/ContainersPaused`.
            package var ContainersPaused: Swift.Int?
            /// Number of containers with status `"stopped"`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/ContainersStopped`.
            package var ContainersStopped: Swift.Int?
            /// Total number of images on the host.
            ///
            /// Both _tagged_ and _untagged_ (dangling) images are counted.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Images`.
            package var Images: Swift.Int?
            /// Name of the storage driver in use.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Driver`.
            package var Driver: Swift.String?
            /// Information specific to the storage driver, provided as
            /// "label" / "value" pairs.
            ///
            /// This information is provided by the storage driver, and formatted
            /// in a way consistent with the output of `docker info` on the command
            /// line.
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: The information returned in this field, including the
            /// > formatting of values and labels, should not be considered stable,
            /// > and may change without notice.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/DriverStatus`.
            package var DriverStatus: [[Swift.String]]?
            /// Root directory of persistent Docker state.
            ///
            /// Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`
            /// on Windows.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/DockerRootDir`.
            package var DockerRootDir: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Plugins`.
            package var Plugins: Components.Schemas.PluginsInfo?
            /// Indicates if the host has memory limit support enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/MemoryLimit`.
            package var MemoryLimit: Swift.Bool?
            /// Indicates if the host has memory swap limit support enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/SwapLimit`.
            package var SwapLimit: Swift.Bool?
            /// Indicates if the host has kernel memory TCP limit support enabled. This
            /// field is omitted if not supported.
            ///
            /// Kernel memory TCP limits are not supported when using cgroups v2, which
            /// does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/KernelMemoryTCP`.
            package var KernelMemoryTCP: Swift.Bool?
            /// Indicates if CPU CFS(Completely Fair Scheduler) period is supported by
            /// the host.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/CpuCfsPeriod`.
            package var CpuCfsPeriod: Swift.Bool?
            /// Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by
            /// the host.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/CpuCfsQuota`.
            package var CpuCfsQuota: Swift.Bool?
            /// Indicates if CPU Shares limiting is supported by the host.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/CPUShares`.
            package var CPUShares: Swift.Bool?
            /// Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.
            ///
            /// See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/CPUSet`.
            package var CPUSet: Swift.Bool?
            /// Indicates if the host kernel has PID limit support enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/PidsLimit`.
            package var PidsLimit: Swift.Bool?
            /// Indicates if OOM killer disable is supported on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/OomKillDisable`.
            package var OomKillDisable: Swift.Bool?
            /// Indicates IPv4 forwarding is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/IPv4Forwarding`.
            package var IPv4Forwarding: Swift.Bool?
            /// Indicates if `bridge-nf-call-iptables` is available on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/BridgeNfIptables`.
            package var BridgeNfIptables: Swift.Bool?
            /// Indicates if `bridge-nf-call-ip6tables` is available on the host.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/BridgeNfIp6tables`.
            package var BridgeNfIp6tables: Swift.Bool?
            /// Indicates if the daemon is running in debug-mode / with debug-level
            /// logging enabled.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Debug`.
            package var Debug: Swift.Bool?
            /// The total number of file Descriptors in use by the daemon process.
            ///
            /// This information is only returned if debug-mode is enabled.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/NFd`.
            package var NFd: Swift.Int?
            /// The  number of goroutines that currently exist.
            ///
            /// This information is only returned if debug-mode is enabled.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/NGoroutines`.
            package var NGoroutines: Swift.Int?
            /// Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
            /// format with nano-seconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/SystemTime`.
            package var SystemTime: Swift.String?
            /// The logging driver to use as a default for new containers.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/LoggingDriver`.
            package var LoggingDriver: Swift.String?
            /// The driver to use for managing cgroups.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/CgroupDriver`.
            @frozen package enum CgroupDriverPayload: String, Codable, Hashable, Sendable {
                case cgroupfs = "cgroupfs"
                case systemd = "systemd"
                case none = "none"
            }
            /// The driver to use for managing cgroups.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/CgroupDriver`.
            package var CgroupDriver: Components.Schemas.SystemInfo.CgroupDriverPayload?
            /// The version of the cgroup.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/CgroupVersion`.
            @frozen package enum CgroupVersionPayload: String, Codable, Hashable, Sendable {
                case _1 = "1"
                case _2 = "2"
            }
            /// The version of the cgroup.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/CgroupVersion`.
            package var CgroupVersion: Components.Schemas.SystemInfo.CgroupVersionPayload?
            /// Number of event listeners subscribed.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/NEventsListener`.
            package var NEventsListener: Swift.Int?
            /// Kernel version of the host.
            ///
            /// On Linux, this information obtained from `uname`. On Windows this
            /// information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
            /// registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/KernelVersion`.
            package var KernelVersion: Swift.String?
            /// Name of the host's operating system, for example: "Ubuntu 24.04 LTS"
            /// or "Windows Server 2016 Datacenter"
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/OperatingSystem`.
            package var OperatingSystem: Swift.String?
            /// Version of the host's operating system
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: The information returned in this field, including its
            /// > very existence, and the formatting of values, should not be considered
            /// > stable, and may change without notice.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/OSVersion`.
            package var OSVersion: Swift.String?
            /// Generic type of the operating system of the host, as returned by the
            /// Go runtime (`GOOS`).
            ///
            /// Currently returned values are "linux" and "windows". A full list of
            /// possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/OSType`.
            package var OSType: Swift.String?
            /// Hardware architecture of the host, as returned by the Go runtime
            /// (`GOARCH`).
            ///
            /// A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Architecture`.
            package var Architecture: Swift.String?
            /// The number of logical CPUs usable by the daemon.
            ///
            /// The number of available CPUs is checked by querying the operating
            /// system when the daemon starts. Changes to operating system CPU
            /// allocation after the daemon is started are not reflected.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/NCPU`.
            package var NCPU: Swift.Int?
            /// Total amount of physical memory available on the host, in bytes.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/MemTotal`.
            package var MemTotal: Swift.Int64?
            /// Address / URL of the index server that is used for image search,
            /// and as a default for user authentication for Docker Hub and Docker Cloud.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/IndexServerAddress`.
            package var IndexServerAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemInfo/RegistryConfig`.
            package var RegistryConfig: Components.Schemas.RegistryServiceConfig?
            /// - Remark: Generated from `#/components/schemas/SystemInfo/GenericResources`.
            package var GenericResources: Components.Schemas.GenericResources?
            /// HTTP-proxy configured for the daemon. This value is obtained from the
            /// [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
            /// Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
            /// are masked in the API response.
            ///
            /// Containers do not automatically inherit this configuration.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/HttpProxy`.
            package var HttpProxy: Swift.String?
            /// HTTPS-proxy configured for the daemon. This value is obtained from the
            /// [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
            /// Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
            /// are masked in the API response.
            ///
            /// Containers do not automatically inherit this configuration.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/HttpsProxy`.
            package var HttpsProxy: Swift.String?
            /// Comma-separated list of domain extensions for which no proxy should be
            /// used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
            /// environment variable.
            ///
            /// Containers do not automatically inherit this configuration.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/NoProxy`.
            package var NoProxy: Swift.String?
            /// Hostname of the host.
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Name`.
            package var Name: Swift.String?
            /// User-defined labels (key/value metadata) as set on the daemon.
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: When part of a Swarm, nodes can both have _daemon_ labels,
            /// > set through the daemon configuration, and _node_ labels, set from a
            /// > manager node in the Swarm. Node labels are not included in this
            /// > field. Node labels can be retrieved using the `/nodes/(id)` endpoint
            /// > on a manager node in the Swarm.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Labels`.
            package var Labels: [Swift.String]?
            /// Indicates if experimental features are enabled on the daemon.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/ExperimentalBuild`.
            package var ExperimentalBuild: Swift.Bool?
            /// Version string of the daemon.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/ServerVersion`.
            package var ServerVersion: Swift.String?
            /// List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
            /// runtimes configured on the daemon. Keys hold the "name" used to
            /// reference the runtime.
            ///
            /// The Docker daemon relies on an OCI compliant runtime (invoked via the
            /// `containerd` daemon) as its interface to the Linux kernel namespaces,
            /// cgroups, and SELinux.
            ///
            /// The default runtime is `runc`, and automatically configured. Additional
            /// runtimes can be configured by the user and will be listed here.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Runtimes`.
            package struct RuntimesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Components.Schemas.Runtime]
                /// Creates a new `RuntimesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Components.Schemas.Runtime] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
            /// runtimes configured on the daemon. Keys hold the "name" used to
            /// reference the runtime.
            ///
            /// The Docker daemon relies on an OCI compliant runtime (invoked via the
            /// `containerd` daemon) as its interface to the Linux kernel namespaces,
            /// cgroups, and SELinux.
            ///
            /// The default runtime is `runc`, and automatically configured. Additional
            /// runtimes can be configured by the user and will be listed here.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Runtimes`.
            package var Runtimes: Components.Schemas.SystemInfo.RuntimesPayload?
            /// Name of the default OCI runtime that is used when starting containers.
            ///
            /// The default can be overridden per-container at create time.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/DefaultRuntime`.
            package var DefaultRuntime: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Swarm`.
            package var Swarm: Components.Schemas.SwarmInfo?
            /// Indicates if live restore is enabled.
            ///
            /// If enabled, containers are kept running when the daemon is shutdown
            /// or upon daemon start if running containers are detected.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/LiveRestoreEnabled`.
            package var LiveRestoreEnabled: Swift.Bool?
            /// Represents the isolation technology to use as a default for containers.
            /// The supported values are platform-specific.
            ///
            /// If no isolation value is specified on daemon start, on Windows client,
            /// the default is `hyperv`, and on Windows server, the default is `process`.
            ///
            /// This option is currently not used on other platforms.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Isolation`.
            @frozen package enum IsolationPayload: String, Codable, Hashable, Sendable {
                case _default = "default"
                case hyperv = "hyperv"
                case process = "process"
            }
            /// Represents the isolation technology to use as a default for containers.
            /// The supported values are platform-specific.
            ///
            /// If no isolation value is specified on daemon start, on Windows client,
            /// the default is `hyperv`, and on Windows server, the default is `process`.
            ///
            /// This option is currently not used on other platforms.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Isolation`.
            package var Isolation: Components.Schemas.SystemInfo.IsolationPayload?
            /// Name and, optional, path of the `docker-init` binary.
            ///
            /// If the path is omitted, the daemon searches the host's `$PATH` for the
            /// binary and uses the first result.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/InitBinary`.
            package var InitBinary: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemInfo/ContainerdCommit`.
            package var ContainerdCommit: Components.Schemas.Commit?
            /// - Remark: Generated from `#/components/schemas/SystemInfo/RuncCommit`.
            package var RuncCommit: Components.Schemas.Commit?
            /// - Remark: Generated from `#/components/schemas/SystemInfo/InitCommit`.
            package var InitCommit: Components.Schemas.Commit?
            /// List of security features that are enabled on the daemon, such as
            /// apparmor, seccomp, SELinux, user-namespaces (userns), rootless and
            /// no-new-privileges.
            ///
            /// Additional configuration options for each security feature may
            /// be present, and are included as a comma-separated list of key/value
            /// pairs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/SecurityOptions`.
            package var SecurityOptions: [Swift.String]?
            /// Reports a summary of the product license on the daemon.
            ///
            /// If a commercial license has been applied to the daemon, information
            /// such as number of nodes, and expiration are included.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/ProductLicense`.
            package var ProductLicense: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SystemInfo/DefaultAddressPoolsPayload`.
            package struct DefaultAddressPoolsPayloadPayload: Codable, Hashable, Sendable {
                /// The network address in CIDR format
                ///
                /// - Remark: Generated from `#/components/schemas/SystemInfo/DefaultAddressPoolsPayload/Base`.
                package var Base: Swift.String?
                /// The network pool size
                ///
                /// - Remark: Generated from `#/components/schemas/SystemInfo/DefaultAddressPoolsPayload/Size`.
                package var Size: Swift.Int?
                /// Creates a new `DefaultAddressPoolsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - Base: The network address in CIDR format
                ///   - Size: The network pool size
                package init(
                    Base: Swift.String? = nil,
                    Size: Swift.Int? = nil
                ) {
                    self.Base = Base
                    self.Size = Size
                }
                package enum CodingKeys: String, CodingKey {
                    case Base
                    case Size
                }
            }
            /// List of custom default address pools for local networks, which can be
            /// specified in the daemon.json file or dockerd option.
            ///
            /// Example: a Base "10.10.0.0/16" with Size 24 will define the set of 256
            /// 10.10.[0-255].0/24 address pools.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/DefaultAddressPools`.
            package typealias DefaultAddressPoolsPayload = [Components.Schemas.SystemInfo.DefaultAddressPoolsPayloadPayload]
            /// List of custom default address pools for local networks, which can be
            /// specified in the daemon.json file or dockerd option.
            ///
            /// Example: a Base "10.10.0.0/16" with Size 24 will define the set of 256
            /// 10.10.[0-255].0/24 address pools.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/DefaultAddressPools`.
            package var DefaultAddressPools: Components.Schemas.SystemInfo.DefaultAddressPoolsPayload?
            /// List of warnings / informational messages about missing features, or
            /// issues related to the daemon configuration.
            ///
            /// These messages can be printed by the client as information to the user.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Warnings`.
            package var Warnings: [Swift.String]?
            /// List of directories where (Container Device Interface) CDI
            /// specifications are located.
            ///
            /// These specifications define vendor-specific modifications to an OCI
            /// runtime specification for a container being created.
            ///
            /// An empty list indicates that CDI device injection is disabled.
            ///
            /// Note that since using CDI device injection requires the daemon to have
            /// experimental enabled. For non-experimental daemons an empty list will
            /// always be returned.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SystemInfo/CDISpecDirs`.
            package var CDISpecDirs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/SystemInfo/Containerd`.
            package var Containerd: Components.Schemas.ContainerdInfo?
            /// Creates a new `SystemInfo`.
            ///
            /// - Parameters:
            ///   - ID: Unique identifier of the daemon.
            ///   - Containers: Total number of containers on the host.
            ///   - ContainersRunning: Number of containers with status `"running"`.
            ///   - ContainersPaused: Number of containers with status `"paused"`.
            ///   - ContainersStopped: Number of containers with status `"stopped"`.
            ///   - Images: Total number of images on the host.
            ///   - Driver: Name of the storage driver in use.
            ///   - DriverStatus: Information specific to the storage driver, provided as
            ///   - DockerRootDir: Root directory of persistent Docker state.
            ///   - Plugins:
            ///   - MemoryLimit: Indicates if the host has memory limit support enabled.
            ///   - SwapLimit: Indicates if the host has memory swap limit support enabled.
            ///   - KernelMemoryTCP: Indicates if the host has kernel memory TCP limit support enabled. This
            ///   - CpuCfsPeriod: Indicates if CPU CFS(Completely Fair Scheduler) period is supported by
            ///   - CpuCfsQuota: Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by
            ///   - CPUShares: Indicates if CPU Shares limiting is supported by the host.
            ///   - CPUSet: Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.
            ///   - PidsLimit: Indicates if the host kernel has PID limit support enabled.
            ///   - OomKillDisable: Indicates if OOM killer disable is supported on the host.
            ///   - IPv4Forwarding: Indicates IPv4 forwarding is enabled.
            ///   - BridgeNfIptables: Indicates if `bridge-nf-call-iptables` is available on the host.
            ///   - BridgeNfIp6tables: Indicates if `bridge-nf-call-ip6tables` is available on the host.
            ///   - Debug: Indicates if the daemon is running in debug-mode / with debug-level
            ///   - NFd: The total number of file Descriptors in use by the daemon process.
            ///   - NGoroutines: The  number of goroutines that currently exist.
            ///   - SystemTime: Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
            ///   - LoggingDriver: The logging driver to use as a default for new containers.
            ///   - CgroupDriver: The driver to use for managing cgroups.
            ///   - CgroupVersion: The version of the cgroup.
            ///   - NEventsListener: Number of event listeners subscribed.
            ///   - KernelVersion: Kernel version of the host.
            ///   - OperatingSystem: Name of the host's operating system, for example: "Ubuntu 24.04 LTS"
            ///   - OSVersion: Version of the host's operating system
            ///   - OSType: Generic type of the operating system of the host, as returned by the
            ///   - Architecture: Hardware architecture of the host, as returned by the Go runtime
            ///   - NCPU: The number of logical CPUs usable by the daemon.
            ///   - MemTotal: Total amount of physical memory available on the host, in bytes.
            ///   - IndexServerAddress: Address / URL of the index server that is used for image search,
            ///   - RegistryConfig:
            ///   - GenericResources:
            ///   - HttpProxy: HTTP-proxy configured for the daemon. This value is obtained from the
            ///   - HttpsProxy: HTTPS-proxy configured for the daemon. This value is obtained from the
            ///   - NoProxy: Comma-separated list of domain extensions for which no proxy should be
            ///   - Name: Hostname of the host.
            ///   - Labels: User-defined labels (key/value metadata) as set on the daemon.
            ///   - ExperimentalBuild: Indicates if experimental features are enabled on the daemon.
            ///   - ServerVersion: Version string of the daemon.
            ///   - Runtimes: List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
            ///   - DefaultRuntime: Name of the default OCI runtime that is used when starting containers.
            ///   - Swarm:
            ///   - LiveRestoreEnabled: Indicates if live restore is enabled.
            ///   - Isolation: Represents the isolation technology to use as a default for containers.
            ///   - InitBinary: Name and, optional, path of the `docker-init` binary.
            ///   - ContainerdCommit:
            ///   - RuncCommit:
            ///   - InitCommit:
            ///   - SecurityOptions: List of security features that are enabled on the daemon, such as
            ///   - ProductLicense: Reports a summary of the product license on the daemon.
            ///   - DefaultAddressPools: List of custom default address pools for local networks, which can be
            ///   - Warnings: List of warnings / informational messages about missing features, or
            ///   - CDISpecDirs: List of directories where (Container Device Interface) CDI
            ///   - Containerd:
            package init(
                ID: Swift.String? = nil,
                Containers: Swift.Int? = nil,
                ContainersRunning: Swift.Int? = nil,
                ContainersPaused: Swift.Int? = nil,
                ContainersStopped: Swift.Int? = nil,
                Images: Swift.Int? = nil,
                Driver: Swift.String? = nil,
                DriverStatus: [[Swift.String]]? = nil,
                DockerRootDir: Swift.String? = nil,
                Plugins: Components.Schemas.PluginsInfo? = nil,
                MemoryLimit: Swift.Bool? = nil,
                SwapLimit: Swift.Bool? = nil,
                KernelMemoryTCP: Swift.Bool? = nil,
                CpuCfsPeriod: Swift.Bool? = nil,
                CpuCfsQuota: Swift.Bool? = nil,
                CPUShares: Swift.Bool? = nil,
                CPUSet: Swift.Bool? = nil,
                PidsLimit: Swift.Bool? = nil,
                OomKillDisable: Swift.Bool? = nil,
                IPv4Forwarding: Swift.Bool? = nil,
                BridgeNfIptables: Swift.Bool? = nil,
                BridgeNfIp6tables: Swift.Bool? = nil,
                Debug: Swift.Bool? = nil,
                NFd: Swift.Int? = nil,
                NGoroutines: Swift.Int? = nil,
                SystemTime: Swift.String? = nil,
                LoggingDriver: Swift.String? = nil,
                CgroupDriver: Components.Schemas.SystemInfo.CgroupDriverPayload? = nil,
                CgroupVersion: Components.Schemas.SystemInfo.CgroupVersionPayload? = nil,
                NEventsListener: Swift.Int? = nil,
                KernelVersion: Swift.String? = nil,
                OperatingSystem: Swift.String? = nil,
                OSVersion: Swift.String? = nil,
                OSType: Swift.String? = nil,
                Architecture: Swift.String? = nil,
                NCPU: Swift.Int? = nil,
                MemTotal: Swift.Int64? = nil,
                IndexServerAddress: Swift.String? = nil,
                RegistryConfig: Components.Schemas.RegistryServiceConfig? = nil,
                GenericResources: Components.Schemas.GenericResources? = nil,
                HttpProxy: Swift.String? = nil,
                HttpsProxy: Swift.String? = nil,
                NoProxy: Swift.String? = nil,
                Name: Swift.String? = nil,
                Labels: [Swift.String]? = nil,
                ExperimentalBuild: Swift.Bool? = nil,
                ServerVersion: Swift.String? = nil,
                Runtimes: Components.Schemas.SystemInfo.RuntimesPayload? = nil,
                DefaultRuntime: Swift.String? = nil,
                Swarm: Components.Schemas.SwarmInfo? = nil,
                LiveRestoreEnabled: Swift.Bool? = nil,
                Isolation: Components.Schemas.SystemInfo.IsolationPayload? = nil,
                InitBinary: Swift.String? = nil,
                ContainerdCommit: Components.Schemas.Commit? = nil,
                RuncCommit: Components.Schemas.Commit? = nil,
                InitCommit: Components.Schemas.Commit? = nil,
                SecurityOptions: [Swift.String]? = nil,
                ProductLicense: Swift.String? = nil,
                DefaultAddressPools: Components.Schemas.SystemInfo.DefaultAddressPoolsPayload? = nil,
                Warnings: [Swift.String]? = nil,
                CDISpecDirs: [Swift.String]? = nil,
                Containerd: Components.Schemas.ContainerdInfo? = nil
            ) {
                self.ID = ID
                self.Containers = Containers
                self.ContainersRunning = ContainersRunning
                self.ContainersPaused = ContainersPaused
                self.ContainersStopped = ContainersStopped
                self.Images = Images
                self.Driver = Driver
                self.DriverStatus = DriverStatus
                self.DockerRootDir = DockerRootDir
                self.Plugins = Plugins
                self.MemoryLimit = MemoryLimit
                self.SwapLimit = SwapLimit
                self.KernelMemoryTCP = KernelMemoryTCP
                self.CpuCfsPeriod = CpuCfsPeriod
                self.CpuCfsQuota = CpuCfsQuota
                self.CPUShares = CPUShares
                self.CPUSet = CPUSet
                self.PidsLimit = PidsLimit
                self.OomKillDisable = OomKillDisable
                self.IPv4Forwarding = IPv4Forwarding
                self.BridgeNfIptables = BridgeNfIptables
                self.BridgeNfIp6tables = BridgeNfIp6tables
                self.Debug = Debug
                self.NFd = NFd
                self.NGoroutines = NGoroutines
                self.SystemTime = SystemTime
                self.LoggingDriver = LoggingDriver
                self.CgroupDriver = CgroupDriver
                self.CgroupVersion = CgroupVersion
                self.NEventsListener = NEventsListener
                self.KernelVersion = KernelVersion
                self.OperatingSystem = OperatingSystem
                self.OSVersion = OSVersion
                self.OSType = OSType
                self.Architecture = Architecture
                self.NCPU = NCPU
                self.MemTotal = MemTotal
                self.IndexServerAddress = IndexServerAddress
                self.RegistryConfig = RegistryConfig
                self.GenericResources = GenericResources
                self.HttpProxy = HttpProxy
                self.HttpsProxy = HttpsProxy
                self.NoProxy = NoProxy
                self.Name = Name
                self.Labels = Labels
                self.ExperimentalBuild = ExperimentalBuild
                self.ServerVersion = ServerVersion
                self.Runtimes = Runtimes
                self.DefaultRuntime = DefaultRuntime
                self.Swarm = Swarm
                self.LiveRestoreEnabled = LiveRestoreEnabled
                self.Isolation = Isolation
                self.InitBinary = InitBinary
                self.ContainerdCommit = ContainerdCommit
                self.RuncCommit = RuncCommit
                self.InitCommit = InitCommit
                self.SecurityOptions = SecurityOptions
                self.ProductLicense = ProductLicense
                self.DefaultAddressPools = DefaultAddressPools
                self.Warnings = Warnings
                self.CDISpecDirs = CDISpecDirs
                self.Containerd = Containerd
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Containers
                case ContainersRunning
                case ContainersPaused
                case ContainersStopped
                case Images
                case Driver
                case DriverStatus
                case DockerRootDir
                case Plugins
                case MemoryLimit
                case SwapLimit
                case KernelMemoryTCP
                case CpuCfsPeriod
                case CpuCfsQuota
                case CPUShares
                case CPUSet
                case PidsLimit
                case OomKillDisable
                case IPv4Forwarding
                case BridgeNfIptables
                case BridgeNfIp6tables
                case Debug
                case NFd
                case NGoroutines
                case SystemTime
                case LoggingDriver
                case CgroupDriver
                case CgroupVersion
                case NEventsListener
                case KernelVersion
                case OperatingSystem
                case OSVersion
                case OSType
                case Architecture
                case NCPU
                case MemTotal
                case IndexServerAddress
                case RegistryConfig
                case GenericResources
                case HttpProxy
                case HttpsProxy
                case NoProxy
                case Name
                case Labels
                case ExperimentalBuild
                case ServerVersion
                case Runtimes
                case DefaultRuntime
                case Swarm
                case LiveRestoreEnabled
                case Isolation
                case InitBinary
                case ContainerdCommit
                case RuncCommit
                case InitCommit
                case SecurityOptions
                case ProductLicense
                case DefaultAddressPools
                case Warnings
                case CDISpecDirs
                case Containerd
            }
        }
        /// Information for connecting to the containerd instance that is used by the daemon.
        /// This is included for debugging purposes only.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ContainerdInfo`.
        package struct ContainerdInfo: Codable, Hashable, Sendable {
            /// The address of the containerd socket.
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerdInfo/Address`.
            package var Address: Swift.String?
            /// The namespaces that the daemon uses for running containers and
            /// plugins in containerd. These namespaces can be configured in the
            /// daemon configuration, and are considered to be used exclusively
            /// by the daemon, Tampering with the containerd instance may cause
            /// unexpected behavior.
            ///
            /// As these namespaces are considered to be exclusively accessed
            /// by the daemon, it is not recommended to change these values,
            /// or to change them to a value that is used by other systems,
            /// such as cri-containerd.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerdInfo/Namespaces`.
            package struct NamespacesPayload: Codable, Hashable, Sendable {
                /// The default containerd namespace used for containers managed
                /// by the daemon.
                ///
                /// The default namespace for containers is "moby", but will be
                /// suffixed with the `<uid>.<gid>` of the remapped `root` if
                /// user-namespaces are enabled and the containerd image-store
                /// is used.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ContainerdInfo/Namespaces/Containers`.
                package var Containers: Swift.String?
                /// The default containerd namespace used for plugins managed by
                /// the daemon.
                ///
                /// The default namespace for plugins is "plugins.moby", but will be
                /// suffixed with the `<uid>.<gid>` of the remapped `root` if
                /// user-namespaces are enabled and the containerd image-store
                /// is used.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ContainerdInfo/Namespaces/Plugins`.
                package var Plugins: Swift.String?
                /// Creates a new `NamespacesPayload`.
                ///
                /// - Parameters:
                ///   - Containers: The default containerd namespace used for containers managed
                ///   - Plugins: The default containerd namespace used for plugins managed by
                package init(
                    Containers: Swift.String? = nil,
                    Plugins: Swift.String? = nil
                ) {
                    self.Containers = Containers
                    self.Plugins = Plugins
                }
                package enum CodingKeys: String, CodingKey {
                    case Containers
                    case Plugins
                }
            }
            /// The namespaces that the daemon uses for running containers and
            /// plugins in containerd. These namespaces can be configured in the
            /// daemon configuration, and are considered to be used exclusively
            /// by the daemon, Tampering with the containerd instance may cause
            /// unexpected behavior.
            ///
            /// As these namespaces are considered to be exclusively accessed
            /// by the daemon, it is not recommended to change these values,
            /// or to change them to a value that is used by other systems,
            /// such as cri-containerd.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ContainerdInfo/Namespaces`.
            package var Namespaces: Components.Schemas.ContainerdInfo.NamespacesPayload?
            /// Creates a new `ContainerdInfo`.
            ///
            /// - Parameters:
            ///   - Address: The address of the containerd socket.
            ///   - Namespaces: The namespaces that the daemon uses for running containers and
            package init(
                Address: Swift.String? = nil,
                Namespaces: Components.Schemas.ContainerdInfo.NamespacesPayload? = nil
            ) {
                self.Address = Address
                self.Namespaces = Namespaces
            }
            package enum CodingKeys: String, CodingKey {
                case Address
                case Namespaces
            }
        }
        /// Available plugins per type.
        ///
        /// <p><br /></p>
        ///
        /// > **Note**: Only unmanaged (V1) plugins are included in this list.
        /// > V1 plugins are "lazily" loaded, and are not returned in this list
        /// > if there is no resource using the plugin.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/PluginsInfo`.
        package struct PluginsInfo: Codable, Hashable, Sendable {
            /// Names of available volume-drivers, and network-driver plugins.
            ///
            /// - Remark: Generated from `#/components/schemas/PluginsInfo/Volume`.
            package var Volume: [Swift.String]?
            /// Names of available network-drivers, and network-driver plugins.
            ///
            /// - Remark: Generated from `#/components/schemas/PluginsInfo/Network`.
            package var Network: [Swift.String]?
            /// Names of available authorization plugins.
            ///
            /// - Remark: Generated from `#/components/schemas/PluginsInfo/Authorization`.
            package var Authorization: [Swift.String]?
            /// Names of available logging-drivers, and logging-driver plugins.
            ///
            /// - Remark: Generated from `#/components/schemas/PluginsInfo/Log`.
            package var Log: [Swift.String]?
            /// Creates a new `PluginsInfo`.
            ///
            /// - Parameters:
            ///   - Volume: Names of available volume-drivers, and network-driver plugins.
            ///   - Network: Names of available network-drivers, and network-driver plugins.
            ///   - Authorization: Names of available authorization plugins.
            ///   - Log: Names of available logging-drivers, and logging-driver plugins.
            package init(
                Volume: [Swift.String]? = nil,
                Network: [Swift.String]? = nil,
                Authorization: [Swift.String]? = nil,
                Log: [Swift.String]? = nil
            ) {
                self.Volume = Volume
                self.Network = Network
                self.Authorization = Authorization
                self.Log = Log
            }
            package enum CodingKeys: String, CodingKey {
                case Volume
                case Network
                case Authorization
                case Log
            }
        }
        /// RegistryServiceConfig stores daemon registry services configuration.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RegistryServiceConfig`.
        package struct RegistryServiceConfig: Codable, Hashable, Sendable {
            /// List of IP ranges to which nondistributable artifacts can be pushed,
            /// using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).
            ///
            /// Some images (for example, Windows base images) contain artifacts
            /// whose distribution is restricted by license. When these images are
            /// pushed to a registry, restricted artifacts are not included.
            ///
            /// This configuration override this behavior, and enables the daemon to
            /// push nondistributable artifacts to all registries whose resolved IP
            /// address is within the subnet described by the CIDR syntax.
            ///
            /// This option is useful when pushing images containing
            /// nondistributable artifacts to a registry on an air-gapped network so
            /// hosts on that network can pull the images without connecting to
            /// another server.
            ///
            /// > **Warning**: Nondistributable artifacts typically have restrictions
            /// > on how and where they can be distributed and shared. Only use this
            /// > feature to push artifacts to private registries and ensure that you
            /// > are in compliance with any terms that cover redistributing
            /// > nondistributable artifacts.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RegistryServiceConfig/AllowNondistributableArtifactsCIDRs`.
            package var AllowNondistributableArtifactsCIDRs: [Swift.String]?
            /// List of registry hostnames to which nondistributable artifacts can be
            /// pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.
            ///
            /// Some images (for example, Windows base images) contain artifacts
            /// whose distribution is restricted by license. When these images are
            /// pushed to a registry, restricted artifacts are not included.
            ///
            /// This configuration override this behavior for the specified
            /// registries.
            ///
            /// This option is useful when pushing images containing
            /// nondistributable artifacts to a registry on an air-gapped network so
            /// hosts on that network can pull the images without connecting to
            /// another server.
            ///
            /// > **Warning**: Nondistributable artifacts typically have restrictions
            /// > on how and where they can be distributed and shared. Only use this
            /// > feature to push artifacts to private registries and ensure that you
            /// > are in compliance with any terms that cover redistributing
            /// > nondistributable artifacts.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RegistryServiceConfig/AllowNondistributableArtifactsHostnames`.
            package var AllowNondistributableArtifactsHostnames: [Swift.String]?
            /// List of IP ranges of insecure registries, using the CIDR syntax
            /// ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries
            /// accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates
            /// from unknown CAs) communication.
            ///
            /// By default, local registries (`127.0.0.0/8`) are configured as
            /// insecure. All other registries are secure. Communicating with an
            /// insecure registry is not possible if the daemon assumes that registry
            /// is secure.
            ///
            /// This configuration override this behavior, insecure communication with
            /// registries whose resolved IP address is within the subnet described by
            /// the CIDR syntax.
            ///
            /// Registries can also be marked insecure by hostname. Those registries
            /// are listed under `IndexConfigs` and have their `Secure` field set to
            /// `false`.
            ///
            /// > **Warning**: Using this option can be useful when running a local
            /// > registry, but introduces security vulnerabilities. This option
            /// > should therefore ONLY be used for testing purposes. For increased
            /// > security, users should add their CA to their system's list of trusted
            /// > CAs instead of enabling this option.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RegistryServiceConfig/InsecureRegistryCIDRs`.
            package var InsecureRegistryCIDRs: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/RegistryServiceConfig/IndexConfigs`.
            package struct IndexConfigsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Components.Schemas.IndexInfo?]
                /// Creates a new `IndexConfigsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Components.Schemas.IndexInfo?] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RegistryServiceConfig/IndexConfigs`.
            package var IndexConfigs: Components.Schemas.RegistryServiceConfig.IndexConfigsPayload?
            /// List of registry URLs that act as a mirror for the official
            /// (`docker.io`) registry.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RegistryServiceConfig/Mirrors`.
            package var Mirrors: [Swift.String]?
            /// Creates a new `RegistryServiceConfig`.
            ///
            /// - Parameters:
            ///   - AllowNondistributableArtifactsCIDRs: List of IP ranges to which nondistributable artifacts can be pushed,
            ///   - AllowNondistributableArtifactsHostnames: List of registry hostnames to which nondistributable artifacts can be
            ///   - InsecureRegistryCIDRs: List of IP ranges of insecure registries, using the CIDR syntax
            ///   - IndexConfigs:
            ///   - Mirrors: List of registry URLs that act as a mirror for the official
            package init(
                AllowNondistributableArtifactsCIDRs: [Swift.String]? = nil,
                AllowNondistributableArtifactsHostnames: [Swift.String]? = nil,
                InsecureRegistryCIDRs: [Swift.String]? = nil,
                IndexConfigs: Components.Schemas.RegistryServiceConfig.IndexConfigsPayload? = nil,
                Mirrors: [Swift.String]? = nil
            ) {
                self.AllowNondistributableArtifactsCIDRs = AllowNondistributableArtifactsCIDRs
                self.AllowNondistributableArtifactsHostnames = AllowNondistributableArtifactsHostnames
                self.InsecureRegistryCIDRs = InsecureRegistryCIDRs
                self.IndexConfigs = IndexConfigs
                self.Mirrors = Mirrors
            }
            package enum CodingKeys: String, CodingKey {
                case AllowNondistributableArtifactsCIDRs
                case AllowNondistributableArtifactsHostnames
                case InsecureRegistryCIDRs
                case IndexConfigs
                case Mirrors
            }
        }
        /// IndexInfo contains information about a registry.
        ///
        /// - Remark: Generated from `#/components/schemas/IndexInfo`.
        package struct IndexInfo: Codable, Hashable, Sendable {
            /// Name of the registry, such as "docker.io".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/IndexInfo/Name`.
            package var Name: Swift.String?
            /// List of mirrors, expressed as URIs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/IndexInfo/Mirrors`.
            package var Mirrors: [Swift.String]?
            /// Indicates if the registry is part of the list of insecure
            /// registries.
            ///
            /// If `false`, the registry is insecure. Insecure registries accept
            /// un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from
            /// unknown CAs) communication.
            ///
            /// > **Warning**: Insecure registries can be useful when running a local
            /// > registry. However, because its use creates security vulnerabilities
            /// > it should ONLY be enabled for testing purposes. For increased
            /// > security, users should add their CA to their system's list of
            /// > trusted CAs instead of enabling this option.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/IndexInfo/Secure`.
            package var Secure: Swift.Bool?
            /// Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/IndexInfo/Official`.
            package var Official: Swift.Bool?
            /// Creates a new `IndexInfo`.
            ///
            /// - Parameters:
            ///   - Name: Name of the registry, such as "docker.io".
            ///   - Mirrors: List of mirrors, expressed as URIs.
            ///   - Secure: Indicates if the registry is part of the list of insecure
            ///   - Official: Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
            package init(
                Name: Swift.String? = nil,
                Mirrors: [Swift.String]? = nil,
                Secure: Swift.Bool? = nil,
                Official: Swift.Bool? = nil
            ) {
                self.Name = Name
                self.Mirrors = Mirrors
                self.Secure = Secure
                self.Official = Official
            }
            package enum CodingKeys: String, CodingKey {
                case Name
                case Mirrors
                case Secure
                case Official
            }
        }
        /// Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)
        /// runtime.
        ///
        /// The runtime is invoked by the daemon via the `containerd` daemon. OCI
        /// runtimes act as an interface to the Linux kernel namespaces, cgroups,
        /// and SELinux.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Runtime`.
        package struct Runtime: Codable, Hashable, Sendable {
            /// Name and, optional, path, of the OCI executable binary.
            ///
            /// If the path is omitted, the daemon searches the host's `$PATH` for the
            /// binary and uses the first result.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Runtime/path`.
            package var path: Swift.String?
            /// List of command-line arguments to pass to the runtime when invoked.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Runtime/runtimeArgs`.
            package var runtimeArgs: [Swift.String]?
            /// Information specific to the runtime.
            ///
            /// While this API specification does not define data provided by runtimes,
            /// the following well-known properties may be provided by runtimes:
            ///
            /// `org.opencontainers.runtime-spec.features`: features structure as defined
            /// in the [OCI Runtime Specification](https://github.com/opencontainers/runtime-spec/blob/main/features.md),
            /// in a JSON string representation.
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: The information returned in this field, including the
            /// > formatting of values and labels, should not be considered stable,
            /// > and may change without notice.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Runtime/status`.
            package struct statusPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `statusPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Information specific to the runtime.
            ///
            /// While this API specification does not define data provided by runtimes,
            /// the following well-known properties may be provided by runtimes:
            ///
            /// `org.opencontainers.runtime-spec.features`: features structure as defined
            /// in the [OCI Runtime Specification](https://github.com/opencontainers/runtime-spec/blob/main/features.md),
            /// in a JSON string representation.
            ///
            /// <p><br /></p>
            ///
            /// > **Note**: The information returned in this field, including the
            /// > formatting of values and labels, should not be considered stable,
            /// > and may change without notice.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Runtime/status`.
            package var status: Components.Schemas.Runtime.statusPayload?
            /// Creates a new `Runtime`.
            ///
            /// - Parameters:
            ///   - path: Name and, optional, path, of the OCI executable binary.
            ///   - runtimeArgs: List of command-line arguments to pass to the runtime when invoked.
            ///   - status: Information specific to the runtime.
            package init(
                path: Swift.String? = nil,
                runtimeArgs: [Swift.String]? = nil,
                status: Components.Schemas.Runtime.statusPayload? = nil
            ) {
                self.path = path
                self.runtimeArgs = runtimeArgs
                self.status = status
            }
            package enum CodingKeys: String, CodingKey {
                case path
                case runtimeArgs
                case status
            }
        }
        /// Commit holds the Git-commit (SHA1) that a binary was built from, as
        /// reported in the version-string of external tools, such as `containerd`,
        /// or `runC`.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Commit`.
        package struct Commit: Codable, Hashable, Sendable {
            /// Actual commit ID of external tool.
            ///
            /// - Remark: Generated from `#/components/schemas/Commit/ID`.
            package var ID: Swift.String?
            /// Commit ID of external tool expected by dockerd as set at build time.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Commit/Expected`.
            package var Expected: Swift.String?
            /// Creates a new `Commit`.
            ///
            /// - Parameters:
            ///   - ID: Actual commit ID of external tool.
            ///   - Expected: Commit ID of external tool expected by dockerd as set at build time.
            package init(
                ID: Swift.String? = nil,
                Expected: Swift.String? = nil
            ) {
                self.ID = ID
                self.Expected = Expected
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Expected
            }
        }
        /// Represents generic information about swarm.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/SwarmInfo`.
        package struct SwarmInfo: Codable, Hashable, Sendable {
            /// Unique identifier of for this node in the swarm.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmInfo/NodeID`.
            package var NodeID: Swift.String?
            /// IP address at which this node can be reached by other nodes in the
            /// swarm.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmInfo/NodeAddr`.
            package var NodeAddr: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SwarmInfo/LocalNodeState`.
            package var LocalNodeState: Components.Schemas.LocalNodeState?
            /// - Remark: Generated from `#/components/schemas/SwarmInfo/ControlAvailable`.
            package var ControlAvailable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SwarmInfo/Error`.
            package var _Error: Swift.String?
            /// List of ID's and addresses of other managers in the swarm.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmInfo/RemoteManagers`.
            package var RemoteManagers: [Components.Schemas.PeerNode]?
            /// Total number of nodes in the swarm.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmInfo/Nodes`.
            package var Nodes: Swift.Int?
            /// Total number of managers in the swarm.
            ///
            /// - Remark: Generated from `#/components/schemas/SwarmInfo/Managers`.
            package var Managers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SwarmInfo/Cluster`.
            package var Cluster: Components.Schemas.ClusterInfo?
            /// Creates a new `SwarmInfo`.
            ///
            /// - Parameters:
            ///   - NodeID: Unique identifier of for this node in the swarm.
            ///   - NodeAddr: IP address at which this node can be reached by other nodes in the
            ///   - LocalNodeState:
            ///   - ControlAvailable:
            ///   - _Error:
            ///   - RemoteManagers: List of ID's and addresses of other managers in the swarm.
            ///   - Nodes: Total number of nodes in the swarm.
            ///   - Managers: Total number of managers in the swarm.
            ///   - Cluster:
            package init(
                NodeID: Swift.String? = nil,
                NodeAddr: Swift.String? = nil,
                LocalNodeState: Components.Schemas.LocalNodeState? = nil,
                ControlAvailable: Swift.Bool? = nil,
                _Error: Swift.String? = nil,
                RemoteManagers: [Components.Schemas.PeerNode]? = nil,
                Nodes: Swift.Int? = nil,
                Managers: Swift.Int? = nil,
                Cluster: Components.Schemas.ClusterInfo? = nil
            ) {
                self.NodeID = NodeID
                self.NodeAddr = NodeAddr
                self.LocalNodeState = LocalNodeState
                self.ControlAvailable = ControlAvailable
                self._Error = _Error
                self.RemoteManagers = RemoteManagers
                self.Nodes = Nodes
                self.Managers = Managers
                self.Cluster = Cluster
            }
            package enum CodingKeys: String, CodingKey {
                case NodeID
                case NodeAddr
                case LocalNodeState
                case ControlAvailable
                case _Error = "Error"
                case RemoteManagers
                case Nodes
                case Managers
                case Cluster
            }
        }
        /// Current local status of this node.
        ///
        /// - Remark: Generated from `#/components/schemas/LocalNodeState`.
        @frozen package enum LocalNodeState: String, Codable, Hashable, Sendable {
            case _empty = ""
            case inactive = "inactive"
            case pending = "pending"
            case active = "active"
            case error = "error"
            case locked = "locked"
        }
        /// Represents a peer-node in the swarm
        ///
        /// - Remark: Generated from `#/components/schemas/PeerNode`.
        package struct PeerNode: Codable, Hashable, Sendable {
            /// Unique identifier of for this node in the swarm.
            ///
            /// - Remark: Generated from `#/components/schemas/PeerNode/NodeID`.
            package var NodeID: Swift.String?
            /// IP address and ports at which this node can be reached.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PeerNode/Addr`.
            package var Addr: Swift.String?
            /// Creates a new `PeerNode`.
            ///
            /// - Parameters:
            ///   - NodeID: Unique identifier of for this node in the swarm.
            ///   - Addr: IP address and ports at which this node can be reached.
            package init(
                NodeID: Swift.String? = nil,
                Addr: Swift.String? = nil
            ) {
                self.NodeID = NodeID
                self.Addr = Addr
            }
            package enum CodingKeys: String, CodingKey {
                case NodeID
                case Addr
            }
        }
        /// Specifies how a service should be attached to a particular network.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/NetworkAttachmentConfig`.
        package struct NetworkAttachmentConfig: Codable, Hashable, Sendable {
            /// The target network for attachment. Must be a network name or ID.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkAttachmentConfig/Target`.
            package var Target: Swift.String?
            /// Discoverable alternate names for the service on this network.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkAttachmentConfig/Aliases`.
            package var Aliases: [Swift.String]?
            /// Driver attachment options for the network target.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkAttachmentConfig/DriverOpts`.
            package struct DriverOptsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `DriverOptsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Driver attachment options for the network target.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/NetworkAttachmentConfig/DriverOpts`.
            package var DriverOpts: Components.Schemas.NetworkAttachmentConfig.DriverOptsPayload?
            /// Creates a new `NetworkAttachmentConfig`.
            ///
            /// - Parameters:
            ///   - Target: The target network for attachment. Must be a network name or ID.
            ///   - Aliases: Discoverable alternate names for the service on this network.
            ///   - DriverOpts: Driver attachment options for the network target.
            package init(
                Target: Swift.String? = nil,
                Aliases: [Swift.String]? = nil,
                DriverOpts: Components.Schemas.NetworkAttachmentConfig.DriverOptsPayload? = nil
            ) {
                self.Target = Target
                self.Aliases = Aliases
                self.DriverOpts = DriverOpts
            }
            package enum CodingKeys: String, CodingKey {
                case Target
                case Aliases
                case DriverOpts
            }
        }
        /// Actor describes something that generates events, like a container, network,
        /// or a volume.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EventActor`.
        package struct EventActor: Codable, Hashable, Sendable {
            /// The ID of the object emitting the event
            ///
            /// - Remark: Generated from `#/components/schemas/EventActor/ID`.
            package var ID: Swift.String?
            /// Various key/value attributes of the object, depending on its type.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EventActor/Attributes`.
            package struct AttributesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `AttributesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                package init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                package init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                package func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Various key/value attributes of the object, depending on its type.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EventActor/Attributes`.
            package var Attributes: Components.Schemas.EventActor.AttributesPayload?
            /// Creates a new `EventActor`.
            ///
            /// - Parameters:
            ///   - ID: The ID of the object emitting the event
            ///   - Attributes: Various key/value attributes of the object, depending on its type.
            package init(
                ID: Swift.String? = nil,
                Attributes: Components.Schemas.EventActor.AttributesPayload? = nil
            ) {
                self.ID = ID
                self.Attributes = Attributes
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Attributes
            }
        }
        /// EventMessage represents the information an event contains.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EventMessage`.
        package struct EventMessage: Codable, Hashable, Sendable {
            /// The type of object emitting the event
            ///
            /// - Remark: Generated from `#/components/schemas/EventMessage/Type`.
            @frozen package enum _TypePayload: String, Codable, Hashable, Sendable {
                case builder = "builder"
                case config = "config"
                case container = "container"
                case daemon = "daemon"
                case image = "image"
                case network = "network"
                case node = "node"
                case plugin = "plugin"
                case secret = "secret"
                case service = "service"
                case volume = "volume"
            }
            /// The type of object emitting the event
            ///
            /// - Remark: Generated from `#/components/schemas/EventMessage/Type`.
            package var _Type: Components.Schemas.EventMessage._TypePayload?
            /// The type of event
            ///
            /// - Remark: Generated from `#/components/schemas/EventMessage/Action`.
            package var Action: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EventMessage/Actor`.
            package var Actor: Components.Schemas.EventActor?
            /// Scope of the event. Engine events are `local` scope. Cluster (Swarm)
            /// events are `swarm` scope.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EventMessage/scope`.
            @frozen package enum scopePayload: String, Codable, Hashable, Sendable {
                case local = "local"
                case swarm = "swarm"
            }
            /// Scope of the event. Engine events are `local` scope. Cluster (Swarm)
            /// events are `swarm` scope.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EventMessage/scope`.
            package var scope: Components.Schemas.EventMessage.scopePayload?
            /// Timestamp of event
            ///
            /// - Remark: Generated from `#/components/schemas/EventMessage/time`.
            package var time: Swift.Int64?
            /// Timestamp of event, with nanosecond accuracy
            ///
            /// - Remark: Generated from `#/components/schemas/EventMessage/timeNano`.
            package var timeNano: Swift.Int64?
            /// Creates a new `EventMessage`.
            ///
            /// - Parameters:
            ///   - _Type: The type of object emitting the event
            ///   - Action: The type of event
            ///   - Actor:
            ///   - scope: Scope of the event. Engine events are `local` scope. Cluster (Swarm)
            ///   - time: Timestamp of event
            ///   - timeNano: Timestamp of event, with nanosecond accuracy
            package init(
                _Type: Components.Schemas.EventMessage._TypePayload? = nil,
                Action: Swift.String? = nil,
                Actor: Components.Schemas.EventActor? = nil,
                scope: Components.Schemas.EventMessage.scopePayload? = nil,
                time: Swift.Int64? = nil,
                timeNano: Swift.Int64? = nil
            ) {
                self._Type = _Type
                self.Action = Action
                self.Actor = Actor
                self.scope = scope
                self.time = time
                self.timeNano = timeNano
            }
            package enum CodingKeys: String, CodingKey {
                case _Type = "Type"
                case Action
                case Actor
                case scope
                case time
                case timeNano
            }
        }
        /// A descriptor struct containing digest, media type, and size, as defined in
        /// the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/OCIDescriptor`.
        package struct OCIDescriptor: Codable, Hashable, Sendable {
            /// The media type of the object this schema refers to.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/OCIDescriptor/mediaType`.
            package var mediaType: Swift.String?
            /// The digest of the targeted content.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/OCIDescriptor/digest`.
            package var digest: Swift.String?
            /// The size in bytes of the blob.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/OCIDescriptor/size`.
            package var size: Swift.Int64?
            /// Creates a new `OCIDescriptor`.
            ///
            /// - Parameters:
            ///   - mediaType: The media type of the object this schema refers to.
            ///   - digest: The digest of the targeted content.
            ///   - size: The size in bytes of the blob.
            package init(
                mediaType: Swift.String? = nil,
                digest: Swift.String? = nil,
                size: Swift.Int64? = nil
            ) {
                self.mediaType = mediaType
                self.digest = digest
                self.size = size
            }
            package enum CodingKeys: String, CodingKey {
                case mediaType
                case digest
                case size
            }
        }
        /// Describes the platform which the image in the manifest runs on, as defined
        /// in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/OCIPlatform`.
        package struct OCIPlatform: Codable, Hashable, Sendable {
            /// The CPU architecture, for example `amd64` or `ppc64`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/OCIPlatform/architecture`.
            package var architecture: Swift.String?
            /// The operating system, for example `linux` or `windows`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/OCIPlatform/os`.
            package var os: Swift.String?
            /// Optional field specifying the operating system version, for example on
            /// Windows `10.0.19041.1165`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/OCIPlatform/os.version`.
            package var os_period_version: Swift.String?
            /// Optional field specifying an array of strings, each listing a required
            /// OS feature (for example on Windows `win32k`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/OCIPlatform/os.features`.
            package var os_period_features: [Swift.String]?
            /// Optional field specifying a variant of the CPU, for example `v7` to
            /// specify ARMv7 when architecture is `arm`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/OCIPlatform/variant`.
            package var variant: Swift.String?
            /// Creates a new `OCIPlatform`.
            ///
            /// - Parameters:
            ///   - architecture: The CPU architecture, for example `amd64` or `ppc64`.
            ///   - os: The operating system, for example `linux` or `windows`.
            ///   - os_period_version: Optional field specifying the operating system version, for example on
            ///   - os_period_features: Optional field specifying an array of strings, each listing a required
            ///   - variant: Optional field specifying a variant of the CPU, for example `v7` to
            package init(
                architecture: Swift.String? = nil,
                os: Swift.String? = nil,
                os_period_version: Swift.String? = nil,
                os_period_features: [Swift.String]? = nil,
                variant: Swift.String? = nil
            ) {
                self.architecture = architecture
                self.os = os
                self.os_period_version = os_period_version
                self.os_period_features = os_period_features
                self.variant = variant
            }
            package enum CodingKeys: String, CodingKey {
                case architecture
                case os
                case os_period_version = "os.version"
                case os_period_features = "os.features"
                case variant
            }
        }
        /// Describes the result obtained from contacting the registry to retrieve
        /// image metadata.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/DistributionInspect`.
        package struct DistributionInspect: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DistributionInspect/Descriptor`.
            package var Descriptor: Components.Schemas.OCIDescriptor
            /// An array containing all platforms supported by the image.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/DistributionInspect/Platforms`.
            package var Platforms: [Components.Schemas.OCIPlatform]
            /// Creates a new `DistributionInspect`.
            ///
            /// - Parameters:
            ///   - Descriptor:
            ///   - Platforms: An array containing all platforms supported by the image.
            package init(
                Descriptor: Components.Schemas.OCIDescriptor,
                Platforms: [Components.Schemas.OCIPlatform]
            ) {
                self.Descriptor = Descriptor
                self.Platforms = Platforms
            }
            package enum CodingKeys: String, CodingKey {
                case Descriptor
                case Platforms
            }
        }
        /// Options and information specific to, and only present on, Swarm CSI
        /// cluster volumes.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ClusterVolume`.
        package struct ClusterVolume: Codable, Hashable, Sendable {
            /// The Swarm ID of this volume. Because cluster volumes are Swarm
            /// objects, they have an ID, unlike non-cluster volumes. This ID can
            /// be used to refer to the Volume instead of the name.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/ID`.
            package var ID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/Version`.
            package var Version: Components.Schemas.ObjectVersion?
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/CreatedAt`.
            package var CreatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/UpdatedAt`.
            package var UpdatedAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/Spec`.
            package var Spec: Components.Schemas.ClusterVolumeSpec?
            /// Information about the global status of the volume.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/Info`.
            package struct InfoPayload: Codable, Hashable, Sendable {
                /// The capacity of the volume in bytes. A value of 0 indicates that
                /// the capacity is unknown.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/Info/CapacityBytes`.
                package var CapacityBytes: Swift.Int64?
                /// A map of strings to strings returned from the storage plugin when
                /// the volume is created.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/Info/VolumeContext`.
                package struct VolumeContextPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `VolumeContextPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// A map of strings to strings returned from the storage plugin when
                /// the volume is created.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/Info/VolumeContext`.
                package var VolumeContext: Components.Schemas.ClusterVolume.InfoPayload.VolumeContextPayload?
                /// The ID of the volume as returned by the CSI storage plugin. This
                /// is distinct from the volume's ID as provided by Docker. This ID
                /// is never used by the user when communicating with Docker to refer
                /// to this volume. If the ID is blank, then the Volume has not been
                /// successfully created in the plugin yet.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/Info/VolumeID`.
                package var VolumeID: Swift.String?
                /// The topology this volume is actually accessible from.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/Info/AccessibleTopology`.
                package var AccessibleTopology: [Components.Schemas.Topology]?
                /// Creates a new `InfoPayload`.
                ///
                /// - Parameters:
                ///   - CapacityBytes: The capacity of the volume in bytes. A value of 0 indicates that
                ///   - VolumeContext: A map of strings to strings returned from the storage plugin when
                ///   - VolumeID: The ID of the volume as returned by the CSI storage plugin. This
                ///   - AccessibleTopology: The topology this volume is actually accessible from.
                package init(
                    CapacityBytes: Swift.Int64? = nil,
                    VolumeContext: Components.Schemas.ClusterVolume.InfoPayload.VolumeContextPayload? = nil,
                    VolumeID: Swift.String? = nil,
                    AccessibleTopology: [Components.Schemas.Topology]? = nil
                ) {
                    self.CapacityBytes = CapacityBytes
                    self.VolumeContext = VolumeContext
                    self.VolumeID = VolumeID
                    self.AccessibleTopology = AccessibleTopology
                }
                package enum CodingKeys: String, CodingKey {
                    case CapacityBytes
                    case VolumeContext
                    case VolumeID
                    case AccessibleTopology
                }
            }
            /// Information about the global status of the volume.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/Info`.
            package var Info: Components.Schemas.ClusterVolume.InfoPayload?
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/PublishStatusPayload`.
            package struct PublishStatusPayloadPayload: Codable, Hashable, Sendable {
                /// The ID of the Swarm node the volume is published on.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/PublishStatusPayload/NodeID`.
                package var NodeID: Swift.String?
                /// The published state of the volume.
                /// * `pending-publish` The volume should be published to this node, but the call to the controller plugin to do so has not yet been successfully completed.
                /// * `published` The volume is published successfully to the node.
                /// * `pending-node-unpublish` The volume should be unpublished from the node, and the manager is awaiting confirmation from the worker that it has done so.
                /// * `pending-controller-unpublish` The volume is successfully unpublished from the node, but has not yet been successfully unpublished on the controller.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/PublishStatusPayload/State`.
                @frozen package enum StatePayload: String, Codable, Hashable, Sendable {
                    case pending_hyphen_publish = "pending-publish"
                    case published = "published"
                    case pending_hyphen_node_hyphen_unpublish = "pending-node-unpublish"
                    case pending_hyphen_controller_hyphen_unpublish = "pending-controller-unpublish"
                }
                /// The published state of the volume.
                /// * `pending-publish` The volume should be published to this node, but the call to the controller plugin to do so has not yet been successfully completed.
                /// * `published` The volume is published successfully to the node.
                /// * `pending-node-unpublish` The volume should be unpublished from the node, and the manager is awaiting confirmation from the worker that it has done so.
                /// * `pending-controller-unpublish` The volume is successfully unpublished from the node, but has not yet been successfully unpublished on the controller.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/PublishStatusPayload/State`.
                package var State: Components.Schemas.ClusterVolume.PublishStatusPayloadPayload.StatePayload?
                /// A map of strings to strings returned by the CSI controller
                /// plugin when a volume is published.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/PublishStatusPayload/PublishContext`.
                package struct PublishContextPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Swift.String]
                    /// Creates a new `PublishContextPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// A map of strings to strings returned by the CSI controller
                /// plugin when a volume is published.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolume/PublishStatusPayload/PublishContext`.
                package var PublishContext: Components.Schemas.ClusterVolume.PublishStatusPayloadPayload.PublishContextPayload?
                /// Creates a new `PublishStatusPayloadPayload`.
                ///
                /// - Parameters:
                ///   - NodeID: The ID of the Swarm node the volume is published on.
                ///   - State: The published state of the volume.
                ///   - PublishContext: A map of strings to strings returned by the CSI controller
                package init(
                    NodeID: Swift.String? = nil,
                    State: Components.Schemas.ClusterVolume.PublishStatusPayloadPayload.StatePayload? = nil,
                    PublishContext: Components.Schemas.ClusterVolume.PublishStatusPayloadPayload.PublishContextPayload? = nil
                ) {
                    self.NodeID = NodeID
                    self.State = State
                    self.PublishContext = PublishContext
                }
                package enum CodingKeys: String, CodingKey {
                    case NodeID
                    case State
                    case PublishContext
                }
            }
            /// The status of the volume as it pertains to its publishing and use on
            /// specific nodes
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/PublishStatus`.
            package typealias PublishStatusPayload = [Components.Schemas.ClusterVolume.PublishStatusPayloadPayload]
            /// The status of the volume as it pertains to its publishing and use on
            /// specific nodes
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolume/PublishStatus`.
            package var PublishStatus: Components.Schemas.ClusterVolume.PublishStatusPayload?
            /// Creates a new `ClusterVolume`.
            ///
            /// - Parameters:
            ///   - ID: The Swarm ID of this volume. Because cluster volumes are Swarm
            ///   - Version:
            ///   - CreatedAt:
            ///   - UpdatedAt:
            ///   - Spec:
            ///   - Info: Information about the global status of the volume.
            ///   - PublishStatus: The status of the volume as it pertains to its publishing and use on
            package init(
                ID: Swift.String? = nil,
                Version: Components.Schemas.ObjectVersion? = nil,
                CreatedAt: Swift.String? = nil,
                UpdatedAt: Swift.String? = nil,
                Spec: Components.Schemas.ClusterVolumeSpec? = nil,
                Info: Components.Schemas.ClusterVolume.InfoPayload? = nil,
                PublishStatus: Components.Schemas.ClusterVolume.PublishStatusPayload? = nil
            ) {
                self.ID = ID
                self.Version = Version
                self.CreatedAt = CreatedAt
                self.UpdatedAt = UpdatedAt
                self.Spec = Spec
                self.Info = Info
                self.PublishStatus = PublishStatus
            }
            package enum CodingKeys: String, CodingKey {
                case ID
                case Version
                case CreatedAt
                case UpdatedAt
                case Spec
                case Info
                case PublishStatus
            }
        }
        /// Cluster-specific options used to create the volume.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec`.
        package struct ClusterVolumeSpec: Codable, Hashable, Sendable {
            /// Group defines the volume group of this volume. Volumes belonging to
            /// the same group can be referred to by group name when creating
            /// Services.  Referring to a volume by group instructs Swarm to treat
            /// volumes in that group interchangeably for the purpose of scheduling.
            /// Volumes with an empty string for a group technically all belong to
            /// the same, emptystring group.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/Group`.
            package var Group: Swift.String?
            /// Defines how the volume is used by tasks.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode`.
            package struct AccessModePayload: Codable, Hashable, Sendable {
                /// The set of nodes this volume can be used on at one time.
                /// - `single` The volume may only be scheduled to one node at a time.
                /// - `multi` the volume may be scheduled to any supported number of nodes at a time.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/Scope`.
                @frozen package enum ScopePayload: String, Codable, Hashable, Sendable {
                    case single = "single"
                    case multi = "multi"
                }
                /// The set of nodes this volume can be used on at one time.
                /// - `single` The volume may only be scheduled to one node at a time.
                /// - `multi` the volume may be scheduled to any supported number of nodes at a time.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/Scope`.
                package var Scope: Components.Schemas.ClusterVolumeSpec.AccessModePayload.ScopePayload?
                /// The number and way that different tasks can use this volume
                /// at one time.
                /// - `none` The volume may only be used by one task at a time.
                /// - `readonly` The volume may be used by any number of tasks, but they all must mount the volume as readonly
                /// - `onewriter` The volume may be used by any number of tasks, but only one may mount it as read/write.
                /// - `all` The volume may have any number of readers and writers.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/Sharing`.
                @frozen package enum SharingPayload: String, Codable, Hashable, Sendable {
                    case none = "none"
                    case readonly = "readonly"
                    case onewriter = "onewriter"
                    case all = "all"
                }
                /// The number and way that different tasks can use this volume
                /// at one time.
                /// - `none` The volume may only be used by one task at a time.
                /// - `readonly` The volume may be used by any number of tasks, but they all must mount the volume as readonly
                /// - `onewriter` The volume may be used by any number of tasks, but only one may mount it as read/write.
                /// - `all` The volume may have any number of readers and writers.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/Sharing`.
                package var Sharing: Components.Schemas.ClusterVolumeSpec.AccessModePayload.SharingPayload?
                /// Options for using this volume as a Mount-type volume.
                ///
                ///     Either MountVolume or BlockVolume, but not both, must be
                ///     present.
                ///   properties:
                ///     FsType:
                ///       type: "string"
                ///       description: |
                ///         Specifies the filesystem type for the mount volume.
                ///         Optional.
                ///     MountFlags:
                ///       type: "array"
                ///       description: |
                ///         Flags to pass when mounting the volume. Optional.
                ///       items:
                ///         type: "string"
                /// BlockVolume:
                ///   type: "object"
                ///   description: |
                ///     Options for using this volume as a Block-type volume.
                ///     Intentionally empty.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/MountVolume`.
                package var MountVolume: OpenAPIRuntime.OpenAPIObjectContainer?
                /// One cluster volume secret entry. Defines a key-value pair that
                /// is passed to the plugin.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/SecretsPayload`.
                package struct SecretsPayloadPayload: Codable, Hashable, Sendable {
                    /// Key is the name of the key of the key-value pair passed to
                    /// the plugin.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/SecretsPayload/Key`.
                    package var Key: Swift.String?
                    /// Secret is the swarm Secret object from which to read data.
                    /// This can be a Secret name or ID. The Secret data is
                    /// retrieved by swarm and used as the value of the key-value
                    /// pair passed to the plugin.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/SecretsPayload/Secret`.
                    package var Secret: Swift.String?
                    /// Creates a new `SecretsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - Key: Key is the name of the key of the key-value pair passed to
                    ///   - Secret: Secret is the swarm Secret object from which to read data.
                    package init(
                        Key: Swift.String? = nil,
                        Secret: Swift.String? = nil
                    ) {
                        self.Key = Key
                        self.Secret = Secret
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Key
                        case Secret
                    }
                }
                /// Swarm Secrets that are passed to the CSI storage plugin when
                /// operating on this volume.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/Secrets`.
                package typealias SecretsPayload = [Components.Schemas.ClusterVolumeSpec.AccessModePayload.SecretsPayloadPayload]
                /// Swarm Secrets that are passed to the CSI storage plugin when
                /// operating on this volume.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/Secrets`.
                package var Secrets: Components.Schemas.ClusterVolumeSpec.AccessModePayload.SecretsPayload?
                /// Requirements for the accessible topology of the volume. These
                /// fields are optional. For an in-depth description of what these
                /// fields mean, see the CSI specification.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/AccessibilityRequirements`.
                package struct AccessibilityRequirementsPayload: Codable, Hashable, Sendable {
                    /// A list of required topologies, at least one of which the
                    /// volume must be accessible from.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/AccessibilityRequirements/Requisite`.
                    package var Requisite: [Components.Schemas.Topology]?
                    /// A list of topologies that the volume should attempt to be
                    /// provisioned in.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/AccessibilityRequirements/Preferred`.
                    package var Preferred: [Components.Schemas.Topology]?
                    /// Creates a new `AccessibilityRequirementsPayload`.
                    ///
                    /// - Parameters:
                    ///   - Requisite: A list of required topologies, at least one of which the
                    ///   - Preferred: A list of topologies that the volume should attempt to be
                    package init(
                        Requisite: [Components.Schemas.Topology]? = nil,
                        Preferred: [Components.Schemas.Topology]? = nil
                    ) {
                        self.Requisite = Requisite
                        self.Preferred = Preferred
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Requisite
                        case Preferred
                    }
                }
                /// Requirements for the accessible topology of the volume. These
                /// fields are optional. For an in-depth description of what these
                /// fields mean, see the CSI specification.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/AccessibilityRequirements`.
                package var AccessibilityRequirements: Components.Schemas.ClusterVolumeSpec.AccessModePayload.AccessibilityRequirementsPayload?
                /// The desired capacity that the volume should be created with. If
                /// empty, the plugin will decide the capacity.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/CapacityRange`.
                package struct CapacityRangePayload: Codable, Hashable, Sendable {
                    /// The volume must be at least this big. The value of 0
                    /// indicates an unspecified minimum
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/CapacityRange/RequiredBytes`.
                    package var RequiredBytes: Swift.Int64?
                    /// The volume must not be bigger than this. The value of 0
                    /// indicates an unspecified maximum.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/CapacityRange/LimitBytes`.
                    package var LimitBytes: Swift.Int64?
                    /// Creates a new `CapacityRangePayload`.
                    ///
                    /// - Parameters:
                    ///   - RequiredBytes: The volume must be at least this big. The value of 0
                    ///   - LimitBytes: The volume must not be bigger than this. The value of 0
                    package init(
                        RequiredBytes: Swift.Int64? = nil,
                        LimitBytes: Swift.Int64? = nil
                    ) {
                        self.RequiredBytes = RequiredBytes
                        self.LimitBytes = LimitBytes
                    }
                    package enum CodingKeys: String, CodingKey {
                        case RequiredBytes
                        case LimitBytes
                    }
                }
                /// The desired capacity that the volume should be created with. If
                /// empty, the plugin will decide the capacity.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/CapacityRange`.
                package var CapacityRange: Components.Schemas.ClusterVolumeSpec.AccessModePayload.CapacityRangePayload?
                /// The availability of the volume for use in tasks.
                /// - `active` The volume is fully available for scheduling on the cluster
                /// - `pause` No new workloads should use the volume, but existing workloads are not stopped.
                /// - `drain` All workloads using this volume should be stopped and rescheduled, and no new ones should be started.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/Availability`.
                @frozen package enum AvailabilityPayload: String, Codable, Hashable, Sendable {
                    case active = "active"
                    case pause = "pause"
                    case drain = "drain"
                }
                /// The availability of the volume for use in tasks.
                /// - `active` The volume is fully available for scheduling on the cluster
                /// - `pause` No new workloads should use the volume, but existing workloads are not stopped.
                /// - `drain` All workloads using this volume should be stopped and rescheduled, and no new ones should be started.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode/Availability`.
                package var Availability: Components.Schemas.ClusterVolumeSpec.AccessModePayload.AvailabilityPayload?
                /// Creates a new `AccessModePayload`.
                ///
                /// - Parameters:
                ///   - Scope: The set of nodes this volume can be used on at one time.
                ///   - Sharing: The number and way that different tasks can use this volume
                ///   - MountVolume: Options for using this volume as a Mount-type volume.
                ///   - Secrets: Swarm Secrets that are passed to the CSI storage plugin when
                ///   - AccessibilityRequirements: Requirements for the accessible topology of the volume. These
                ///   - CapacityRange: The desired capacity that the volume should be created with. If
                ///   - Availability: The availability of the volume for use in tasks.
                package init(
                    Scope: Components.Schemas.ClusterVolumeSpec.AccessModePayload.ScopePayload? = nil,
                    Sharing: Components.Schemas.ClusterVolumeSpec.AccessModePayload.SharingPayload? = nil,
                    MountVolume: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                    Secrets: Components.Schemas.ClusterVolumeSpec.AccessModePayload.SecretsPayload? = nil,
                    AccessibilityRequirements: Components.Schemas.ClusterVolumeSpec.AccessModePayload.AccessibilityRequirementsPayload? = nil,
                    CapacityRange: Components.Schemas.ClusterVolumeSpec.AccessModePayload.CapacityRangePayload? = nil,
                    Availability: Components.Schemas.ClusterVolumeSpec.AccessModePayload.AvailabilityPayload? = nil
                ) {
                    self.Scope = Scope
                    self.Sharing = Sharing
                    self.MountVolume = MountVolume
                    self.Secrets = Secrets
                    self.AccessibilityRequirements = AccessibilityRequirements
                    self.CapacityRange = CapacityRange
                    self.Availability = Availability
                }
                package enum CodingKeys: String, CodingKey {
                    case Scope
                    case Sharing
                    case MountVolume
                    case Secrets
                    case AccessibilityRequirements
                    case CapacityRange
                    case Availability
                }
            }
            /// Defines how the volume is used by tasks.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ClusterVolumeSpec/AccessMode`.
            package var AccessMode: Components.Schemas.ClusterVolumeSpec.AccessModePayload?
            /// Creates a new `ClusterVolumeSpec`.
            ///
            /// - Parameters:
            ///   - Group: Group defines the volume group of this volume. Volumes belonging to
            ///   - AccessMode: Defines how the volume is used by tasks.
            package init(
                Group: Swift.String? = nil,
                AccessMode: Components.Schemas.ClusterVolumeSpec.AccessModePayload? = nil
            ) {
                self.Group = Group
                self.AccessMode = AccessMode
            }
            package enum CodingKeys: String, CodingKey {
                case Group
                case AccessMode
            }
        }
        /// A map of topological domains to topological segments. For in depth
        /// details, see documentation for the Topology object in the CSI
        /// specification.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Topology`.
        package struct Topology: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            package var additionalProperties: [String: Swift.String]
            /// Creates a new `Topology`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            package init(additionalProperties: [String: Swift.String] = .init()) {
                self.additionalProperties = additionalProperties
            }
            package init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            package func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    package enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    package enum RequestBodies {
        /// - Remark: Generated from `#/components/requestBodies/PluginPrivilegeArray`.
        @frozen package enum PluginPrivilegeArray: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/PluginPrivilegeArray/content/application\/json`.
            case json([Components.Schemas.PluginPrivilege])
            /// - Remark: Generated from `#/components/requestBodies/PluginPrivilegeArray/content/text\/plain`.
            case plainText(OpenAPIRuntime.HTTPBody)
        }
    }
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    package enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    package enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
package enum Operations {
    /// List containers
    ///
    /// Returns a list of containers. For details on the format, see the
    /// [inspect endpoint](#operation/ContainerInspect).
    ///
    /// Note that it uses a different, smaller representation of a container
    /// than inspecting a single container. For example, the list of linked
    /// containers is not propagated .
    ///
    ///
    /// - Remark: HTTP `GET /containers/json`.
    /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)`.
    package enum ContainerList {
        package static let id: Swift.String = "ContainerList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/json/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Return all containers. By default, only running containers are shown.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/json/GET/query/all`.
                package var all: Swift.Bool?
                /// Return this number of most recently created containers, including
                /// non-running ones.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/json/GET/query/limit`.
                package var limit: Swift.Int?
                /// Return the size of container as fields `SizeRw` and `SizeRootFs`.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/json/GET/query/size`.
                package var size: Swift.Bool?
                /// Filters to process on the container list, encoded as JSON (a
                /// `map[string][]string`). For example, `{"status": ["paused"]}` will
                /// only return paused containers.
                ///
                /// Available filters:
                ///
                /// - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
                /// - `before`=(`<container id>` or `<container name>`)
                /// - `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
                /// - `exited=<int>` containers with exit code of `<int>`
                /// - `health`=(`starting`|`healthy`|`unhealthy`|`none`)
                /// - `id=<ID>` a container's ID
                /// - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)
                /// - `is-task=`(`true`|`false`)
                /// - `label=key` or `label="key=value"` of a container label
                /// - `name=<name>` a container's name
                /// - `network`=(`<network id>` or `<network name>`)
                /// - `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
                /// - `since`=(`<container id>` or `<container name>`)
                /// - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)
                /// - `volume`=(`<volume name>` or `<mount point destination>`)
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/json/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Return all containers. By default, only running containers are shown.
                ///   - limit: Return this number of most recently created containers, including
                ///   - size: Return the size of container as fields `SizeRw` and `SizeRootFs`.
                ///   - filters: Filters to process on the container list, encoded as JSON (a
                package init(
                    all: Swift.Bool? = nil,
                    limit: Swift.Int? = nil,
                    size: Swift.Bool? = nil,
                    filters: Swift.String? = nil
                ) {
                    self.all = all
                    self.limit = limit
                    self.size = size
                    self.filters = filters
                }
            }
            package var query: Operations.ContainerList.Input.Query
            /// - Remark: Generated from `#/paths/containers/json/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.ContainerList.Input.Query = .init(),
                headers: Operations.ContainerList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/json/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/json/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContainerSummary])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.ContainerSummary] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/json/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/json/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerList.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerList.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ContainerList.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ContainerList.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/json/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/json/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/json/get(ContainerList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a container
    ///
    /// - Remark: HTTP `POST /containers/create`.
    /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)`.
    package enum ContainerCreate {
        package static let id: Swift.String = "ContainerCreate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/create/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Assign the specified name to the container. Must match
                /// `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/create/POST/query/name`.
                package var name: Swift.String?
                /// Platform in the format `os[/arch[/variant]]` used for image lookup.
                ///
                /// When specified, the daemon checks if the requested image is present
                /// in the local image cache with the given OS and Architecture, and
                /// otherwise returns a `404` status.
                ///
                /// If the option is not set, the host's native OS and Architecture are
                /// used to look up the image in the image cache. However, if no platform
                /// is passed and the given image does exist in the local image cache,
                /// but its OS or architecture does not match, the container is created
                /// with the available image, and a warning is added to the `Warnings`
                /// field in the response, for example;
                ///
                ///     WARNING: The requested image's platform (linux/arm64/v8) does not
                ///              match the detected host platform (linux/amd64) and no
                ///              specific platform was requested
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/create/POST/query/platform`.
                package var platform: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: Assign the specified name to the container. Must match
                ///   - platform: Platform in the format `os[/arch[/variant]]` used for image lookup.
                package init(
                    name: Swift.String? = nil,
                    platform: Swift.String? = nil
                ) {
                    self.name = name
                    self.platform = platform
                }
            }
            package var query: Operations.ContainerCreate.Input.Query
            /// - Remark: Generated from `#/paths/containers/create/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerCreate.Input.Headers
            /// - Remark: Generated from `#/paths/containers/create/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/json/value1`.
                    package var value1: Components.Schemas.ContainerConfig
                    /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/json/value2`.
                    package struct Value2Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/json/value2/HostConfig`.
                        package var HostConfig: Components.Schemas.HostConfig?
                        /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/json/value2/NetworkingConfig`.
                        package var NetworkingConfig: Components.Schemas.NetworkingConfig?
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - HostConfig:
                        ///   - NetworkingConfig:
                        package init(
                            HostConfig: Components.Schemas.HostConfig? = nil,
                            NetworkingConfig: Components.Schemas.NetworkingConfig? = nil
                        ) {
                            self.HostConfig = HostConfig
                            self.NetworkingConfig = NetworkingConfig
                        }
                        package enum CodingKeys: String, CodingKey {
                            case HostConfig
                            case NetworkingConfig
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/json/value2`.
                    package var value2: Operations.ContainerCreate.Input.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    package init(
                        value1: Components.Schemas.ContainerConfig,
                        value2: Operations.ContainerCreate.Input.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    package init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/content/application\/json`.
                case json(Operations.ContainerCreate.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/containers/create/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.ContainerCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                query: Operations.ContainerCreate.Input.Query = .init(),
                headers: Operations.ContainerCreate.Input.Headers = .init(),
                body: Operations.ContainerCreate.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/create/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/create/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.ContainerCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ContainerCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerCreate.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerCreate.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Container created successfully
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ContainerCreate.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ContainerCreate.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/create/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/create/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerCreate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerCreate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ContainerCreate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ContainerCreate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/create/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/create/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerCreate.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerCreate.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such image
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerCreate.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerCreate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/create/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/create/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerCreate.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerCreate.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// conflict
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ContainerCreate.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ContainerCreate.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/create/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/create/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerCreate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerCreate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/create/post(ContainerCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerCreate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerCreate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inspect a container
    ///
    /// Return low-level information about a container.
    ///
    /// - Remark: HTTP `GET /containers/{id}/json`.
    /// - Remark: Generated from `#/paths//containers/{id}/json/get(ContainerInspect)`.
    package enum ContainerInspect {
        package static let id: Swift.String = "ContainerInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/json/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/json/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerInspect.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/json/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Return the size of container as fields `SizeRw` and `SizeRootFs`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/json/GET/query/size`.
                package var size: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - size: Return the size of container as fields `SizeRw` and `SizeRootFs`
                package init(size: Swift.Bool? = nil) {
                    self.size = size
                }
            }
            package var query: Operations.ContainerInspect.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/json/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerInspect.Input.Path,
                query: Operations.ContainerInspect.Input.Query = .init(),
                headers: Operations.ContainerInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// The ID of the container
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Id`.
                        package var Id: Swift.String?
                        /// The time the container was created
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Created`.
                        package var Created: Swift.String?
                        /// The path to the command being run
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Path`.
                        package var Path: Swift.String?
                        /// The arguments to the command being run
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Args`.
                        package var Args: [Swift.String]?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/State`.
                        package var State: Components.Schemas.ContainerState?
                        /// The container's image ID
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Image`.
                        package var Image: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/ResolvConfPath`.
                        package var ResolvConfPath: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/HostnamePath`.
                        package var HostnamePath: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/HostsPath`.
                        package var HostsPath: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/LogPath`.
                        package var LogPath: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Name`.
                        package var Name: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/RestartCount`.
                        package var RestartCount: Swift.Int?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Driver`.
                        package var Driver: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Platform`.
                        package var Platform: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/MountLabel`.
                        package var MountLabel: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/ProcessLabel`.
                        package var ProcessLabel: Swift.String?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/AppArmorProfile`.
                        package var AppArmorProfile: Swift.String?
                        /// IDs of exec instances that are running in the container.
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/ExecIDs`.
                        package var ExecIDs: [Swift.String]?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/HostConfig`.
                        package var HostConfig: Components.Schemas.HostConfig?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/GraphDriver`.
                        package var GraphDriver: Components.Schemas.GraphDriverData?
                        /// The size of files that have been created or changed by this
                        /// container.
                        ///
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/SizeRw`.
                        package var SizeRw: Swift.Int64?
                        /// The total size of all the files in this container.
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/SizeRootFs`.
                        package var SizeRootFs: Swift.Int64?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Mounts`.
                        package var Mounts: [Components.Schemas.MountPoint]?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/Config`.
                        package var Config: Components.Schemas.ContainerConfig?
                        /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/json/NetworkSettings`.
                        package var NetworkSettings: Components.Schemas.NetworkSettings?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - Id: The ID of the container
                        ///   - Created: The time the container was created
                        ///   - Path: The path to the command being run
                        ///   - Args: The arguments to the command being run
                        ///   - State:
                        ///   - Image: The container's image ID
                        ///   - ResolvConfPath:
                        ///   - HostnamePath:
                        ///   - HostsPath:
                        ///   - LogPath:
                        ///   - Name:
                        ///   - RestartCount:
                        ///   - Driver:
                        ///   - Platform:
                        ///   - MountLabel:
                        ///   - ProcessLabel:
                        ///   - AppArmorProfile:
                        ///   - ExecIDs: IDs of exec instances that are running in the container.
                        ///   - HostConfig:
                        ///   - GraphDriver:
                        ///   - SizeRw: The size of files that have been created or changed by this
                        ///   - SizeRootFs: The total size of all the files in this container.
                        ///   - Mounts:
                        ///   - Config:
                        ///   - NetworkSettings:
                        package init(
                            Id: Swift.String? = nil,
                            Created: Swift.String? = nil,
                            Path: Swift.String? = nil,
                            Args: [Swift.String]? = nil,
                            State: Components.Schemas.ContainerState? = nil,
                            Image: Swift.String? = nil,
                            ResolvConfPath: Swift.String? = nil,
                            HostnamePath: Swift.String? = nil,
                            HostsPath: Swift.String? = nil,
                            LogPath: Swift.String? = nil,
                            Name: Swift.String? = nil,
                            RestartCount: Swift.Int? = nil,
                            Driver: Swift.String? = nil,
                            Platform: Swift.String? = nil,
                            MountLabel: Swift.String? = nil,
                            ProcessLabel: Swift.String? = nil,
                            AppArmorProfile: Swift.String? = nil,
                            ExecIDs: [Swift.String]? = nil,
                            HostConfig: Components.Schemas.HostConfig? = nil,
                            GraphDriver: Components.Schemas.GraphDriverData? = nil,
                            SizeRw: Swift.Int64? = nil,
                            SizeRootFs: Swift.Int64? = nil,
                            Mounts: [Components.Schemas.MountPoint]? = nil,
                            Config: Components.Schemas.ContainerConfig? = nil,
                            NetworkSettings: Components.Schemas.NetworkSettings? = nil
                        ) {
                            self.Id = Id
                            self.Created = Created
                            self.Path = Path
                            self.Args = Args
                            self.State = State
                            self.Image = Image
                            self.ResolvConfPath = ResolvConfPath
                            self.HostnamePath = HostnamePath
                            self.HostsPath = HostsPath
                            self.LogPath = LogPath
                            self.Name = Name
                            self.RestartCount = RestartCount
                            self.Driver = Driver
                            self.Platform = Platform
                            self.MountLabel = MountLabel
                            self.ProcessLabel = ProcessLabel
                            self.AppArmorProfile = AppArmorProfile
                            self.ExecIDs = ExecIDs
                            self.HostConfig = HostConfig
                            self.GraphDriver = GraphDriver
                            self.SizeRw = SizeRw
                            self.SizeRootFs = SizeRootFs
                            self.Mounts = Mounts
                            self.Config = Config
                            self.NetworkSettings = NetworkSettings
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Id
                            case Created
                            case Path
                            case Args
                            case State
                            case Image
                            case ResolvConfPath
                            case HostnamePath
                            case HostsPath
                            case LogPath
                            case Name
                            case RestartCount
                            case Driver
                            case Platform
                            case MountLabel
                            case ProcessLabel
                            case AppArmorProfile
                            case ExecIDs
                            case HostConfig
                            case GraphDriver
                            case SizeRw
                            case SizeRootFs
                            case Mounts
                            case Config
                            case NetworkSettings
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/200/content/application\/json`.
                    case json(Operations.ContainerInspect.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ContainerInspect.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/json/get(ContainerInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/json/get(ContainerInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/json/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/json/get(ContainerInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List processes running inside a container
    ///
    /// On Unix systems, this is done by running the `ps` command. This endpoint
    /// is not supported on Windows.
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/top`.
    /// - Remark: Generated from `#/paths//containers/{id}/top/get(ContainerTop)`.
    package enum ContainerTop {
        package static let id: Swift.String = "ContainerTop"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/top/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/top/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerTop.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/top/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The arguments to pass to `ps`. For example, `aux`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/top/GET/query/ps_args`.
                package var ps_args: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ps_args: The arguments to pass to `ps`. For example, `aux`
                package init(ps_args: Swift.String? = nil) {
                    self.ps_args = ps_args
                }
            }
            package var query: Operations.ContainerTop.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/top/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerTop.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerTop.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerTop.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerTop.Input.Path,
                query: Operations.ContainerTop.Input.Query = .init(),
                headers: Operations.ContainerTop.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// OK response to ContainerTop operation
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// The ps column titles
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/200/content/json/Titles`.
                        package var Titles: [Swift.String]?
                        /// Each process running in the container, where each is process
                        /// is an array of values corresponding to the titles.
                        ///
                        ///
                        /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/200/content/json/Processes`.
                        package var Processes: [[Swift.String]]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - Titles: The ps column titles
                        ///   - Processes: Each process running in the container, where each is process
                        package init(
                            Titles: [Swift.String]? = nil,
                            Processes: [[Swift.String]]? = nil
                        ) {
                            self.Titles = Titles
                            self.Processes = Processes
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Titles
                            case Processes
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/200/content/application\/json`.
                    case json(Operations.ContainerTop.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ContainerTop.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerTop.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerTop.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/top/get(ContainerTop)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerTop.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerTop.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerTop.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerTop.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/top/get(ContainerTop)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerTop.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerTop.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/top/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerTop.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerTop.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/top/get(ContainerTop)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerTop.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerTop.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Get container logs
    ///
    /// Get `stdout` and `stderr` logs from a container.
    ///
    /// Note: This endpoint works only for containers with the `json-file` or
    /// `journald` logging driver.
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/logs`.
    /// - Remark: Generated from `#/paths//containers/{id}/logs/get(ContainerLogs)`.
    package enum ContainerLogs {
        package static let id: Swift.String = "ContainerLogs"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerLogs.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Keep connection after returning logs.
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/query/follow`.
                package var follow: Swift.Bool?
                /// Return logs from `stdout`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/query/stdout`.
                package var stdout: Swift.Bool?
                /// Return logs from `stderr`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/query/stderr`.
                package var stderr: Swift.Bool?
                /// Only return logs since this time, as a UNIX timestamp
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/query/since`.
                package var since: Swift.Int?
                /// Only return logs before this time, as a UNIX timestamp
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/query/until`.
                package var until: Swift.Int?
                /// Add timestamps to every log line
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/query/timestamps`.
                package var timestamps: Swift.Bool?
                /// Only return this number of log lines from the end of the logs.
                /// Specify as an integer or `all` to output all log lines.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/query/tail`.
                package var tail: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - follow: Keep connection after returning logs.
                ///   - stdout: Return logs from `stdout`
                ///   - stderr: Return logs from `stderr`
                ///   - since: Only return logs since this time, as a UNIX timestamp
                ///   - until: Only return logs before this time, as a UNIX timestamp
                ///   - timestamps: Add timestamps to every log line
                ///   - tail: Only return this number of log lines from the end of the logs.
                package init(
                    follow: Swift.Bool? = nil,
                    stdout: Swift.Bool? = nil,
                    stderr: Swift.Bool? = nil,
                    since: Swift.Int? = nil,
                    until: Swift.Int? = nil,
                    timestamps: Swift.Bool? = nil,
                    tail: Swift.String? = nil
                ) {
                    self.follow = follow
                    self.stdout = stdout
                    self.stderr = stderr
                    self.since = since
                    self.until = until
                    self.timestamps = timestamps
                    self.tail = tail
                }
            }
            package var query: Operations.ContainerLogs.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerLogs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerLogs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerLogs.Input.Path,
                query: Operations.ContainerLogs.Input.Query = .init(),
                headers: Operations.ContainerLogs.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/200/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/200/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerLogs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerLogs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// logs returned as a stream in response body.
            /// For the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
            /// Note that unlike the attach endpoint, the logs endpoint does not
            /// upgrade the connection and does not set Content-Type.
            ///
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/logs/get(ContainerLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerLogs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerLogs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/404/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/404/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/404/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerLogs.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerLogs.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/logs/get(ContainerLogs)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerLogs.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerLogs.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/500/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/logs/GET/responses/500/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerLogs.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerLogs.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/logs/get(ContainerLogs)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerLogs.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerLogs.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_vnd_period_docker_period_raw_hyphen_stream
            case application_vnd_period_docker_period_multiplexed_hyphen_stream
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/vnd.docker.raw-stream":
                    self = .application_vnd_period_docker_period_raw_hyphen_stream
                case "application/vnd.docker.multiplexed-stream":
                    self = .application_vnd_period_docker_period_multiplexed_hyphen_stream
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_vnd_period_docker_period_raw_hyphen_stream:
                    return "application/vnd.docker.raw-stream"
                case .application_vnd_period_docker_period_multiplexed_hyphen_stream:
                    return "application/vnd.docker.multiplexed-stream"
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_vnd_period_docker_period_raw_hyphen_stream,
                    .application_vnd_period_docker_period_multiplexed_hyphen_stream,
                    .json
                ]
            }
        }
    }
    /// Get changes on a container’s filesystem
    ///
    /// Returns which files in a container's filesystem have been added, deleted,
    /// or modified. The `Kind` of modification can be one of:
    ///
    /// - `0`: Modified ("C")
    /// - `1`: Added ("A")
    /// - `2`: Deleted ("D")
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/changes`.
    /// - Remark: Generated from `#/paths//containers/{id}/changes/get(ContainerChanges)`.
    package enum ContainerChanges {
        package static let id: Swift.String = "ContainerChanges"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/changes/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/changes/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerChanges.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/changes/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerChanges.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerChanges.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerChanges.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ContainerChanges.Input.Path,
                headers: Operations.ContainerChanges.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/changes/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/changes/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FilesystemChange])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.FilesystemChange] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerChanges.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerChanges.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The list of changes
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/changes/get(ContainerChanges)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerChanges.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerChanges.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/changes/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/changes/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerChanges.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerChanges.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/changes/get(ContainerChanges)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerChanges.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerChanges.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/changes/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/changes/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerChanges.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerChanges.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/changes/get(ContainerChanges)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerChanges.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerChanges.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export a container
    ///
    /// Export the contents of a container as a tarball.
    ///
    /// - Remark: HTTP `GET /containers/{id}/export`.
    /// - Remark: Generated from `#/paths//containers/{id}/export/get(ContainerExport)`.
    package enum ContainerExport {
        package static let id: Swift.String = "ContainerExport"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/export/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/export/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerExport.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/export/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExport.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExport.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerExport.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ContainerExport.Input.Path,
                headers: Operations.ContainerExport.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/export/get(ContainerExport)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerExport.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerExport.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/export/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/export/GET/responses/404/content/application\/octet-stream`.
                    case binary(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.binary`.
                    ///
                    /// - Throws: An error if `self` is not `.binary`.
                    /// - SeeAlso: `.binary`.
                    package var binary: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .binary(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/octet-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/export/GET/responses/404/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerExport.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerExport.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/export/get(ContainerExport)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerExport.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerExport.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/export/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/export/GET/responses/500/content/application\/octet-stream`.
                    case binary(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.binary`.
                    ///
                    /// - Throws: An error if `self` is not `.binary`.
                    /// - SeeAlso: `.binary`.
                    package var binary: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .binary(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerExport.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerExport.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/export/get(ContainerExport)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerExport.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerExport.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case binary
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/octet-stream":
                    self = .binary
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .binary:
                    return "application/octet-stream"
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .binary,
                    .json
                ]
            }
        }
    }
    /// Get container stats based on resource usage
    ///
    /// This endpoint returns a live stream of a container’s resource usage
    /// statistics.
    ///
    /// The `precpu_stats` is the CPU statistic of the *previous* read, and is
    /// used to calculate the CPU usage percentage. It is not an exact copy
    /// of the `cpu_stats` field.
    ///
    /// If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
    /// nil then for compatibility with older daemons the length of the
    /// corresponding `cpu_usage.percpu_usage` array should be used.
    ///
    /// On a cgroup v2 host, the following fields are not set
    /// * `blkio_stats`: all fields other than `io_service_bytes_recursive`
    /// * `cpu_stats`: `cpu_usage.percpu_usage`
    /// * `memory_stats`: `max_usage` and `failcnt`
    /// Also, `memory_stats.stats` fields are incompatible with cgroup v1.
    ///
    /// To calculate the values shown by the `stats` command of the docker cli tool
    /// the following formulas can be used:
    /// * used_memory = `memory_stats.usage - memory_stats.stats.cache`
    /// * available_memory = `memory_stats.limit`
    /// * Memory usage % = `(used_memory / available_memory) * 100.0`
    /// * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`
    /// * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`
    /// * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`
    /// * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`
    ///
    ///
    /// - Remark: HTTP `GET /containers/{id}/stats`.
    /// - Remark: Generated from `#/paths//containers/{id}/stats/get(ContainerStats)`.
    package enum ContainerStats {
        package static let id: Swift.String = "ContainerStats"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerStats.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Stream the output. If false, the stats will be output once and then
                /// it will disconnect.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/query/stream`.
                package var stream: Swift.Bool?
                /// Only get a single stat instead of waiting for 2 cycles. Must be used
                /// with `stream=false`.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/query/one-shot`.
                package var one_hyphen_shot: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - stream: Stream the output. If false, the stats will be output once and then
                ///   - one_hyphen_shot: Only get a single stat instead of waiting for 2 cycles. Must be used
                package init(
                    stream: Swift.Bool? = nil,
                    one_hyphen_shot: Swift.Bool? = nil
                ) {
                    self.stream = stream
                    self.one_hyphen_shot = one_hyphen_shot
                }
            }
            package var query: Operations.ContainerStats.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerStats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerStats.Input.Path,
                query: Operations.ContainerStats.Input.Query = .init(),
                headers: Operations.ContainerStats.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerStats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerStats.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/stats/get(ContainerStats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerStats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerStats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerStats.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerStats.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/stats/get(ContainerStats)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerStats.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerStats.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/stats/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerStats.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerStats.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/stats/get(ContainerStats)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerStats.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerStats.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Resize a container TTY
    ///
    /// Resize the TTY for a container.
    ///
    /// - Remark: HTTP `POST /containers/{id}/resize`.
    /// - Remark: Generated from `#/paths//containers/{id}/resize/post(ContainerResize)`.
    package enum ContainerResize {
        package static let id: Swift.String = "ContainerResize"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerResize.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Height of the TTY session in characters
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/query/h`.
                package var h: Swift.Int?
                /// Width of the TTY session in characters
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/query/w`.
                package var w: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - h: Height of the TTY session in characters
                ///   - w: Width of the TTY session in characters
                package init(
                    h: Swift.Int? = nil,
                    w: Swift.Int? = nil
                ) {
                    self.h = h
                    self.w = w
                }
            }
            package var query: Operations.ContainerResize.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerResize.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerResize.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerResize.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerResize.Input.Path,
                query: Operations.ContainerResize.Input.Query = .init(),
                headers: Operations.ContainerResize.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/resize/post(ContainerResize)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerResize.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerResize.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/responses/404/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerResize.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerResize.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/resize/post(ContainerResize)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerResize.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerResize.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/resize/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerResize.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerResize.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// cannot resize container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/resize/post(ContainerResize)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerResize.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerResize.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case plainText
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/plain":
                    self = .plainText
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .plainText:
                    return "text/plain"
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .plainText,
                    .json
                ]
            }
        }
    }
    /// Start a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/start`.
    /// - Remark: Generated from `#/paths//containers/{id}/start/post(ContainerStart)`.
    package enum ContainerStart {
        package static let id: Swift.String = "ContainerStart"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/start/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/start/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerStart.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/start/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Override the key sequence for detaching a container. Format is a
                /// single character `[a-Z]` or `ctrl-<value>` where `<value>` is one
                /// of: `a-z`, `@`, `^`, `[`, `,` or `_`.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/start/POST/query/detachKeys`.
                package var detachKeys: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - detachKeys: Override the key sequence for detaching a container. Format is a
                package init(detachKeys: Swift.String? = nil) {
                    self.detachKeys = detachKeys
                }
            }
            package var query: Operations.ContainerStart.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/start/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStart.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStart.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerStart.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerStart.Input.Path,
                query: Operations.ContainerStart.Input.Query = .init(),
                headers: Operations.ContainerStart.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/start/post(ContainerStart)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerStart.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ContainerStart.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotModified: Sendable, Hashable {
                /// Creates a new `NotModified`.
                package init() {}
            }
            /// container already started
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/start/post(ContainerStart)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Operations.ContainerStart.Output.NotModified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Operations.ContainerStart.Output.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/start/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/start/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/start/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerStart.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerStart.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/start/post(ContainerStart)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerStart.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerStart.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/start/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/start/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/start/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerStart.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerStart.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/start/post(ContainerStart)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerStart.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerStart.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Stop a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/stop`.
    /// - Remark: Generated from `#/paths//containers/{id}/stop/post(ContainerStop)`.
    package enum ContainerStop {
        package static let id: Swift.String = "ContainerStop"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerStop.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Signal to send to the container as an integer or string (e.g. `SIGINT`).
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/query/signal`.
                package var signal: Swift.String?
                /// Number of seconds to wait before killing the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/query/t`.
                package var t: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - signal: Signal to send to the container as an integer or string (e.g. `SIGINT`).
                ///   - t: Number of seconds to wait before killing the container
                package init(
                    signal: Swift.String? = nil,
                    t: Swift.Int? = nil
                ) {
                    self.signal = signal
                    self.t = t
                }
            }
            package var query: Operations.ContainerStop.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStop.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerStop.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerStop.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerStop.Input.Path,
                query: Operations.ContainerStop.Input.Query = .init(),
                headers: Operations.ContainerStop.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/stop/post(ContainerStop)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerStop.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ContainerStop.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotModified: Sendable, Hashable {
                /// Creates a new `NotModified`.
                package init() {}
            }
            /// container already stopped
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/stop/post(ContainerStop)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Operations.ContainerStop.Output.NotModified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Operations.ContainerStop.Output.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerStop.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerStop.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/stop/post(ContainerStop)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerStop.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerStop.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/stop/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerStop.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerStop.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/stop/post(ContainerStop)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerStop.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerStop.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Restart a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/restart`.
    /// - Remark: Generated from `#/paths//containers/{id}/restart/post(ContainerRestart)`.
    package enum ContainerRestart {
        package static let id: Swift.String = "ContainerRestart"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerRestart.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Signal to send to the container as an integer or string (e.g. `SIGINT`).
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/query/signal`.
                package var signal: Swift.String?
                /// Number of seconds to wait before killing the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/query/t`.
                package var t: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - signal: Signal to send to the container as an integer or string (e.g. `SIGINT`).
                ///   - t: Number of seconds to wait before killing the container
                package init(
                    signal: Swift.String? = nil,
                    t: Swift.Int? = nil
                ) {
                    self.signal = signal
                    self.t = t
                }
            }
            package var query: Operations.ContainerRestart.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRestart.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRestart.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerRestart.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerRestart.Input.Path,
                query: Operations.ContainerRestart.Input.Query = .init(),
                headers: Operations.ContainerRestart.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/restart/post(ContainerRestart)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerRestart.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ContainerRestart.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerRestart.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerRestart.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/restart/post(ContainerRestart)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerRestart.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerRestart.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/restart/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerRestart.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerRestart.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/restart/post(ContainerRestart)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerRestart.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerRestart.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Kill a container
    ///
    /// Send a POSIX signal to a container, defaulting to killing to the
    /// container.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/kill`.
    /// - Remark: Generated from `#/paths//containers/{id}/kill/post(ContainerKill)`.
    package enum ContainerKill {
        package static let id: Swift.String = "ContainerKill"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerKill.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Signal to send to the container as an integer or string (e.g. `SIGINT`).
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/query/signal`.
                package var signal: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - signal: Signal to send to the container as an integer or string (e.g. `SIGINT`).
                package init(signal: Swift.String? = nil) {
                    self.signal = signal
                }
            }
            package var query: Operations.ContainerKill.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerKill.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerKill.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerKill.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerKill.Input.Path,
                query: Operations.ContainerKill.Input.Query = .init(),
                headers: Operations.ContainerKill.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/kill/post(ContainerKill)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerKill.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ContainerKill.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerKill.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerKill.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/kill/post(ContainerKill)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerKill.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerKill.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/responses/409/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerKill.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerKill.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// container is not running
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/kill/post(ContainerKill)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ContainerKill.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ContainerKill.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/kill/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerKill.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerKill.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/kill/post(ContainerKill)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerKill.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerKill.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Update a container
    ///
    /// Change various configuration options of a container without having to
    /// recreate it.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/update`.
    /// - Remark: Generated from `#/paths//containers/{id}/update/post(ContainerUpdate)`.
    package enum ContainerUpdate {
        package static let id: Swift.String = "ContainerUpdate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/update/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/update/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerUpdate.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/update/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/containers/{id}/update/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/update/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/containers/{id}/update/POST/requestBody/json/value1`.
                    package var value1: Components.Schemas.Resources
                    /// - Remark: Generated from `#/paths/containers/{id}/update/POST/requestBody/json/value2`.
                    package struct Value2Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/containers/{id}/update/POST/requestBody/json/value2/RestartPolicy`.
                        package var RestartPolicy: Components.Schemas.RestartPolicy?
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - RestartPolicy:
                        package init(RestartPolicy: Components.Schemas.RestartPolicy? = nil) {
                            self.RestartPolicy = RestartPolicy
                        }
                        package enum CodingKeys: String, CodingKey {
                            case RestartPolicy
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/update/POST/requestBody/json/value2`.
                    package var value2: Operations.ContainerUpdate.Input.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    package init(
                        value1: Components.Schemas.Resources,
                        value2: Operations.ContainerUpdate.Input.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    package init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/containers/{id}/update/POST/requestBody/content/application\/json`.
                case json(Operations.ContainerUpdate.Input.Body.jsonPayload)
            }
            package var body: Operations.ContainerUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ContainerUpdate.Input.Path,
                headers: Operations.ContainerUpdate.Input.Headers = .init(),
                body: Operations.ContainerUpdate.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/update/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// OK response to ContainerUpdate operation
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/update/POST/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/containers/{id}/update/POST/responses/200/content/json/Warnings`.
                        package var Warnings: [Swift.String]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - Warnings:
                        package init(Warnings: [Swift.String]? = nil) {
                            self.Warnings = Warnings
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Warnings
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/update/POST/responses/200/content/application\/json`.
                    case json(Operations.ContainerUpdate.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ContainerUpdate.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The container has been updated.
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/update/post(ContainerUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/update/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/update/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerUpdate.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerUpdate.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/update/post(ContainerUpdate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerUpdate.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerUpdate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/update/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/update/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerUpdate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerUpdate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/update/post(ContainerUpdate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerUpdate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerUpdate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Rename a container
    ///
    /// - Remark: HTTP `POST /containers/{id}/rename`.
    /// - Remark: Generated from `#/paths//containers/{id}/rename/post(ContainerRename)`.
    package enum ContainerRename {
        package static let id: Swift.String = "ContainerRename"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerRename.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/query`.
            package struct Query: Sendable, Hashable {
                /// New name for the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/query/name`.
                package var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: New name for the container
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var query: Operations.ContainerRename.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRename.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerRename.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerRename.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerRename.Input.Path,
                query: Operations.ContainerRename.Input.Query,
                headers: Operations.ContainerRename.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/rename/post(ContainerRename)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerRename.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ContainerRename.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerRename.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerRename.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/rename/post(ContainerRename)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerRename.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerRename.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/responses/409/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerRename.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerRename.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// name already in use
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/rename/post(ContainerRename)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ContainerRename.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ContainerRename.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/rename/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerRename.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerRename.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/rename/post(ContainerRename)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerRename.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerRename.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Pause a container
    ///
    /// Use the freezer cgroup to suspend all processes in a container.
    ///
    /// Traditionally, when suspending a process the `SIGSTOP` signal is used,
    /// which is observable by the process being suspended. With the freezer
    /// cgroup the process is unaware, and unable to capture, that it is being
    /// suspended, and subsequently resumed.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/pause`.
    /// - Remark: Generated from `#/paths//containers/{id}/pause/post(ContainerPause)`.
    package enum ContainerPause {
        package static let id: Swift.String = "ContainerPause"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/pause/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/pause/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerPause.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/pause/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPause.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPause.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerPause.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ContainerPause.Input.Path,
                headers: Operations.ContainerPause.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/pause/post(ContainerPause)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerPause.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ContainerPause.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/pause/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/pause/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/pause/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerPause.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerPause.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/pause/post(ContainerPause)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerPause.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerPause.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/pause/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/pause/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/pause/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerPause.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerPause.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/pause/post(ContainerPause)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerPause.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerPause.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Unpause a container
    ///
    /// Resume a container which has been paused.
    ///
    /// - Remark: HTTP `POST /containers/{id}/unpause`.
    /// - Remark: Generated from `#/paths//containers/{id}/unpause/post(ContainerUnpause)`.
    package enum ContainerUnpause {
        package static let id: Swift.String = "ContainerUnpause"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/unpause/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/unpause/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerUnpause.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/unpause/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUnpause.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerUnpause.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerUnpause.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ContainerUnpause.Input.Path,
                headers: Operations.ContainerUnpause.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/unpause/post(ContainerUnpause)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerUnpause.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ContainerUnpause.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/unpause/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/unpause/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/unpause/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerUnpause.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerUnpause.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/unpause/post(ContainerUnpause)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerUnpause.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerUnpause.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/unpause/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/unpause/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/unpause/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerUnpause.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerUnpause.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/unpause/post(ContainerUnpause)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerUnpause.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerUnpause.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Attach to a container
    ///
    /// Attach to a container to read its output or send it input. You can attach
    /// to the same container multiple times and you can reattach to containers
    /// that have been detached.
    ///
    /// Either the `stream` or `logs` parameter must be `true` for this endpoint
    /// to do anything.
    ///
    /// See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/)
    /// for more details.
    ///
    /// ### Hijacking
    ///
    /// This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
    /// and `stderr` on the same socket.
    ///
    /// This is the response from the daemon for an attach request:
    ///
    /// ```
    /// HTTP/1.1 200 OK
    /// Content-Type: application/vnd.docker.raw-stream
    ///
    /// [STREAM]
    /// ```
    ///
    /// After the headers and two new lines, the TCP connection can now be used
    /// for raw, bidirectional communication between the client and server.
    ///
    /// To hint potential proxies about connection hijacking, the Docker client
    /// can also optionally send connection upgrade headers.
    ///
    /// For example, the client sends this request to upgrade the connection:
    ///
    /// ```
    /// POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
    /// Upgrade: tcp
    /// Connection: Upgrade
    /// ```
    ///
    /// The Docker daemon will respond with a `101 UPGRADED` response, and will
    /// similarly follow with the raw stream:
    ///
    /// ```
    /// HTTP/1.1 101 UPGRADED
    /// Content-Type: application/vnd.docker.raw-stream
    /// Connection: Upgrade
    /// Upgrade: tcp
    ///
    /// [STREAM]
    /// ```
    ///
    /// ### Stream format
    ///
    /// When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),
    /// the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream
    /// and the stream over the hijacked connected is multiplexed to separate out
    /// `stdout` and `stderr`. The stream consists of a series of frames, each
    /// containing a header and a payload.
    ///
    /// The header contains the information which the stream writes (`stdout` or
    /// `stderr`). It also contains the size of the associated frame encoded in
    /// the last four bytes (`uint32`).
    ///
    /// It is encoded on the first eight bytes like this:
    ///
    /// ```go
    /// header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
    /// ```
    ///
    /// `STREAM_TYPE` can be:
    ///
    /// - 0: `stdin` (is written on `stdout`)
    /// - 1: `stdout`
    /// - 2: `stderr`
    ///
    /// `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
    /// encoded as big endian.
    ///
    /// Following the header is the payload, which is the specified number of
    /// bytes of `STREAM_TYPE`.
    ///
    /// The simplest way to implement this protocol is the following:
    ///
    /// 1. Read 8 bytes.
    /// 2. Choose `stdout` or `stderr` depending on the first byte.
    /// 3. Extract the frame size from the last four bytes.
    /// 4. Read the extracted size and output it on the correct output.
    /// 5. Goto 1.
    ///
    /// ### Stream format when using a TTY
    ///
    /// When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate),
    /// the stream is not multiplexed. The data exchanged over the hijacked
    /// connection is simply the raw data from the process PTY and client's
    /// `stdin`.
    ///
    ///
    /// - Remark: HTTP `POST /containers/{id}/attach`.
    /// - Remark: Generated from `#/paths//containers/{id}/attach/post(ContainerAttach)`.
    package enum ContainerAttach {
        package static let id: Swift.String = "ContainerAttach"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerAttach.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Override the key sequence for detaching a container.Format is a single
                /// character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
                /// `@`, `^`, `[`, `,` or `_`.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/query/detachKeys`.
                package var detachKeys: Swift.String?
                /// Replay previous logs from the container.
                ///
                /// This is useful for attaching to a container that has started and you
                /// want to output everything since the container started.
                ///
                /// If `stream` is also enabled, once all the previous output has been
                /// returned, it will seamlessly transition into streaming current
                /// output.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/query/logs`.
                package var logs: Swift.Bool?
                /// Stream attached streams from the time the request was made onwards.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/query/stream`.
                package var stream: Swift.Bool?
                /// Attach to `stdin`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/query/stdin`.
                package var stdin: Swift.Bool?
                /// Attach to `stdout`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/query/stdout`.
                package var stdout: Swift.Bool?
                /// Attach to `stderr`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/query/stderr`.
                package var stderr: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - detachKeys: Override the key sequence for detaching a container.Format is a single
                ///   - logs: Replay previous logs from the container.
                ///   - stream: Stream attached streams from the time the request was made onwards.
                ///   - stdin: Attach to `stdin`
                ///   - stdout: Attach to `stdout`
                ///   - stderr: Attach to `stderr`
                package init(
                    detachKeys: Swift.String? = nil,
                    logs: Swift.Bool? = nil,
                    stream: Swift.Bool? = nil,
                    stdin: Swift.Bool? = nil,
                    stdout: Swift.Bool? = nil,
                    stderr: Swift.Bool? = nil
                ) {
                    self.detachKeys = detachKeys
                    self.logs = logs
                    self.stream = stream
                    self.stdin = stdin
                    self.stdout = stdout
                    self.stderr = stderr
                }
            }
            package var query: Operations.ContainerAttach.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerAttach.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerAttach.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerAttach.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerAttach.Input.Path,
                query: Operations.ContainerAttach.Input.Query = .init(),
                headers: Operations.ContainerAttach.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct SwitchingProtocols: Sendable, Hashable {
                /// Creates a new `SwitchingProtocols`.
                package init() {}
            }
            /// no error, hints proxy about hijacking
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/post(ContainerAttach)/responses/101`.
            ///
            /// HTTP response code: `101 switchingProtocols`.
            case switchingProtocols(Operations.ContainerAttach.Output.SwitchingProtocols)
            /// The associated value of the enum case if `self` is `.switchingProtocols`.
            ///
            /// - Throws: An error if `self` is not `.switchingProtocols`.
            /// - SeeAlso: `.switchingProtocols`.
            package var switchingProtocols: Operations.ContainerAttach.Output.SwitchingProtocols {
                get throws {
                    switch self {
                    case let .switchingProtocols(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "switchingProtocols",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error, no upgrade header found
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/post(ContainerAttach)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerAttach.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerAttach.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/400/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/400/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerAttach.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerAttach.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/post(ContainerAttach)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ContainerAttach.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ContainerAttach.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/404/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/404/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/404/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerAttach.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerAttach.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/post(ContainerAttach)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerAttach.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerAttach.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/500/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/POST/responses/500/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerAttach.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerAttach.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/post(ContainerAttach)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerAttach.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerAttach.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_vnd_period_docker_period_raw_hyphen_stream
            case application_vnd_period_docker_period_multiplexed_hyphen_stream
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/vnd.docker.raw-stream":
                    self = .application_vnd_period_docker_period_raw_hyphen_stream
                case "application/vnd.docker.multiplexed-stream":
                    self = .application_vnd_period_docker_period_multiplexed_hyphen_stream
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_vnd_period_docker_period_raw_hyphen_stream:
                    return "application/vnd.docker.raw-stream"
                case .application_vnd_period_docker_period_multiplexed_hyphen_stream:
                    return "application/vnd.docker.multiplexed-stream"
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_vnd_period_docker_period_raw_hyphen_stream,
                    .application_vnd_period_docker_period_multiplexed_hyphen_stream,
                    .json
                ]
            }
        }
    }
    /// Attach to a container via a websocket
    ///
    /// - Remark: HTTP `GET /containers/{id}/attach/ws`.
    /// - Remark: Generated from `#/paths//containers/{id}/attach/ws/get(ContainerAttachWebsocket)`.
    package enum ContainerAttachWebsocket {
        package static let id: Swift.String = "ContainerAttachWebsocket"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerAttachWebsocket.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Override the key sequence for detaching a container.Format is a single
                /// character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
                /// `@`, `^`, `[`, `,`, or `_`.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/query/detachKeys`.
                package var detachKeys: Swift.String?
                /// Return logs
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/query/logs`.
                package var logs: Swift.Bool?
                /// Return stream
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/query/stream`.
                package var stream: Swift.Bool?
                /// Attach to `stdin`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/query/stdin`.
                package var stdin: Swift.Bool?
                /// Attach to `stdout`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/query/stdout`.
                package var stdout: Swift.Bool?
                /// Attach to `stderr`
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/query/stderr`.
                package var stderr: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - detachKeys: Override the key sequence for detaching a container.Format is a single
                ///   - logs: Return logs
                ///   - stream: Return stream
                ///   - stdin: Attach to `stdin`
                ///   - stdout: Attach to `stdout`
                ///   - stderr: Attach to `stderr`
                package init(
                    detachKeys: Swift.String? = nil,
                    logs: Swift.Bool? = nil,
                    stream: Swift.Bool? = nil,
                    stdin: Swift.Bool? = nil,
                    stdout: Swift.Bool? = nil,
                    stderr: Swift.Bool? = nil
                ) {
                    self.detachKeys = detachKeys
                    self.logs = logs
                    self.stream = stream
                    self.stdin = stdin
                    self.stdout = stdout
                    self.stderr = stderr
                }
            }
            package var query: Operations.ContainerAttachWebsocket.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerAttachWebsocket.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerAttachWebsocket.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerAttachWebsocket.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerAttachWebsocket.Input.Path,
                query: Operations.ContainerAttachWebsocket.Input.Query = .init(),
                headers: Operations.ContainerAttachWebsocket.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct SwitchingProtocols: Sendable, Hashable {
                /// Creates a new `SwitchingProtocols`.
                package init() {}
            }
            /// no error, hints proxy about hijacking
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/ws/get(ContainerAttachWebsocket)/responses/101`.
            ///
            /// HTTP response code: `101 switchingProtocols`.
            case switchingProtocols(Operations.ContainerAttachWebsocket.Output.SwitchingProtocols)
            /// The associated value of the enum case if `self` is `.switchingProtocols`.
            ///
            /// - Throws: An error if `self` is not `.switchingProtocols`.
            /// - SeeAlso: `.switchingProtocols`.
            package var switchingProtocols: Operations.ContainerAttachWebsocket.Output.SwitchingProtocols {
                get throws {
                    switch self {
                    case let .switchingProtocols(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "switchingProtocols",
                            response: self
                        )
                    }
                }
            }
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error, no upgrade header found
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/ws/get(ContainerAttachWebsocket)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerAttachWebsocket.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerAttachWebsocket.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerAttachWebsocket.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerAttachWebsocket.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/ws/get(ContainerAttachWebsocket)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ContainerAttachWebsocket.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ContainerAttachWebsocket.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerAttachWebsocket.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerAttachWebsocket.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/ws/get(ContainerAttachWebsocket)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerAttachWebsocket.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerAttachWebsocket.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/attach/ws/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerAttachWebsocket.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerAttachWebsocket.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/attach/ws/get(ContainerAttachWebsocket)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerAttachWebsocket.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerAttachWebsocket.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Wait for a container
    ///
    /// Block until a container stops, then returns the exit code.
    ///
    /// - Remark: HTTP `POST /containers/{id}/wait`.
    /// - Remark: Generated from `#/paths//containers/{id}/wait/post(ContainerWait)`.
    package enum ContainerWait {
        package static let id: Swift.String = "ContainerWait"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerWait.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/query/condition`.
                @frozen package enum conditionPayload: String, Codable, Hashable, Sendable {
                    case not_hyphen_running = "not-running"
                    case next_hyphen_exit = "next-exit"
                    case removed = "removed"
                }
                /// Wait until a container state reaches the given condition.
                ///
                /// Defaults to `not-running` if omitted or empty.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/query/condition`.
                package var condition: Operations.ContainerWait.Input.Query.conditionPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - condition: Wait until a container state reaches the given condition.
                package init(condition: Operations.ContainerWait.Input.Query.conditionPayload? = nil) {
                    self.condition = condition
                }
            }
            package var query: Operations.ContainerWait.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerWait.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerWait.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerWait.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerWait.Input.Path,
                query: Operations.ContainerWait.Input.Query = .init(),
                headers: Operations.ContainerWait.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ContainerWaitResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ContainerWaitResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerWait.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerWait.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The container has exit.
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/wait/post(ContainerWait)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerWait.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerWait.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerWait.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerWait.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/wait/post(ContainerWait)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ContainerWait.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ContainerWait.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerWait.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerWait.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/wait/post(ContainerWait)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerWait.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerWait.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/wait/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerWait.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerWait.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/wait/post(ContainerWait)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerWait.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerWait.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a container
    ///
    /// - Remark: HTTP `DELETE /containers/{id}`.
    /// - Remark: Generated from `#/paths//containers/{id}/delete(ContainerDelete)`.
    package enum ContainerDelete {
        package static let id: Swift.String = "ContainerDelete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerDelete.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/DELETE/query`.
            package struct Query: Sendable, Hashable {
                /// Remove anonymous volumes associated with the container.
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/DELETE/query/v`.
                package var v: Swift.Bool?
                /// If the container is running, kill it before removing it.
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/DELETE/query/force`.
                package var force: Swift.Bool?
                /// Remove the specified link associated with the container.
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/DELETE/query/link`.
                package var link: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - v: Remove anonymous volumes associated with the container.
                ///   - force: If the container is running, kill it before removing it.
                ///   - link: Remove the specified link associated with the container.
                package init(
                    v: Swift.Bool? = nil,
                    force: Swift.Bool? = nil,
                    link: Swift.Bool? = nil
                ) {
                    self.v = v
                    self.force = force
                    self.link = link
                }
            }
            package var query: Operations.ContainerDelete.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerDelete.Input.Path,
                query: Operations.ContainerDelete.Input.Query = .init(),
                headers: Operations.ContainerDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/delete(ContainerDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ContainerDelete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ContainerDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerDelete.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerDelete.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/delete(ContainerDelete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ContainerDelete.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ContainerDelete.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/delete(ContainerDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/409/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerDelete.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerDelete.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// conflict
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/delete(ContainerDelete)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ContainerDelete.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ContainerDelete.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/DELETE/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerDelete.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/delete(ContainerDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerDelete.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerDelete.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Get an archive of a filesystem resource in a container
    ///
    /// Get a tar archive of a resource in the filesystem of container id.
    ///
    /// - Remark: HTTP `GET /containers/{id}/archive`.
    /// - Remark: Generated from `#/paths//containers/{id}/archive/get(ContainerArchive)`.
    package enum ContainerArchive {
        package static let id: Swift.String = "ContainerArchive"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerArchive.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Resource in the container’s filesystem to archive.
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/query/path`.
                package var path: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - path: Resource in the container’s filesystem to archive.
                package init(path: Swift.String) {
                    self.path = path
                }
            }
            package var query: Operations.ContainerArchive.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerArchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerArchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerArchive.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerArchive.Input.Path,
                query: Operations.ContainerArchive.Input.Query,
                headers: Operations.ContainerArchive.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/get(ContainerArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerArchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerArchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/responses/400/content/application\/x-tar`.
                    case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_tar`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_tar`.
                    /// - SeeAlso: `.application_x_hyphen_tar`.
                    package var application_x_hyphen_tar: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_tar(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerArchive.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerArchive.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad parameter
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/get(ContainerArchive)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ContainerArchive.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ContainerArchive.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/responses/404/content/application\/x-tar`.
                    case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_tar`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_tar`.
                    /// - SeeAlso: `.application_x_hyphen_tar`.
                    package var application_x_hyphen_tar: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_tar(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-tar",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/responses/404/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerArchive.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerArchive.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Container or path does not exist
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/get(ContainerArchive)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerArchive.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerArchive.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/GET/responses/500/content/application\/x-tar`.
                    case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_tar`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_tar`.
                    /// - SeeAlso: `.application_x_hyphen_tar`.
                    package var application_x_hyphen_tar: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_tar(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerArchive.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerArchive.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/get(ContainerArchive)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerArchive.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerArchive.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_tar
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-tar":
                    self = .application_x_hyphen_tar
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_tar:
                    return "application/x-tar"
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_x_hyphen_tar,
                    .json
                ]
            }
        }
    }
    /// Extract an archive of files or folders to a directory in a container
    ///
    /// Upload a tar archive to be extracted to a path in the filesystem of container id.
    /// `path` parameter is asserted to be a directory. If it exists as a file, 400 error
    /// will be returned with message "not a directory".
    ///
    ///
    /// - Remark: HTTP `PUT /containers/{id}/archive`.
    /// - Remark: Generated from `#/paths//containers/{id}/archive/put(PutContainerArchive)`.
    package enum PutContainerArchive {
        package static let id: Swift.String = "PutContainerArchive"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.PutContainerArchive.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/query`.
            package struct Query: Sendable, Hashable {
                /// Path to a directory in the container to extract the archive’s contents into. 
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/query/path`.
                package var path: Swift.String
                /// If `1`, `true`, or `True` then it will be an error if unpacking the
                /// given content would cause an existing directory to be replaced with
                /// a non-directory and vice versa.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/query/noOverwriteDirNonDir`.
                package var noOverwriteDirNonDir: Swift.String?
                /// If `1`, `true`, then it will copy UID/GID maps to the dest file or
                /// dir
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/query/copyUIDGID`.
                package var copyUIDGID: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - path: Path to a directory in the container to extract the archive’s contents into. 
                ///   - noOverwriteDirNonDir: If `1`, `true`, or `True` then it will be an error if unpacking the
                ///   - copyUIDGID: If `1`, `true`, then it will copy UID/GID maps to the dest file or
                package init(
                    path: Swift.String,
                    noOverwriteDirNonDir: Swift.String? = nil,
                    copyUIDGID: Swift.String? = nil
                ) {
                    self.path = path
                    self.noOverwriteDirNonDir = noOverwriteDirNonDir
                    self.copyUIDGID = copyUIDGID
                }
            }
            package var query: Operations.PutContainerArchive.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutContainerArchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutContainerArchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PutContainerArchive.Input.Headers
            /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.PutContainerArchive.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.PutContainerArchive.Input.Path,
                query: Operations.PutContainerArchive.Input.Query,
                headers: Operations.PutContainerArchive.Input.Headers = .init(),
                body: Operations.PutContainerArchive.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// The content was extracted successfully
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/put(PutContainerArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PutContainerArchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PutContainerArchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PutContainerArchive.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PutContainerArchive.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad parameter
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/put(PutContainerArchive)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.PutContainerArchive.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.PutContainerArchive.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/403/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PutContainerArchive.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PutContainerArchive.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Permission denied, the volume or container rootfs is marked as read-only.
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/put(PutContainerArchive)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.PutContainerArchive.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.PutContainerArchive.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PutContainerArchive.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PutContainerArchive.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such container or path does not exist inside the container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/put(PutContainerArchive)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PutContainerArchive.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.PutContainerArchive.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/PUT/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PutContainerArchive.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PutContainerArchive.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/put(PutContainerArchive)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PutContainerArchive.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PutContainerArchive.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Get information about files in a container
    ///
    /// A response header `X-Docker-Container-Path-Stat` is returned, containing
    /// a base64 - encoded JSON object with some filesystem header information
    /// about the path.
    ///
    ///
    /// - Remark: HTTP `HEAD /containers/{id}/archive`.
    /// - Remark: Generated from `#/paths//containers/{id}/archive/head(ContainerArchiveInfo)`.
    package enum ContainerArchiveInfo {
        package static let id: Swift.String = "ContainerArchiveInfo"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerArchiveInfo.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/query`.
            package struct Query: Sendable, Hashable {
                /// Resource in the container’s filesystem to archive.
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/query/path`.
                package var path: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - path: Resource in the container’s filesystem to archive.
                package init(path: Swift.String) {
                    self.path = path
                }
            }
            package var query: Operations.ContainerArchiveInfo.Input.Query
            /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerArchiveInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerArchiveInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerArchiveInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ContainerArchiveInfo.Input.Path,
                query: Operations.ContainerArchiveInfo.Input.Query,
                headers: Operations.ContainerArchiveInfo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// A base64 - encoded JSON object with some filesystem header
                    /// information about the path
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/200/headers/X-Docker-Container-Path-Stat`.
                    package var X_hyphen_Docker_hyphen_Container_hyphen_Path_hyphen_Stat: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - X_hyphen_Docker_hyphen_Container_hyphen_Path_hyphen_Stat: A base64 - encoded JSON object with some filesystem header
                    package init(X_hyphen_Docker_hyphen_Container_hyphen_Path_hyphen_Stat: Swift.String? = nil) {
                        self.X_hyphen_Docker_hyphen_Container_hyphen_Path_hyphen_Stat = X_hyphen_Docker_hyphen_Container_hyphen_Path_hyphen_Stat
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ContainerArchiveInfo.Output.Ok.Headers
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                package init(headers: Operations.ContainerArchiveInfo.Output.Ok.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/head(ContainerArchiveInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerArchiveInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerArchiveInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerArchiveInfo.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerArchiveInfo.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad parameter
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/head(ContainerArchiveInfo)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ContainerArchiveInfo.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ContainerArchiveInfo.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerArchiveInfo.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerArchiveInfo.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Container or path does not exist
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/head(ContainerArchiveInfo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerArchiveInfo.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerArchiveInfo.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/{id}/archive/HEAD/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerArchiveInfo.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerArchiveInfo.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/archive/head(ContainerArchiveInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerArchiveInfo.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerArchiveInfo.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Delete stopped containers
    ///
    /// - Remark: HTTP `POST /containers/prune`.
    /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)`.
    package enum ContainerPrune {
        package static let id: Swift.String = "ContainerPrune"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/prune/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
                ///
                /// Available filters:
                /// - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
                /// - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/containers/prune/POST/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.ContainerPrune.Input.Query
            /// - Remark: Generated from `#/paths/containers/prune/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPrune.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerPrune.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerPrune.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.ContainerPrune.Input.Query = .init(),
                headers: Operations.ContainerPrune.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/prune/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/prune/POST/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// Container IDs that were deleted
                        ///
                        /// - Remark: Generated from `#/paths/containers/prune/POST/responses/200/content/json/ContainersDeleted`.
                        package var ContainersDeleted: [Swift.String]?
                        /// Disk space reclaimed in bytes
                        ///
                        /// - Remark: Generated from `#/paths/containers/prune/POST/responses/200/content/json/SpaceReclaimed`.
                        package var SpaceReclaimed: Swift.Int64?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ContainersDeleted: Container IDs that were deleted
                        ///   - SpaceReclaimed: Disk space reclaimed in bytes
                        package init(
                            ContainersDeleted: [Swift.String]? = nil,
                            SpaceReclaimed: Swift.Int64? = nil
                        ) {
                            self.ContainersDeleted = ContainersDeleted
                            self.SpaceReclaimed = SpaceReclaimed
                        }
                        package enum CodingKeys: String, CodingKey {
                            case ContainersDeleted
                            case SpaceReclaimed
                        }
                    }
                    /// - Remark: Generated from `#/paths/containers/prune/POST/responses/200/content/application\/json`.
                    case json(Operations.ContainerPrune.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ContainerPrune.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerPrune.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerPrune.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ContainerPrune.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ContainerPrune.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/prune/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/prune/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerPrune.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerPrune.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//containers/prune/post(ContainerPrune)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerPrune.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerPrune.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List Images
    ///
    /// Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
    ///
    /// - Remark: HTTP `GET /images/json`.
    /// - Remark: Generated from `#/paths//images/json/get(ImageList)`.
    package enum ImageList {
        package static let id: Swift.String = "ImageList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/json/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Show all images. Only images from a final layer (no children) are shown by default.
                ///
                /// - Remark: Generated from `#/paths/images/json/GET/query/all`.
                package var all: Swift.Bool?
                /// A JSON encoded value of the filters (a `map[string][]string`) to
                /// process on the images list.
                ///
                /// Available filters:
                ///
                /// - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                /// - `dangling=true`
                /// - `label=key` or `label="key=value"` of an image label
                /// - `reference`=(`<image-name>[:<tag>]`)
                /// - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                /// - `until=<timestamp>`
                ///
                ///
                /// - Remark: Generated from `#/paths/images/json/GET/query/filters`.
                package var filters: Swift.String?
                /// Compute and show shared size as a `SharedSize` field on each image.
                ///
                /// - Remark: Generated from `#/paths/images/json/GET/query/shared-size`.
                package var shared_hyphen_size: Swift.Bool?
                /// Show digest information as a `RepoDigests` field on each image.
                ///
                /// - Remark: Generated from `#/paths/images/json/GET/query/digests`.
                package var digests: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: Show all images. Only images from a final layer (no children) are shown by default.
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to
                ///   - shared_hyphen_size: Compute and show shared size as a `SharedSize` field on each image.
                ///   - digests: Show digest information as a `RepoDigests` field on each image.
                package init(
                    all: Swift.Bool? = nil,
                    filters: Swift.String? = nil,
                    shared_hyphen_size: Swift.Bool? = nil,
                    digests: Swift.Bool? = nil
                ) {
                    self.all = all
                    self.filters = filters
                    self.shared_hyphen_size = shared_hyphen_size
                    self.digests = digests
                }
            }
            package var query: Operations.ImageList.Input.Query
            /// - Remark: Generated from `#/paths/images/json/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.ImageList.Input.Query = .init(),
                headers: Operations.ImageList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/json/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/json/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ImageSummary])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.ImageSummary] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Summary image data for the images matching the query
            ///
            /// - Remark: Generated from `#/paths//images/json/get(ImageList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/json/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/json/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//images/json/get(ImageList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Build an image
    ///
    /// Build an image from a tar archive with a `Dockerfile` in it.
    ///
    /// The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).
    ///
    /// The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.
    ///
    /// The build is canceled if the client drops the connection by quitting or being killed.
    ///
    ///
    /// - Remark: HTTP `POST /build`.
    /// - Remark: Generated from `#/paths//build/post(ImageBuild)`.
    package enum ImageBuild {
        package static let id: Swift.String = "ImageBuild"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/build/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/dockerfile`.
                package var dockerfile: Swift.String?
                /// A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/t`.
                package var t: Swift.String?
                /// Extra hosts to add to /etc/hosts
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/extrahosts`.
                package var extrahosts: Swift.String?
                /// A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/remote`.
                package var remote: Swift.String?
                /// Suppress verbose build output.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/q`.
                package var q: Swift.Bool?
                /// Do not use the cache when building the image.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/nocache`.
                package var nocache: Swift.Bool?
                /// JSON array of images used for build cache resolution.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cachefrom`.
                package var cachefrom: Swift.String?
                /// Attempt to pull the image even if an older image exists locally.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/pull`.
                package var pull: Swift.String?
                /// Remove intermediate containers after a successful build.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/rm`.
                package var rm: Swift.Bool?
                /// Always remove intermediate containers, even upon failure.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/forcerm`.
                package var forcerm: Swift.Bool?
                /// Set memory limit for build.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/memory`.
                package var memory: Swift.Int?
                /// Total memory (memory + swap). Set as `-1` to disable swap.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/memswap`.
                package var memswap: Swift.Int?
                /// CPU shares (relative weight).
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cpushares`.
                package var cpushares: Swift.Int?
                /// CPUs in which to allow execution (e.g., `0-3`, `0,1`).
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cpusetcpus`.
                package var cpusetcpus: Swift.String?
                /// The length of a CPU period in microseconds.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cpuperiod`.
                package var cpuperiod: Swift.Int?
                /// Microseconds of CPU time that the container can get in a CPU period.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/cpuquota`.
                package var cpuquota: Swift.Int?
                /// JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.
                ///
                /// For example, the build arg `FOO=bar` would become `{"FOO":"bar"}` in JSON. This would result in the query parameter `buildargs={"FOO":"bar"}`. Note that `{"FOO":"bar"}` should be URI component encoded.
                ///
                /// [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/buildargs`.
                package var buildargs: Swift.String?
                /// Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/shmsize`.
                package var shmsize: Swift.Int?
                /// Squash the resulting images layers into a single layer. *(Experimental release only.)*
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/squash`.
                package var squash: Swift.Bool?
                /// Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/labels`.
                package var labels: Swift.String?
                /// Sets the networking mode for the run commands during build. Supported
                /// standard values are: `bridge`, `host`, `none`, and `container:<name|id>`.
                /// Any other value is taken as a custom network's name or ID to which this
                /// container should connect to.
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/networkmode`.
                package var networkmode: Swift.String?
                /// Platform in the format os[/arch[/variant]]
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/platform`.
                package var platform: Swift.String?
                /// Target build stage
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/target`.
                package var target: Swift.String?
                /// BuildKit output configuration
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/outputs`.
                package var outputs: Swift.String?
                /// - Remark: Generated from `#/paths/build/POST/query/version`.
                @frozen package enum versionPayload: String, Codable, Hashable, Sendable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// Version of the builder backend to use.
                ///
                /// - `1` is the first generation classic (deprecated) builder in the Docker daemon (default)
                /// - `2` is [BuildKit](https://github.com/moby/buildkit)
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/query/version`.
                package var version: Operations.ImageBuild.Input.Query.versionPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - dockerfile: Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`.
                ///   - t: A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters.
                ///   - extrahosts: Extra hosts to add to /etc/hosts
                ///   - remote: A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball.
                ///   - q: Suppress verbose build output.
                ///   - nocache: Do not use the cache when building the image.
                ///   - cachefrom: JSON array of images used for build cache resolution.
                ///   - pull: Attempt to pull the image even if an older image exists locally.
                ///   - rm: Remove intermediate containers after a successful build.
                ///   - forcerm: Always remove intermediate containers, even upon failure.
                ///   - memory: Set memory limit for build.
                ///   - memswap: Total memory (memory + swap). Set as `-1` to disable swap.
                ///   - cpushares: CPU shares (relative weight).
                ///   - cpusetcpus: CPUs in which to allow execution (e.g., `0-3`, `0,1`).
                ///   - cpuperiod: The length of a CPU period in microseconds.
                ///   - cpuquota: Microseconds of CPU time that the container can get in a CPU period.
                ///   - buildargs: JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.
                ///   - shmsize: Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB.
                ///   - squash: Squash the resulting images layers into a single layer. *(Experimental release only.)*
                ///   - labels: Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
                ///   - networkmode: Sets the networking mode for the run commands during build. Supported
                ///   - platform: Platform in the format os[/arch[/variant]]
                ///   - target: Target build stage
                ///   - outputs: BuildKit output configuration
                ///   - version: Version of the builder backend to use.
                package init(
                    dockerfile: Swift.String? = nil,
                    t: Swift.String? = nil,
                    extrahosts: Swift.String? = nil,
                    remote: Swift.String? = nil,
                    q: Swift.Bool? = nil,
                    nocache: Swift.Bool? = nil,
                    cachefrom: Swift.String? = nil,
                    pull: Swift.String? = nil,
                    rm: Swift.Bool? = nil,
                    forcerm: Swift.Bool? = nil,
                    memory: Swift.Int? = nil,
                    memswap: Swift.Int? = nil,
                    cpushares: Swift.Int? = nil,
                    cpusetcpus: Swift.String? = nil,
                    cpuperiod: Swift.Int? = nil,
                    cpuquota: Swift.Int? = nil,
                    buildargs: Swift.String? = nil,
                    shmsize: Swift.Int? = nil,
                    squash: Swift.Bool? = nil,
                    labels: Swift.String? = nil,
                    networkmode: Swift.String? = nil,
                    platform: Swift.String? = nil,
                    target: Swift.String? = nil,
                    outputs: Swift.String? = nil,
                    version: Operations.ImageBuild.Input.Query.versionPayload? = nil
                ) {
                    self.dockerfile = dockerfile
                    self.t = t
                    self.extrahosts = extrahosts
                    self.remote = remote
                    self.q = q
                    self.nocache = nocache
                    self.cachefrom = cachefrom
                    self.pull = pull
                    self.rm = rm
                    self.forcerm = forcerm
                    self.memory = memory
                    self.memswap = memswap
                    self.cpushares = cpushares
                    self.cpusetcpus = cpusetcpus
                    self.cpuperiod = cpuperiod
                    self.cpuquota = cpuquota
                    self.buildargs = buildargs
                    self.shmsize = shmsize
                    self.squash = squash
                    self.labels = labels
                    self.networkmode = networkmode
                    self.platform = platform
                    self.target = target
                    self.outputs = outputs
                    self.version = version
                }
            }
            package var query: Operations.ImageBuild.Input.Query
            /// - Remark: Generated from `#/paths/build/POST/header`.
            package struct Headers: Sendable, Hashable {
                /// This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.
                ///
                /// The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:
                ///
                /// ```
                /// {
                ///   "docker.example.com": {
                ///     "username": "janedoe",
                ///     "password": "hunter2"
                ///   },
                ///   "https://index.docker.io/v1/": {
                ///     "username": "mobydock",
                ///     "password": "conta1n3rize14"
                ///   }
                /// }
                /// ```
                ///
                /// Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.
                ///
                ///
                /// - Remark: Generated from `#/paths/build/POST/header/X-Registry-Config`.
                package var X_hyphen_Registry_hyphen_Config: Swift.String?
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageBuild.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Config: This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.
                ///   - accept:
                package init(
                    X_hyphen_Registry_hyphen_Config: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageBuild.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Config = X_hyphen_Registry_hyphen_Config
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageBuild.Input.Headers
            /// - Remark: Generated from `#/paths/build/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/build/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.ImageBuild.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                query: Operations.ImageBuild.Input.Query = .init(),
                headers: Operations.ImageBuild.Input.Headers = .init(),
                body: Operations.ImageBuild.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//build/post(ImageBuild)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageBuild.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageBuild.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/build/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/build/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageBuild.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageBuild.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad parameter
            ///
            /// - Remark: Generated from `#/paths//build/post(ImageBuild)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ImageBuild.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ImageBuild.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/build/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/build/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageBuild.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageBuild.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//build/post(ImageBuild)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageBuild.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageBuild.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete builder cache
    ///
    /// - Remark: HTTP `POST /build/prune`.
    /// - Remark: Generated from `#/paths//build/prune/post(BuildPrune)`.
    package enum BuildPrune {
        package static let id: Swift.String = "BuildPrune"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/build/prune/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Amount of disk space in bytes to keep for cache
                ///
                /// - Remark: Generated from `#/paths/build/prune/POST/query/keep-storage`.
                package var keep_hyphen_storage: Swift.Int64?
                /// Remove all types of build cache
                ///
                /// - Remark: Generated from `#/paths/build/prune/POST/query/all`.
                package var all: Swift.Bool?
                /// A JSON encoded value of the filters (a `map[string][]string`) to
                /// process on the list of build cache objects.
                ///
                /// Available filters:
                ///
                /// - `until=<timestamp>` remove cache older than `<timestamp>`. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon's local time.
                /// - `id=<id>`
                /// - `parent=<id>`
                /// - `type=<string>`
                /// - `description=<string>`
                /// - `inuse`
                /// - `shared`
                /// - `private`
                ///
                ///
                /// - Remark: Generated from `#/paths/build/prune/POST/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - keep_hyphen_storage: Amount of disk space in bytes to keep for cache
                ///   - all: Remove all types of build cache
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to
                package init(
                    keep_hyphen_storage: Swift.Int64? = nil,
                    all: Swift.Bool? = nil,
                    filters: Swift.String? = nil
                ) {
                    self.keep_hyphen_storage = keep_hyphen_storage
                    self.all = all
                    self.filters = filters
                }
            }
            package var query: Operations.BuildPrune.Input.Query
            /// - Remark: Generated from `#/paths/build/prune/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BuildPrune.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.BuildPrune.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.BuildPrune.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.BuildPrune.Input.Query = .init(),
                headers: Operations.BuildPrune.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/build/prune/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/build/prune/POST/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/build/prune/POST/responses/200/content/json/CachesDeleted`.
                        package var CachesDeleted: [Swift.String]?
                        /// Disk space reclaimed in bytes
                        ///
                        /// - Remark: Generated from `#/paths/build/prune/POST/responses/200/content/json/SpaceReclaimed`.
                        package var SpaceReclaimed: Swift.Int64?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - CachesDeleted:
                        ///   - SpaceReclaimed: Disk space reclaimed in bytes
                        package init(
                            CachesDeleted: [Swift.String]? = nil,
                            SpaceReclaimed: Swift.Int64? = nil
                        ) {
                            self.CachesDeleted = CachesDeleted
                            self.SpaceReclaimed = SpaceReclaimed
                        }
                        package enum CodingKeys: String, CodingKey {
                            case CachesDeleted
                            case SpaceReclaimed
                        }
                    }
                    /// - Remark: Generated from `#/paths/build/prune/POST/responses/200/content/application\/json`.
                    case json(Operations.BuildPrune.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.BuildPrune.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.BuildPrune.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.BuildPrune.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//build/prune/post(BuildPrune)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.BuildPrune.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.BuildPrune.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/build/prune/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/build/prune/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.BuildPrune.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.BuildPrune.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//build/prune/post(BuildPrune)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.BuildPrune.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.BuildPrune.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an image
    ///
    /// Pull or import an image.
    ///
    /// - Remark: HTTP `POST /images/create`.
    /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)`.
    package enum ImageCreate {
        package static let id: Swift.String = "ImageCreate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/create/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/fromImage`.
                package var fromImage: Swift.String?
                /// Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/fromSrc`.
                package var fromSrc: Swift.String?
                /// Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/repo`.
                package var repo: Swift.String?
                /// Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/tag`.
                package var tag: Swift.String?
                /// Set commit message for imported image.
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/message`.
                package var message: Swift.String?
                /// Apply `Dockerfile` instructions to the image that is created,
                /// for example: `changes=ENV DEBUG=true`.
                /// Note that `ENV DEBUG=true` should be URI component encoded.
                ///
                /// Supported `Dockerfile` instructions:
                /// `CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`
                ///
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/changes`.
                package var changes: [Swift.String]?
                /// Platform in the format os[/arch[/variant]].
                ///
                /// When used in combination with the `fromImage` option, the daemon checks
                /// if the given image is present in the local image cache with the given
                /// OS and Architecture, and otherwise attempts to pull the image. If the
                /// option is not set, the host's native OS and Architecture are used.
                /// If the given image does not exist in the local image cache, the daemon
                /// attempts to pull the image with the host's native OS and Architecture.
                /// If the given image does exists in the local image cache, but its OS or
                /// architecture does not match, a warning is produced.
                ///
                /// When used with the `fromSrc` option to import an image from an archive,
                /// this option sets the platform information for the imported image. If
                /// the option is not set, the host's native OS and Architecture are used
                /// for the imported image.
                ///
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/query/platform`.
                package var platform: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fromImage: Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
                ///   - fromSrc: Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image.
                ///   - repo: Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
                ///   - tag: Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
                ///   - message: Set commit message for imported image.
                ///   - changes: Apply `Dockerfile` instructions to the image that is created,
                ///   - platform: Platform in the format os[/arch[/variant]].
                package init(
                    fromImage: Swift.String? = nil,
                    fromSrc: Swift.String? = nil,
                    repo: Swift.String? = nil,
                    tag: Swift.String? = nil,
                    message: Swift.String? = nil,
                    changes: [Swift.String]? = nil,
                    platform: Swift.String? = nil
                ) {
                    self.fromImage = fromImage
                    self.fromSrc = fromSrc
                    self.repo = repo
                    self.tag = tag
                    self.message = message
                    self.changes = changes
                    self.platform = platform
                }
            }
            package var query: Operations.ImageCreate.Input.Query
            /// - Remark: Generated from `#/paths/images/create/POST/header`.
            package struct Headers: Sendable, Hashable {
                /// A base64url-encoded auth configuration.
                ///
                /// Refer to the [authentication section](#section/Authentication) for
                /// details.
                ///
                ///
                /// - Remark: Generated from `#/paths/images/create/POST/header/X-Registry-Auth`.
                package var X_hyphen_Registry_hyphen_Auth: Swift.String?
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: A base64url-encoded auth configuration.
                ///   - accept:
                package init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCreate.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageCreate.Input.Headers
            /// - Remark: Generated from `#/paths/images/create/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/create/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/images/create/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.ImageCreate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                query: Operations.ImageCreate.Input.Query = .init(),
                headers: Operations.ImageCreate.Input.Headers = .init(),
                body: Operations.ImageCreate.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/create/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/create/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageCreate.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageCreate.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// repository does not exist or no read access
            ///
            /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ImageCreate.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ImageCreate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/create/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/create/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageCreate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageCreate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//images/create/post(ImageCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageCreate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageCreate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inspect an image
    ///
    /// Return low-level information about an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/json`.
    /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)`.
    package enum ImageInspect {
        package static let id: Swift.String = "ImageInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/json/GET/path`.
            package struct Path: Sendable, Hashable {
                /// Image name or id
                ///
                /// - Remark: Generated from `#/paths/images/{name}/json/GET/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Image name or id
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.ImageInspect.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/json/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ImageInspect.Input.Path,
                headers: Operations.ImageInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/json/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/json/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImageInspect)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ImageInspect {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/json/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/json/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ImageInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ImageInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/json/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/json/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/json/get(ImageInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the history of an image
    ///
    /// Return parent layers of an image.
    ///
    /// - Remark: HTTP `GET /images/{name}/history`.
    /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)`.
    package enum ImageHistory {
        package static let id: Swift.String = "ImageHistory"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/history/GET/path`.
            package struct Path: Sendable, Hashable {
                /// Image name or ID
                ///
                /// - Remark: Generated from `#/paths/images/{name}/history/GET/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Image name or ID
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.ImageHistory.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/history/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageHistory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageHistory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ImageHistory.Input.Path,
                headers: Operations.ImageHistory.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// individual image layer information in response to ImageHistory operation
                    ///
                    /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content/jsonPayload`.
                    package struct jsonPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content/jsonPayload/Id`.
                        package var Id: Swift.String
                        /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content/jsonPayload/Created`.
                        package var Created: Swift.Int64
                        /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content/jsonPayload/CreatedBy`.
                        package var CreatedBy: Swift.String
                        /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content/jsonPayload/Tags`.
                        package var Tags: [Swift.String]
                        /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content/jsonPayload/Size`.
                        package var Size: Swift.Int64
                        /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content/jsonPayload/Comment`.
                        package var Comment: Swift.String
                        /// Creates a new `jsonPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - Id:
                        ///   - Created:
                        ///   - CreatedBy:
                        ///   - Tags:
                        ///   - Size:
                        ///   - Comment:
                        package init(
                            Id: Swift.String,
                            Created: Swift.Int64,
                            CreatedBy: Swift.String,
                            Tags: [Swift.String],
                            Size: Swift.Int64,
                            Comment: Swift.String
                        ) {
                            self.Id = Id
                            self.Created = Created
                            self.CreatedBy = CreatedBy
                            self.Tags = Tags
                            self.Size = Size
                            self.Comment = Comment
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Id
                            case Created
                            case CreatedBy
                            case Tags
                            case Size
                            case Comment
                        }
                    }
                    /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content/json`.
                    package typealias jsonPayload = [Operations.ImageHistory.Output.Ok.Body.jsonPayloadPayload]
                    /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/200/content/application\/json`.
                    case json(Operations.ImageHistory.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ImageHistory.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageHistory.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of image layers
            ///
            /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageHistory.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageHistory.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ImageHistory.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ImageHistory.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/history/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageHistory.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageHistory.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/history/get(ImageHistory)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageHistory.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageHistory.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Push an image
    ///
    /// Push an image to a registry.
    ///
    /// If you wish to push an image on to a private registry, that image must
    /// already have a tag which references the registry. For example,
    /// `registry.example.com/myimage:latest`.
    ///
    /// The push is cancelled if the HTTP connection is closed.
    ///
    ///
    /// - Remark: HTTP `POST /images/{name}/push`.
    /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)`.
    package enum ImagePush {
        package static let id: Swift.String = "ImagePush"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/push/POST/path`.
            package struct Path: Sendable, Hashable {
                /// Image name or ID.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Image name or ID.
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.ImagePush.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/push/POST/query`.
            package struct Query: Sendable, Hashable {
                /// The tag to associate with the image on the registry.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/query/tag`.
                package var tag: Swift.String?
                /// Select a platform-specific manifest to be pushed. OCI platform (JSON encoded)
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/query/platform`.
                package var platform: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - tag: The tag to associate with the image on the registry.
                ///   - platform: Select a platform-specific manifest to be pushed. OCI platform (JSON encoded)
                package init(
                    tag: Swift.String? = nil,
                    platform: Swift.String? = nil
                ) {
                    self.tag = tag
                    self.platform = platform
                }
            }
            package var query: Operations.ImagePush.Input.Query
            /// - Remark: Generated from `#/paths/images/{name}/push/POST/header`.
            package struct Headers: Sendable, Hashable {
                /// A base64url-encoded auth configuration.
                ///
                /// Refer to the [authentication section](#section/Authentication) for
                /// details.
                ///
                ///
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/header/X-Registry-Auth`.
                package var X_hyphen_Registry_hyphen_Auth: Swift.String
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePush.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: A base64url-encoded auth configuration.
                ///   - accept:
                package init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePush.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            package var headers: Operations.ImagePush.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ImagePush.Input.Path,
                query: Operations.ImagePush.Input.Query = .init(),
                headers: Operations.ImagePush.Input.Headers
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImagePush.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImagePush.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/push/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/images/{name}/push/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImagePush.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImagePush.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ImagePush.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ImagePush.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/push/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/push/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/images/{name}/push/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImagePush.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImagePush.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/push/post(ImagePush)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImagePush.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImagePush.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Tag an image
    ///
    /// Tag an image so that it becomes part of a repository.
    ///
    /// - Remark: HTTP `POST /images/{name}/tag`.
    /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)`.
    package enum ImageTag {
        package static let id: Swift.String = "ImageTag"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/tag/POST/path`.
            package struct Path: Sendable, Hashable {
                /// Image name or ID to tag.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Image name or ID to tag.
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.ImageTag.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/tag/POST/query`.
            package struct Query: Sendable, Hashable {
                /// The repository to tag in. For example, `someuser/someimage`.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/query/repo`.
                package var repo: Swift.String?
                /// The name of the new tag.
                ///
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/query/tag`.
                package var tag: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - repo: The repository to tag in. For example, `someuser/someimage`.
                ///   - tag: The name of the new tag.
                package init(
                    repo: Swift.String? = nil,
                    tag: Swift.String? = nil
                ) {
                    self.repo = repo
                    self.tag = tag
                }
            }
            package var query: Operations.ImageTag.Input.Query
            /// - Remark: Generated from `#/paths/images/{name}/tag/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageTag.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageTag.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageTag.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ImageTag.Input.Path,
                query: Operations.ImageTag.Input.Query = .init(),
                headers: Operations.ImageTag.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                package init() {}
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ImageTag.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ImageTag.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageTag.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageTag.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad parameter
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ImageTag.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ImageTag.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageTag.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageTag.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ImageTag.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ImageTag.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/409/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageTag.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageTag.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ImageTag.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ImageTag.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/images/{name}/tag/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageTag.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageTag.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/tag/post(ImageTag)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageTag.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageTag.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Remove an image
    ///
    /// Remove an image, along with any untagged parent images that were
    /// referenced by that image.
    ///
    /// Images can't be removed if they have descendant images, are being
    /// used by a running container or are being used by a build.
    ///
    ///
    /// - Remark: HTTP `DELETE /images/{name}`.
    /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)`.
    package enum ImageDelete {
        package static let id: Swift.String = "ImageDelete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// Image name or ID
                ///
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Image name or ID
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.ImageDelete.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/DELETE/query`.
            package struct Query: Sendable, Hashable {
                /// Remove the image even if it is being used by stopped containers or has other tags
                ///
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/query/force`.
                package var force: Swift.Bool?
                /// Do not delete untagged parent images
                ///
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/query/noprune`.
                package var noprune: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: Remove the image even if it is being used by stopped containers or has other tags
                ///   - noprune: Do not delete untagged parent images
                package init(
                    force: Swift.Bool? = nil,
                    noprune: Swift.Bool? = nil
                ) {
                    self.force = force
                    self.noprune = noprune
                }
            }
            package var query: Operations.ImageDelete.Input.Query
            /// - Remark: Generated from `#/paths/images/{name}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ImageDelete.Input.Path,
                query: Operations.ImageDelete.Input.Query = .init(),
                headers: Operations.ImageDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/DELETE/responses/200/content/application\/json`.
                    case json([Components.Schemas.ImageDeleteResponseItem])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.ImageDeleteResponseItem] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The image was deleted successfully
            ///
            /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such image
            ///
            /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ImageDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ImageDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageDelete.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageDelete.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ImageDelete.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ImageDelete.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/DELETE/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageDelete.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/delete(ImageDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageDelete.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageDelete.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search images
    ///
    /// Search for an image on Docker Hub.
    ///
    /// - Remark: HTTP `GET /images/search`.
    /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)`.
    package enum ImageSearch {
        package static let id: Swift.String = "ImageSearch"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/search/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Term to search
                ///
                /// - Remark: Generated from `#/paths/images/search/GET/query/term`.
                package var term: Swift.String
                /// Maximum number of results to return
                ///
                /// - Remark: Generated from `#/paths/images/search/GET/query/limit`.
                package var limit: Swift.Int?
                /// A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                ///
                /// - `is-official=(true|false)`
                /// - `stars=<number>` Matches images that has at least 'number' stars.
                ///
                ///
                /// - Remark: Generated from `#/paths/images/search/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - term: Term to search
                ///   - limit: Maximum number of results to return
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
                package init(
                    term: Swift.String,
                    limit: Swift.Int? = nil,
                    filters: Swift.String? = nil
                ) {
                    self.term = term
                    self.limit = limit
                    self.filters = filters
                }
            }
            package var query: Operations.ImageSearch.Input.Query
            /// - Remark: Generated from `#/paths/images/search/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageSearch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageSearch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageSearch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.ImageSearch.Input.Query,
                headers: Operations.ImageSearch.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/search/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/search/GET/responses/200/content/jsonPayload`.
                    package struct jsonPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/images/search/GET/responses/200/content/jsonPayload/description`.
                        package var description: Swift.String?
                        /// - Remark: Generated from `#/paths/images/search/GET/responses/200/content/jsonPayload/is_official`.
                        package var is_official: Swift.Bool?
                        /// Whether this repository has automated builds enabled.
                        ///
                        /// <p><br /></p>
                        ///
                        /// > **Deprecated**: This field is deprecated and will always be "false".
                        ///
                        ///
                        /// - Remark: Generated from `#/paths/images/search/GET/responses/200/content/jsonPayload/is_automated`.
                        package var is_automated: Swift.Bool?
                        /// - Remark: Generated from `#/paths/images/search/GET/responses/200/content/jsonPayload/name`.
                        package var name: Swift.String?
                        /// - Remark: Generated from `#/paths/images/search/GET/responses/200/content/jsonPayload/star_count`.
                        package var star_count: Swift.Int?
                        /// Creates a new `jsonPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - description:
                        ///   - is_official:
                        ///   - is_automated: Whether this repository has automated builds enabled.
                        ///   - name:
                        ///   - star_count:
                        package init(
                            description: Swift.String? = nil,
                            is_official: Swift.Bool? = nil,
                            is_automated: Swift.Bool? = nil,
                            name: Swift.String? = nil,
                            star_count: Swift.Int? = nil
                        ) {
                            self.description = description
                            self.is_official = is_official
                            self.is_automated = is_automated
                            self.name = name
                            self.star_count = star_count
                        }
                        package enum CodingKeys: String, CodingKey {
                            case description
                            case is_official
                            case is_automated
                            case name
                            case star_count
                        }
                    }
                    /// - Remark: Generated from `#/paths/images/search/GET/responses/200/content/json`.
                    package typealias jsonPayload = [Operations.ImageSearch.Output.Ok.Body.jsonPayloadPayload]
                    /// - Remark: Generated from `#/paths/images/search/GET/responses/200/content/application\/json`.
                    case json(Operations.ImageSearch.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ImageSearch.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageSearch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageSearch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageSearch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageSearch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/search/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/search/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageSearch.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageSearch.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//images/search/get(ImageSearch)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageSearch.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageSearch.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete unused images
    ///
    /// - Remark: HTTP `POST /images/prune`.
    /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)`.
    package enum ImagePrune {
        package static let id: Swift.String = "ImagePrune"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/prune/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:
                ///
                /// - `dangling=<boolean>` When set to `true` (or `1`), prune only
                ///    unused *and* untagged images. When set to `false`
                ///    (or `0`), all unused images are pruned.
                /// - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
                /// - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/images/prune/POST/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.ImagePrune.Input.Query
            /// - Remark: Generated from `#/paths/images/prune/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePrune.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImagePrune.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImagePrune.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.ImagePrune.Input.Query = .init(),
                headers: Operations.ImagePrune.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/prune/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/prune/POST/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// Images that were deleted
                        ///
                        /// - Remark: Generated from `#/paths/images/prune/POST/responses/200/content/json/ImagesDeleted`.
                        package var ImagesDeleted: [Components.Schemas.ImageDeleteResponseItem]?
                        /// Disk space reclaimed in bytes
                        ///
                        /// - Remark: Generated from `#/paths/images/prune/POST/responses/200/content/json/SpaceReclaimed`.
                        package var SpaceReclaimed: Swift.Int64?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ImagesDeleted: Images that were deleted
                        ///   - SpaceReclaimed: Disk space reclaimed in bytes
                        package init(
                            ImagesDeleted: [Components.Schemas.ImageDeleteResponseItem]? = nil,
                            SpaceReclaimed: Swift.Int64? = nil
                        ) {
                            self.ImagesDeleted = ImagesDeleted
                            self.SpaceReclaimed = SpaceReclaimed
                        }
                        package enum CodingKeys: String, CodingKey {
                            case ImagesDeleted
                            case SpaceReclaimed
                        }
                    }
                    /// - Remark: Generated from `#/paths/images/prune/POST/responses/200/content/application\/json`.
                    case json(Operations.ImagePrune.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ImagePrune.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImagePrune.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImagePrune.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImagePrune.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImagePrune.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/prune/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/prune/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImagePrune.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImagePrune.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//images/prune/post(ImagePrune)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImagePrune.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImagePrune.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check auth configuration
    ///
    /// Validate credentials for a registry and, if available, get an identity
    /// token for accessing the registry without password.
    ///
    ///
    /// - Remark: HTTP `POST /auth`.
    /// - Remark: Generated from `#/paths//auth/post(SystemAuth)`.
    package enum SystemAuth {
        package static let id: Swift.String = "SystemAuth"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemAuth.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemAuth.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SystemAuth.Input.Headers
            /// - Remark: Generated from `#/paths/auth/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AuthConfig)
            }
            package var body: Operations.SystemAuth.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.SystemAuth.Input.Headers = .init(),
                body: Operations.SystemAuth.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/POST/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// The status of the authentication
                        ///
                        /// - Remark: Generated from `#/paths/auth/POST/responses/200/content/json/Status`.
                        package var Status: Swift.String
                        /// An opaque token used to authenticate a user after a successful login
                        ///
                        /// - Remark: Generated from `#/paths/auth/POST/responses/200/content/json/IdentityToken`.
                        package var IdentityToken: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - Status: The status of the authentication
                        ///   - IdentityToken: An opaque token used to authenticate a user after a successful login
                        package init(
                            Status: Swift.String,
                            IdentityToken: Swift.String? = nil
                        ) {
                            self.Status = Status
                            self.IdentityToken = IdentityToken
                        }
                        package enum CodingKeys: String, CodingKey {
                            case Status
                            case IdentityToken
                        }
                    }
                    /// - Remark: Generated from `#/paths/auth/POST/responses/200/content/application\/json`.
                    case json(Operations.SystemAuth.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.SystemAuth.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemAuth.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemAuth.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// An identity token was generated successfully.
            ///
            /// - Remark: Generated from `#/paths//auth/post(SystemAuth)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemAuth.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SystemAuth.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//auth/post(SystemAuth)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.SystemAuth.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.SystemAuth.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/POST/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemAuth.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemAuth.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Auth error
            ///
            /// - Remark: Generated from `#/paths//auth/post(SystemAuth)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.SystemAuth.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.SystemAuth.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemAuth.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemAuth.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//auth/post(SystemAuth)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SystemAuth.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SystemAuth.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get system information
    ///
    /// - Remark: HTTP `GET /info`.
    /// - Remark: Generated from `#/paths//info/get(SystemInfo)`.
    package enum SystemInfo {
        package static let id: Swift.String = "SystemInfo"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/info/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SystemInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.SystemInfo.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/info/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/info/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SystemInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.SystemInfo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//info/get(SystemInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SystemInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/info/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/info/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemInfo.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemInfo.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//info/get(SystemInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SystemInfo.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SystemInfo.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get version
    ///
    /// Returns the version of Docker that is running and various information about the system that Docker is running on.
    ///
    /// - Remark: HTTP `GET /version`.
    /// - Remark: Generated from `#/paths//version/get(SystemVersion)`.
    package enum SystemVersion {
        package static let id: Swift.String = "SystemVersion"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/version/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemVersion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemVersion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SystemVersion.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.SystemVersion.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/version/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/version/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SystemVersion)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.SystemVersion {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemVersion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemVersion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//version/get(SystemVersion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemVersion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SystemVersion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/version/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/version/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemVersion.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemVersion.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//version/get(SystemVersion)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SystemVersion.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SystemVersion.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Ping
    ///
    /// This is a dummy endpoint you can use to test if the server is accessible.
    ///
    /// - Remark: HTTP `GET /_ping`.
    /// - Remark: Generated from `#/paths//_ping/get(SystemPing)`.
    package enum SystemPing {
        package static let id: Swift.String = "SystemPing"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/_ping/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemPing.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemPing.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SystemPing.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.SystemPing.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/_ping/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// Max API Version the server supports
                    ///
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/200/headers/API-Version`.
                    package var API_hyphen_Version: Swift.String?
                    /// Default version of docker image builder
                    ///
                    /// The default on Linux is version "2" (BuildKit), but the daemon
                    /// can be configured to recommend version "1" (classic Builder).
                    /// Windows does not yet support BuildKit for native Windows images,
                    /// and uses "1" (classic builder) as a default.
                    ///
                    /// This value is a recommendation as advertised by the daemon, and
                    /// it is up to the client to choose which builder to use.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/200/headers/Builder-Version`.
                    package var Builder_hyphen_Version: Swift.String?
                    /// If the server is running with experimental mode enabled
                    ///
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/200/headers/Docker-Experimental`.
                    package var Docker_hyphen_Experimental: Swift.Bool?
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/200/headers/Swarm`.
                    @frozen package enum SwarmPayload: String, Codable, Hashable, Sendable {
                        case inactive = "inactive"
                        case pending = "pending"
                        case error = "error"
                        case locked = "locked"
                        case active_sol_worker = "active/worker"
                        case active_sol_manager = "active/manager"
                    }
                    /// Contains information about Swarm status of the daemon,
                    /// and if the daemon is acting as a manager or worker node.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/200/headers/Swarm`.
                    package var Swarm: Operations.SystemPing.Output.Ok.Headers.SwarmPayload?
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/200/headers/Cache-Control`.
                    package var Cache_hyphen_Control: Swift.String?
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/200/headers/Pragma`.
                    package var Pragma: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - API_hyphen_Version: Max API Version the server supports
                    ///   - Builder_hyphen_Version: Default version of docker image builder
                    ///   - Docker_hyphen_Experimental: If the server is running with experimental mode enabled
                    ///   - Swarm: Contains information about Swarm status of the daemon,
                    ///   - Cache_hyphen_Control:
                    ///   - Pragma:
                    package init(
                        API_hyphen_Version: Swift.String? = nil,
                        Builder_hyphen_Version: Swift.String? = nil,
                        Docker_hyphen_Experimental: Swift.Bool? = nil,
                        Swarm: Operations.SystemPing.Output.Ok.Headers.SwarmPayload? = nil,
                        Cache_hyphen_Control: Swift.String? = nil,
                        Pragma: Swift.String? = nil
                    ) {
                        self.API_hyphen_Version = API_hyphen_Version
                        self.Builder_hyphen_Version = Builder_hyphen_Version
                        self.Docker_hyphen_Experimental = Docker_hyphen_Experimental
                        self.Swarm = Swarm
                        self.Cache_hyphen_Control = Cache_hyphen_Control
                        self.Pragma = Pragma
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.SystemPing.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/_ping/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemPing.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.SystemPing.Output.Ok.Headers = .init(),
                    body: Operations.SystemPing.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//_ping/get(SystemPing)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemPing.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SystemPing.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/_ping/GET/responses/500/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/500/headers/Cache-Control`.
                    package var Cache_hyphen_Control: Swift.String?
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/500/headers/Pragma`.
                    package var Pragma: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Cache_hyphen_Control:
                    ///   - Pragma:
                    package init(
                        Cache_hyphen_Control: Swift.String? = nil,
                        Pragma: Swift.String? = nil
                    ) {
                        self.Cache_hyphen_Control = Cache_hyphen_Control
                        self.Pragma = Pragma
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.SystemPing.Output.InternalServerError.Headers
                /// - Remark: Generated from `#/paths/_ping/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/_ping/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemPing.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.SystemPing.Output.InternalServerError.Headers = .init(),
                    body: Operations.SystemPing.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//_ping/get(SystemPing)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SystemPing.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SystemPing.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .plainText
                ]
            }
        }
    }
    /// Ping
    ///
    /// This is a dummy endpoint you can use to test if the server is accessible.
    ///
    /// - Remark: HTTP `HEAD /_ping`.
    /// - Remark: Generated from `#/paths//_ping/head(SystemPingHead)`.
    package enum SystemPingHead {
        package static let id: Swift.String = "SystemPingHead"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/_ping/HEAD/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemPingHead.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemPingHead.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SystemPingHead.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.SystemPingHead.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// Max API Version the server supports
                    ///
                    /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/headers/API-Version`.
                    package var API_hyphen_Version: Swift.String?
                    /// Default version of docker image builder
                    ///
                    /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/headers/Builder-Version`.
                    package var Builder_hyphen_Version: Swift.String?
                    /// If the server is running with experimental mode enabled
                    ///
                    /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/headers/Docker-Experimental`.
                    package var Docker_hyphen_Experimental: Swift.Bool?
                    /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/headers/Swarm`.
                    @frozen package enum SwarmPayload: String, Codable, Hashable, Sendable {
                        case inactive = "inactive"
                        case pending = "pending"
                        case error = "error"
                        case locked = "locked"
                        case active_sol_worker = "active/worker"
                        case active_sol_manager = "active/manager"
                    }
                    /// Contains information about Swarm status of the daemon,
                    /// and if the daemon is acting as a manager or worker node.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/headers/Swarm`.
                    package var Swarm: Operations.SystemPingHead.Output.Ok.Headers.SwarmPayload?
                    /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/headers/Cache-Control`.
                    package var Cache_hyphen_Control: Swift.String?
                    /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/headers/Pragma`.
                    package var Pragma: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - API_hyphen_Version: Max API Version the server supports
                    ///   - Builder_hyphen_Version: Default version of docker image builder
                    ///   - Docker_hyphen_Experimental: If the server is running with experimental mode enabled
                    ///   - Swarm: Contains information about Swarm status of the daemon,
                    ///   - Cache_hyphen_Control:
                    ///   - Pragma:
                    package init(
                        API_hyphen_Version: Swift.String? = nil,
                        Builder_hyphen_Version: Swift.String? = nil,
                        Docker_hyphen_Experimental: Swift.Bool? = nil,
                        Swarm: Operations.SystemPingHead.Output.Ok.Headers.SwarmPayload? = nil,
                        Cache_hyphen_Control: Swift.String? = nil,
                        Pragma: Swift.String? = nil
                    ) {
                        self.API_hyphen_Version = API_hyphen_Version
                        self.Builder_hyphen_Version = Builder_hyphen_Version
                        self.Docker_hyphen_Experimental = Docker_hyphen_Experimental
                        self.Swarm = Swarm
                        self.Cache_hyphen_Control = Cache_hyphen_Control
                        self.Pragma = Pragma
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.SystemPingHead.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/_ping/HEAD/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemPingHead.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.SystemPingHead.Output.Ok.Headers = .init(),
                    body: Operations.SystemPingHead.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//_ping/head(SystemPingHead)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemPingHead.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SystemPingHead.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/_ping/HEAD/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/_ping/HEAD/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemPingHead.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemPingHead.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//_ping/head(SystemPingHead)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SystemPingHead.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SystemPingHead.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .plainText
                ]
            }
        }
    }
    /// Create a new image from a container
    ///
    /// - Remark: HTTP `POST /commit`.
    /// - Remark: Generated from `#/paths//commit/post(ImageCommit)`.
    package enum ImageCommit {
        package static let id: Swift.String = "ImageCommit"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/commit/POST/query`.
            package struct Query: Sendable, Hashable {
                /// The ID or name of the container to commit
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/container`.
                package var container: Swift.String?
                /// Repository name for the created image
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/repo`.
                package var repo: Swift.String?
                /// Tag name for the create image
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/tag`.
                package var tag: Swift.String?
                /// Commit message
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/comment`.
                package var comment: Swift.String?
                /// Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/author`.
                package var author: Swift.String?
                /// Whether to pause the container before committing
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/pause`.
                package var pause: Swift.Bool?
                /// `Dockerfile` instructions to apply while committing
                ///
                /// - Remark: Generated from `#/paths/commit/POST/query/changes`.
                package var changes: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - container: The ID or name of the container to commit
                ///   - repo: Repository name for the created image
                ///   - tag: Tag name for the create image
                ///   - comment: Commit message
                ///   - author: Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)
                ///   - pause: Whether to pause the container before committing
                ///   - changes: `Dockerfile` instructions to apply while committing
                package init(
                    container: Swift.String? = nil,
                    repo: Swift.String? = nil,
                    tag: Swift.String? = nil,
                    comment: Swift.String? = nil,
                    author: Swift.String? = nil,
                    pause: Swift.Bool? = nil,
                    changes: Swift.String? = nil
                ) {
                    self.container = container
                    self.repo = repo
                    self.tag = tag
                    self.comment = comment
                    self.author = author
                    self.pause = pause
                    self.changes = changes
                }
            }
            package var query: Operations.ImageCommit.Input.Query
            /// - Remark: Generated from `#/paths/commit/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCommit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageCommit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageCommit.Input.Headers
            /// - Remark: Generated from `#/paths/commit/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commit/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ContainerConfig)
            }
            package var body: Operations.ImageCommit.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                query: Operations.ImageCommit.Input.Query = .init(),
                headers: Operations.ImageCommit.Input.Headers = .init(),
                body: Operations.ImageCommit.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commit/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/commit/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.IdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.IdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageCommit.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageCommit.Output.Created.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//commit/post(ImageCommit)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ImageCommit.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ImageCommit.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commit/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/commit/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageCommit.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageCommit.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//commit/post(ImageCommit)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ImageCommit.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ImageCommit.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commit/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/commit/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageCommit.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageCommit.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//commit/post(ImageCommit)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageCommit.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageCommit.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Monitor events
    ///
    /// Stream real-time events from the server.
    ///
    /// Various objects within Docker report events when something happens to them.
    ///
    /// Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`
    ///
    /// Images report these events: `create, `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`
    ///
    /// Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`
    ///
    /// Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`
    ///
    /// The Docker daemon reports these events: `reload`
    ///
    /// Services report these events: `create`, `update`, and `remove`
    ///
    /// Nodes report these events: `create`, `update`, and `remove`
    ///
    /// Secrets report these events: `create`, `update`, and `remove`
    ///
    /// Configs report these events: `create`, `update`, and `remove`
    ///
    /// The Builder reports `prune` events
    ///
    ///
    /// - Remark: HTTP `GET /events`.
    /// - Remark: Generated from `#/paths//events/get(SystemEvents)`.
    package enum SystemEvents {
        package static let id: Swift.String = "SystemEvents"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/events/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Show events created since this timestamp then stream new events.
                ///
                /// - Remark: Generated from `#/paths/events/GET/query/since`.
                package var since: Swift.String?
                /// Show events created until this timestamp then stop streaming.
                ///
                /// - Remark: Generated from `#/paths/events/GET/query/until`.
                package var until: Swift.String?
                /// A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:
                ///
                /// - `config=<string>` config name or ID
                /// - `container=<string>` container name or ID
                /// - `daemon=<string>` daemon name or ID
                /// - `event=<string>` event type
                /// - `image=<string>` image name or ID
                /// - `label=<string>` image or container label
                /// - `network=<string>` network name or ID
                /// - `node=<string>` node ID
                /// - `plugin`=<string> plugin name or ID
                /// - `scope`=<string> local or swarm
                /// - `secret=<string>` secret name or ID
                /// - `service=<string>` service name or ID
                /// - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`
                /// - `volume=<string>` volume name
                ///
                ///
                /// - Remark: Generated from `#/paths/events/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Show events created since this timestamp then stream new events.
                ///   - until: Show events created until this timestamp then stop streaming.
                ///   - filters: A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:
                package init(
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    filters: Swift.String? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.filters = filters
                }
            }
            package var query: Operations.SystemEvents.Input.Query
            /// - Remark: Generated from `#/paths/events/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemEvents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemEvents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SystemEvents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.SystemEvents.Input.Query = .init(),
                headers: Operations.SystemEvents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/events/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/events/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.EventMessage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.EventMessage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemEvents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemEvents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//events/get(SystemEvents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemEvents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SystemEvents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/events/GET/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/events/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemEvents.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemEvents.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//events/get(SystemEvents)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SystemEvents.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.SystemEvents.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/events/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/events/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemEvents.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemEvents.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//events/get(SystemEvents)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SystemEvents.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SystemEvents.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get data usage information
    ///
    /// - Remark: HTTP `GET /system/df`.
    /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)`.
    package enum SystemDataUsage {
        package static let id: Swift.String = "SystemDataUsage"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/df/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/df/GET/query/_typePayload`.
                @frozen package enum _typePayloadPayload: String, Codable, Hashable, Sendable {
                    case container = "container"
                    case image = "image"
                    case volume = "volume"
                    case build_hyphen_cache = "build-cache"
                }
                /// - Remark: Generated from `#/paths/system/df/GET/query/type`.
                package typealias _typePayload = [Operations.SystemDataUsage.Input.Query._typePayloadPayload]
                /// Object types, for which to compute and return data.
                ///
                ///
                /// - Remark: Generated from `#/paths/system/df/GET/query/type`.
                package var _type: Operations.SystemDataUsage.Input.Query._typePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _type: Object types, for which to compute and return data.
                package init(_type: Operations.SystemDataUsage.Input.Query._typePayload? = nil) {
                    self._type = _type
                }
            }
            package var query: Operations.SystemDataUsage.Input.Query
            /// - Remark: Generated from `#/paths/system/df/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemDataUsage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SystemDataUsage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SystemDataUsage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.SystemDataUsage.Input.Query = .init(),
                headers: Operations.SystemDataUsage.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/df/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/system/df/GET/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/system/df/GET/responses/200/content/json/LayersSize`.
                        package var LayersSize: Swift.Int64?
                        /// - Remark: Generated from `#/paths/system/df/GET/responses/200/content/json/Images`.
                        package var Images: [Components.Schemas.ImageSummary]?
                        /// - Remark: Generated from `#/paths/system/df/GET/responses/200/content/json/Containers`.
                        package var Containers: [Components.Schemas.ContainerSummary]?
                        /// - Remark: Generated from `#/paths/system/df/GET/responses/200/content/json/Volumes`.
                        package var Volumes: [Components.Schemas.Volume]?
                        /// - Remark: Generated from `#/paths/system/df/GET/responses/200/content/json/BuildCache`.
                        package var BuildCache: [Components.Schemas.BuildCache]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - LayersSize:
                        ///   - Images:
                        ///   - Containers:
                        ///   - Volumes:
                        ///   - BuildCache:
                        package init(
                            LayersSize: Swift.Int64? = nil,
                            Images: [Components.Schemas.ImageSummary]? = nil,
                            Containers: [Components.Schemas.ContainerSummary]? = nil,
                            Volumes: [Components.Schemas.Volume]? = nil,
                            BuildCache: [Components.Schemas.BuildCache]? = nil
                        ) {
                            self.LayersSize = LayersSize
                            self.Images = Images
                            self.Containers = Containers
                            self.Volumes = Volumes
                            self.BuildCache = BuildCache
                        }
                        package enum CodingKeys: String, CodingKey {
                            case LayersSize
                            case Images
                            case Containers
                            case Volumes
                            case BuildCache
                        }
                    }
                    /// - Remark: Generated from `#/paths/system/df/GET/responses/200/content/application\/json`.
                    case json(Operations.SystemDataUsage.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.SystemDataUsage.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/system/df/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemDataUsage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemDataUsage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SystemDataUsage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SystemDataUsage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/df/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/system/df/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/system/df/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SystemDataUsage.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SystemDataUsage.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//system/df/get(SystemDataUsage)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SystemDataUsage.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SystemDataUsage.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Export an image
    ///
    /// Get a tarball containing all images and metadata for a repository.
    ///
    /// If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.
    ///
    /// ### Image tarball format
    ///
    /// An image tarball contains one directory per image layer (named using its long ID), each containing these files:
    ///
    /// - `VERSION`: currently `1.0` - the file format version
    /// - `json`: detailed layer information, similar to `docker inspect layer_id`
    /// - `layer.tar`: A tarfile containing the filesystem changes in this layer
    ///
    /// The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.
    ///
    /// If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.
    ///
    /// ```json
    /// {
    ///   "hello-world": {
    ///     "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
    ///   }
    /// }
    /// ```
    ///
    ///
    /// - Remark: HTTP `GET /images/{name}/get`.
    /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)`.
    package enum ImageGet {
        package static let id: Swift.String = "ImageGet"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/{name}/get/GET/path`.
            package struct Path: Sendable, Hashable {
                /// Image name or ID
                ///
                /// - Remark: Generated from `#/paths/images/{name}/get/GET/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Image name or ID
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.ImageGet.Input.Path
            /// - Remark: Generated from `#/paths/images/{name}/get/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ImageGet.Input.Path,
                headers: Operations.ImageGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/get/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/get/GET/responses/200/content/application\/x-tar`.
                    case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_tar`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_tar`.
                    /// - SeeAlso: `.application_x_hyphen_tar`.
                    package var application_x_hyphen_tar: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_tar(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/{name}/get/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/{name}/get/GET/responses/500/content/application\/x-tar`.
                    case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_tar`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_tar`.
                    /// - SeeAlso: `.application_x_hyphen_tar`.
                    package var application_x_hyphen_tar: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_tar(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageGet.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageGet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//images/{name}/get/get(ImageGet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageGet.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageGet.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_tar
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-tar":
                    self = .application_x_hyphen_tar
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_tar:
                    return "application/x-tar"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_x_hyphen_tar
                ]
            }
        }
    }
    /// Export several images
    ///
    /// Get a tarball containing all images and metadata for several image
    /// repositories.
    ///
    /// For each value of the `names` parameter: if it is a specific name and
    /// tag (e.g. `ubuntu:latest`), then only that image (and its parents) are
    /// returned; if it is an image ID, similarly only that image (and its parents)
    /// are returned and there would be no names referenced in the 'repositories'
    /// file for this image ID.
    ///
    /// For details on the format, see the [export image endpoint](#operation/ImageGet).
    ///
    ///
    /// - Remark: HTTP `GET /images/get`.
    /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)`.
    package enum ImageGetAll {
        package static let id: Swift.String = "ImageGetAll"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/get/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Image names to filter by
                ///
                /// - Remark: Generated from `#/paths/images/get/GET/query/names`.
                package var names: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - names: Image names to filter by
                package init(names: [Swift.String]? = nil) {
                    self.names = names
                }
            }
            package var query: Operations.ImageGetAll.Input.Query
            /// - Remark: Generated from `#/paths/images/get/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGetAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageGetAll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageGetAll.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.ImageGetAll.Input.Query = .init(),
                headers: Operations.ImageGetAll.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/get/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/get/GET/responses/200/content/application\/x-tar`.
                    case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_tar`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_tar`.
                    /// - SeeAlso: `.application_x_hyphen_tar`.
                    package var application_x_hyphen_tar: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_tar(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageGetAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageGetAll.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageGetAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageGetAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/get/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/get/GET/responses/500/content/application\/x-tar`.
                    case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_tar`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_tar`.
                    /// - SeeAlso: `.application_x_hyphen_tar`.
                    package var application_x_hyphen_tar: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_tar(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageGetAll.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageGetAll.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//images/get/get(ImageGetAll)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageGetAll.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageGetAll.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_tar
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-tar":
                    self = .application_x_hyphen_tar
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_tar:
                    return "application/x-tar"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_x_hyphen_tar
                ]
            }
        }
    }
    /// Import images
    ///
    /// Load a set of images and tags into a repository.
    ///
    /// For details on the format, see the [export image endpoint](#operation/ImageGet).
    ///
    ///
    /// - Remark: HTTP `POST /images/load`.
    /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)`.
    package enum ImageLoad {
        package static let id: Swift.String = "ImageLoad"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/load/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Suppress progress details during load.
                ///
                /// - Remark: Generated from `#/paths/images/load/POST/query/quiet`.
                package var quiet: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - quiet: Suppress progress details during load.
                package init(quiet: Swift.Bool? = nil) {
                    self.quiet = quiet
                }
            }
            package var query: Operations.ImageLoad.Input.Query
            /// - Remark: Generated from `#/paths/images/load/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageLoad.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImageLoad.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ImageLoad.Input.Headers
            /// - Remark: Generated from `#/paths/images/load/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/load/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.ImageLoad.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                query: Operations.ImageLoad.Input.Query = .init(),
                headers: Operations.ImageLoad.Input.Headers = .init(),
                body: Operations.ImageLoad.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ImageLoad.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ImageLoad.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/load/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/load/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ImageLoad.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ImageLoad.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//images/load/post(ImageLoad)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ImageLoad.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ImageLoad.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an exec instance
    ///
    /// Run a command inside a running container.
    ///
    /// - Remark: HTTP `POST /containers/{id}/exec`.
    /// - Remark: Generated from `#/paths//containers/{id}/exec/post(ContainerExec)`.
    package enum ContainerExec {
        package static let id: Swift.String = "ContainerExec"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of container
                ///
                /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of container
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ContainerExec.Input.Path
            /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExec.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ContainerExec.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ContainerExec.Input.Headers
            /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// Attach to `stdin` of the exec command.
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/AttachStdin`.
                    package var AttachStdin: Swift.Bool?
                    /// Attach to `stdout` of the exec command.
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/AttachStdout`.
                    package var AttachStdout: Swift.Bool?
                    /// Attach to `stderr` of the exec command.
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/AttachStderr`.
                    package var AttachStderr: Swift.Bool?
                    /// Initial console size, as an `[height, width]` array.
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/ConsoleSize`.
                    package var ConsoleSize: [Swift.Int]?
                    /// Override the key sequence for detaching a container. Format is
                    /// a single character `[a-Z]` or `ctrl-<value>` where `<value>`
                    /// is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/DetachKeys`.
                    package var DetachKeys: Swift.String?
                    /// Allocate a pseudo-TTY.
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/Tty`.
                    package var Tty: Swift.Bool?
                    /// A list of environment variables in the form `["VAR=value", ...]`.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/Env`.
                    package var Env: [Swift.String]?
                    /// Command to run, as a string or array of strings.
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/Cmd`.
                    package var Cmd: [Swift.String]?
                    /// Runs the exec process with extended privileges.
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/Privileged`.
                    package var Privileged: Swift.Bool?
                    /// The user, and optionally, group to run the exec process inside
                    /// the container. Format is one of: `user`, `user:group`, `uid`,
                    /// or `uid:gid`.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/User`.
                    package var User: Swift.String?
                    /// The working directory for the exec process inside the container.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/json/WorkingDir`.
                    package var WorkingDir: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - AttachStdin: Attach to `stdin` of the exec command.
                    ///   - AttachStdout: Attach to `stdout` of the exec command.
                    ///   - AttachStderr: Attach to `stderr` of the exec command.
                    ///   - ConsoleSize: Initial console size, as an `[height, width]` array.
                    ///   - DetachKeys: Override the key sequence for detaching a container. Format is
                    ///   - Tty: Allocate a pseudo-TTY.
                    ///   - Env: A list of environment variables in the form `["VAR=value", ...]`.
                    ///   - Cmd: Command to run, as a string or array of strings.
                    ///   - Privileged: Runs the exec process with extended privileges.
                    ///   - User: The user, and optionally, group to run the exec process inside
                    ///   - WorkingDir: The working directory for the exec process inside the container.
                    package init(
                        AttachStdin: Swift.Bool? = nil,
                        AttachStdout: Swift.Bool? = nil,
                        AttachStderr: Swift.Bool? = nil,
                        ConsoleSize: [Swift.Int]? = nil,
                        DetachKeys: Swift.String? = nil,
                        Tty: Swift.Bool? = nil,
                        Env: [Swift.String]? = nil,
                        Cmd: [Swift.String]? = nil,
                        Privileged: Swift.Bool? = nil,
                        User: Swift.String? = nil,
                        WorkingDir: Swift.String? = nil
                    ) {
                        self.AttachStdin = AttachStdin
                        self.AttachStdout = AttachStdout
                        self.AttachStderr = AttachStderr
                        self.ConsoleSize = ConsoleSize
                        self.DetachKeys = DetachKeys
                        self.Tty = Tty
                        self.Env = Env
                        self.Cmd = Cmd
                        self.Privileged = Privileged
                        self.User = User
                        self.WorkingDir = WorkingDir
                    }
                    package enum CodingKeys: String, CodingKey {
                        case AttachStdin
                        case AttachStdout
                        case AttachStderr
                        case ConsoleSize
                        case DetachKeys
                        case Tty
                        case Env
                        case Cmd
                        case Privileged
                        case User
                        case WorkingDir
                    }
                }
                /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/requestBody/content/application\/json`.
                case json(Operations.ContainerExec.Input.Body.jsonPayload)
            }
            package var body: Operations.ContainerExec.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ContainerExec.Input.Path,
                headers: Operations.ContainerExec.Input.Headers = .init(),
                body: Operations.ContainerExec.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.IdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.IdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerExec.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerExec.Output.Created.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/exec/post(ContainerExec)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ContainerExec.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ContainerExec.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerExec.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerExec.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such container
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/exec/post(ContainerExec)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ContainerExec.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ContainerExec.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerExec.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerExec.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// container is paused
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/exec/post(ContainerExec)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ContainerExec.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ContainerExec.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/containers/{id}/exec/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ContainerExec.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ContainerExec.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//containers/{id}/exec/post(ContainerExec)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ContainerExec.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ContainerExec.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Start an exec instance
    ///
    /// Starts a previously set up exec instance. If detach is true, this endpoint
    /// returns immediately after starting the command. Otherwise, it sets up an
    /// interactive session with the command.
    ///
    ///
    /// - Remark: HTTP `POST /exec/{id}/start`.
    /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)`.
    package enum ExecStart {
        package static let id: Swift.String = "ExecStart"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exec/{id}/start/POST/path`.
            package struct Path: Sendable, Hashable {
                /// Exec instance ID
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/start/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Exec instance ID
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ExecStart.Input.Path
            /// - Remark: Generated from `#/paths/exec/{id}/start/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecStart.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecStart.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ExecStart.Input.Headers
            /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// Detach from the command.
                    ///
                    /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/json/Detach`.
                    package var Detach: Swift.Bool?
                    /// Allocate a pseudo-TTY.
                    ///
                    /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/json/Tty`.
                    package var Tty: Swift.Bool?
                    /// Initial console size, as an `[height, width]` array.
                    ///
                    /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/json/ConsoleSize`.
                    package var ConsoleSize: [Swift.Int]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - Detach: Detach from the command.
                    ///   - Tty: Allocate a pseudo-TTY.
                    ///   - ConsoleSize: Initial console size, as an `[height, width]` array.
                    package init(
                        Detach: Swift.Bool? = nil,
                        Tty: Swift.Bool? = nil,
                        ConsoleSize: [Swift.Int]? = nil
                    ) {
                        self.Detach = Detach
                        self.Tty = Tty
                        self.ConsoleSize = ConsoleSize
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Detach
                        case Tty
                        case ConsoleSize
                    }
                }
                /// - Remark: Generated from `#/paths/exec/{id}/start/POST/requestBody/content/application\/json`.
                case json(Operations.ExecStart.Input.Body.jsonPayload)
            }
            package var body: Operations.ExecStart.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ExecStart.Input.Path,
                headers: Operations.ExecStart.Input.Headers = .init(),
                body: Operations.ExecStart.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ExecStart.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ExecStart.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/start/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exec/{id}/start/POST/responses/404/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/exec/{id}/start/POST/responses/404/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ExecStart.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ExecStart.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such exec instance
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ExecStart.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ExecStart.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/start/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exec/{id}/start/POST/responses/409/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/exec/{id}/start/POST/responses/409/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ExecStart.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ExecStart.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Container is stopped or paused
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/start/post(ExecStart)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ExecStart.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ExecStart.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_vnd_period_docker_period_raw_hyphen_stream
            case application_vnd_period_docker_period_multiplexed_hyphen_stream
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/vnd.docker.raw-stream":
                    self = .application_vnd_period_docker_period_raw_hyphen_stream
                case "application/vnd.docker.multiplexed-stream":
                    self = .application_vnd_period_docker_period_multiplexed_hyphen_stream
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_vnd_period_docker_period_raw_hyphen_stream:
                    return "application/vnd.docker.raw-stream"
                case .application_vnd_period_docker_period_multiplexed_hyphen_stream:
                    return "application/vnd.docker.multiplexed-stream"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_vnd_period_docker_period_raw_hyphen_stream,
                    .application_vnd_period_docker_period_multiplexed_hyphen_stream
                ]
            }
        }
    }
    /// Resize an exec instance
    ///
    /// Resize the TTY session used by an exec instance. This endpoint only works
    /// if `tty` was specified as part of creating and starting the exec instance.
    ///
    ///
    /// - Remark: HTTP `POST /exec/{id}/resize`.
    /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)`.
    package enum ExecResize {
        package static let id: Swift.String = "ExecResize"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/path`.
            package struct Path: Sendable, Hashable {
                /// Exec instance ID
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Exec instance ID
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ExecResize.Input.Path
            /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Height of the TTY session in characters
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/query/h`.
                package var h: Swift.Int?
                /// Width of the TTY session in characters
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/query/w`.
                package var w: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - h: Height of the TTY session in characters
                ///   - w: Width of the TTY session in characters
                package init(
                    h: Swift.Int? = nil,
                    w: Swift.Int? = nil
                ) {
                    self.h = h
                    self.w = w
                }
            }
            package var query: Operations.ExecResize.Input.Query
            /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecResize.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecResize.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ExecResize.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ExecResize.Input.Path,
                query: Operations.ExecResize.Input.Query = .init(),
                headers: Operations.ExecResize.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ExecResize.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ExecResize.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ExecResize.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ExecResize.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ExecResize.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ExecResize.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ExecResize.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ExecResize.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such exec instance
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ExecResize.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ExecResize.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/exec/{id}/resize/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ExecResize.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ExecResize.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/resize/post(ExecResize)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ExecResize.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ExecResize.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Inspect an exec instance
    ///
    /// Return low-level information about an exec instance.
    ///
    /// - Remark: HTTP `GET /exec/{id}/json`.
    /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)`.
    package enum ExecInspect {
        package static let id: Swift.String = "ExecInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exec/{id}/json/GET/path`.
            package struct Path: Sendable, Hashable {
                /// Exec instance ID
                ///
                /// - Remark: Generated from `#/paths/exec/{id}/json/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Exec instance ID
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ExecInspect.Input.Path
            /// - Remark: Generated from `#/paths/exec/{id}/json/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExecInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ExecInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ExecInspect.Input.Path,
                headers: Operations.ExecInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/CanRemove`.
                        package var CanRemove: Swift.Bool?
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/DetachKeys`.
                        package var DetachKeys: Swift.String?
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/ID`.
                        package var ID: Swift.String?
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/Running`.
                        package var Running: Swift.Bool?
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/ExitCode`.
                        package var ExitCode: Swift.Int?
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/ProcessConfig`.
                        package var ProcessConfig: Components.Schemas.ProcessConfig?
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/OpenStdin`.
                        package var OpenStdin: Swift.Bool?
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/OpenStderr`.
                        package var OpenStderr: Swift.Bool?
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/OpenStdout`.
                        package var OpenStdout: Swift.Bool?
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/ContainerID`.
                        package var ContainerID: Swift.String?
                        /// The system process ID for the exec process.
                        ///
                        /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/json/Pid`.
                        package var Pid: Swift.Int?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - CanRemove:
                        ///   - DetachKeys:
                        ///   - ID:
                        ///   - Running:
                        ///   - ExitCode:
                        ///   - ProcessConfig:
                        ///   - OpenStdin:
                        ///   - OpenStderr:
                        ///   - OpenStdout:
                        ///   - ContainerID:
                        ///   - Pid: The system process ID for the exec process.
                        package init(
                            CanRemove: Swift.Bool? = nil,
                            DetachKeys: Swift.String? = nil,
                            ID: Swift.String? = nil,
                            Running: Swift.Bool? = nil,
                            ExitCode: Swift.Int? = nil,
                            ProcessConfig: Components.Schemas.ProcessConfig? = nil,
                            OpenStdin: Swift.Bool? = nil,
                            OpenStderr: Swift.Bool? = nil,
                            OpenStdout: Swift.Bool? = nil,
                            ContainerID: Swift.String? = nil,
                            Pid: Swift.Int? = nil
                        ) {
                            self.CanRemove = CanRemove
                            self.DetachKeys = DetachKeys
                            self.ID = ID
                            self.Running = Running
                            self.ExitCode = ExitCode
                            self.ProcessConfig = ProcessConfig
                            self.OpenStdin = OpenStdin
                            self.OpenStderr = OpenStderr
                            self.OpenStdout = OpenStdout
                            self.ContainerID = ContainerID
                            self.Pid = Pid
                        }
                        package enum CodingKeys: String, CodingKey {
                            case CanRemove
                            case DetachKeys
                            case ID
                            case Running
                            case ExitCode
                            case ProcessConfig
                            case OpenStdin
                            case OpenStderr
                            case OpenStdout
                            case ContainerID
                            case Pid
                        }
                    }
                    /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/200/content/application\/json`.
                    case json(Operations.ExecInspect.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ExecInspect.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ExecInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ExecInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ExecInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ExecInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ExecInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ExecInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such exec instance
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ExecInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ExecInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exec/{id}/json/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ExecInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ExecInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//exec/{id}/json/get(ExecInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ExecInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ExecInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List volumes
    ///
    /// - Remark: HTTP `GET /volumes`.
    /// - Remark: Generated from `#/paths//volumes/get(VolumeList)`.
    package enum VolumeList {
        package static let id: Swift.String = "VolumeList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/GET/query`.
            package struct Query: Sendable, Hashable {
                /// JSON encoded value of the filters (a `map[string][]string`) to
                /// process on the volumes list. Available filters:
                ///
                /// - `dangling=<boolean>` When set to `true` (or `1`), returns all
                ///    volumes that are not in use by a container. When set to `false`
                ///    (or `0`), only volumes that are in use by one or more
                ///    containers are returned.
                /// - `driver=<volume-driver-name>` Matches volumes based on their driver.
                /// - `label=<key>` or `label=<key>:<value>` Matches volumes based on
                ///    the presence of a `label` alone or a `label` and a value.
                /// - `name=<volume-name>` Matches all or part of a volume name.
                ///
                ///
                /// - Remark: Generated from `#/paths/volumes/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of the filters (a `map[string][]string`) to
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.VolumeList.Input.Query
            /// - Remark: Generated from `#/paths/volumes/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.VolumeList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.VolumeList.Input.Query = .init(),
                headers: Operations.VolumeList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VolumeListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.VolumeListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Summary volume data that matches the query
            ///
            /// - Remark: Generated from `#/paths//volumes/get(VolumeList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.VolumeList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.VolumeList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//volumes/get(VolumeList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.VolumeList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.VolumeList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a volume
    ///
    /// - Remark: HTTP `POST /volumes/create`.
    /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)`.
    package enum VolumeCreate {
        package static let id: Swift.String = "VolumeCreate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/create/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.VolumeCreate.Input.Headers
            /// - Remark: Generated from `#/paths/volumes/create/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.VolumeCreateOptions)
            }
            package var body: Operations.VolumeCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.VolumeCreate.Input.Headers = .init(),
                body: Operations.VolumeCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/create/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/create/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.Volume)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Volume {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeCreate.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeCreate.Output.Created.Body) {
                    self.body = body
                }
            }
            /// The volume was created successfully
            ///
            /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.VolumeCreate.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.VolumeCreate.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/create/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/create/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeCreate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeCreate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//volumes/create/post(VolumeCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.VolumeCreate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.VolumeCreate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inspect a volume
    ///
    /// - Remark: HTTP `GET /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)`.
    package enum VolumeInspect {
        package static let id: Swift.String = "VolumeInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/{name}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// Volume name or ID
                ///
                /// - Remark: Generated from `#/paths/volumes/{name}/GET/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Volume name or ID
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.VolumeInspect.Input.Path
            /// - Remark: Generated from `#/paths/volumes/{name}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.VolumeInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.VolumeInspect.Input.Path,
                headers: Operations.VolumeInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Volume)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Volume {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.VolumeInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.VolumeInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such volume
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.VolumeInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.VolumeInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/get(VolumeInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.VolumeInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.VolumeInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// "Update a volume. Valid only for Swarm cluster volumes"
    ///
    ///
    /// - Remark: HTTP `PUT /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/put(VolumeUpdate)`.
    package enum VolumeUpdate {
        package static let id: Swift.String = "VolumeUpdate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/{name}/PUT/path`.
            package struct Path: Sendable, Hashable {
                /// The name or ID of the volume
                ///
                /// - Remark: Generated from `#/paths/volumes/{name}/PUT/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: The name or ID of the volume
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.VolumeUpdate.Input.Path
            /// - Remark: Generated from `#/paths/volumes/{name}/PUT/query`.
            package struct Query: Sendable, Hashable {
                /// The version number of the volume being updated. This is required to
                /// avoid conflicting writes. Found in the volume's `ClusterVolume`
                /// field.
                ///
                ///
                /// - Remark: Generated from `#/paths/volumes/{name}/PUT/query/version`.
                package var version: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - version: The version number of the volume being updated. This is required to
                package init(version: Swift.Int64) {
                    self.version = version
                }
            }
            package var query: Operations.VolumeUpdate.Input.Query
            /// - Remark: Generated from `#/paths/volumes/{name}/PUT/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.VolumeUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/volumes/{name}/PUT/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// Volume configuration
                ///
                /// - Remark: Generated from `#/paths/volumes/{name}/PUT/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/PUT/requestBody/json/Spec`.
                    package var Spec: Components.Schemas.ClusterVolumeSpec?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - Spec:
                    package init(Spec: Components.Schemas.ClusterVolumeSpec? = nil) {
                        self.Spec = Spec
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Spec
                    }
                }
                /// - Remark: Generated from `#/paths/volumes/{name}/PUT/requestBody/content/application\/json`.
                case json(Operations.VolumeUpdate.Input.Body.jsonPayload)
            }
            package var body: Operations.VolumeUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.VolumeUpdate.Input.Path,
                query: Operations.VolumeUpdate.Input.Query,
                headers: Operations.VolumeUpdate.Input.Headers = .init(),
                body: Operations.VolumeUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/put(VolumeUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.VolumeUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.VolumeUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/PUT/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/PUT/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/put(VolumeUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.VolumeUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.VolumeUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/PUT/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/PUT/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeUpdate.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeUpdate.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such volume
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/put(VolumeUpdate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.VolumeUpdate.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.VolumeUpdate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/PUT/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeUpdate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeUpdate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/put(VolumeUpdate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.VolumeUpdate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.VolumeUpdate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/PUT/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/PUT/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeUpdate.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeUpdate.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/put(VolumeUpdate)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.VolumeUpdate.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.VolumeUpdate.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a volume
    ///
    /// Instruct the driver to remove the volume.
    ///
    /// - Remark: HTTP `DELETE /volumes/{name}`.
    /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)`.
    package enum VolumeDelete {
        package static let id: Swift.String = "VolumeDelete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// Volume name or ID
                ///
                /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Volume name or ID
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.VolumeDelete.Input.Path
            /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/query`.
            package struct Query: Sendable, Hashable {
                /// Force the removal of the volume
                ///
                /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/query/force`.
                package var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: Force the removal of the volume
                package init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            package var query: Operations.VolumeDelete.Input.Query
            /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumeDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.VolumeDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.VolumeDelete.Input.Path,
                query: Operations.VolumeDelete.Input.Query = .init(),
                headers: Operations.VolumeDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// The volume was removed
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.VolumeDelete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.VolumeDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No such volume or volume driver
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.VolumeDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.VolumeDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/responses/409/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeDelete.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeDelete.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Volume is in use and cannot be removed
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.VolumeDelete.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.VolumeDelete.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/volumes/{name}/DELETE/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumeDelete.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumeDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//volumes/{name}/delete(VolumeDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.VolumeDelete.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.VolumeDelete.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Delete unused volumes
    ///
    /// - Remark: HTTP `POST /volumes/prune`.
    /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)`.
    package enum VolumePrune {
        package static let id: Swift.String = "VolumePrune"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/volumes/prune/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
                ///
                /// Available filters:
                /// - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.
                /// - `all` (`all=true`) - Consider all (local) volumes for pruning and not just anonymous volumes.
                ///
                ///
                /// - Remark: Generated from `#/paths/volumes/prune/POST/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.VolumePrune.Input.Query
            /// - Remark: Generated from `#/paths/volumes/prune/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumePrune.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.VolumePrune.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.VolumePrune.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.VolumePrune.Input.Query = .init(),
                headers: Operations.VolumePrune.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/prune/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/prune/POST/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// Volumes that were deleted
                        ///
                        /// - Remark: Generated from `#/paths/volumes/prune/POST/responses/200/content/json/VolumesDeleted`.
                        package var VolumesDeleted: [Swift.String]?
                        /// Disk space reclaimed in bytes
                        ///
                        /// - Remark: Generated from `#/paths/volumes/prune/POST/responses/200/content/json/SpaceReclaimed`.
                        package var SpaceReclaimed: Swift.Int64?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - VolumesDeleted: Volumes that were deleted
                        ///   - SpaceReclaimed: Disk space reclaimed in bytes
                        package init(
                            VolumesDeleted: [Swift.String]? = nil,
                            SpaceReclaimed: Swift.Int64? = nil
                        ) {
                            self.VolumesDeleted = VolumesDeleted
                            self.SpaceReclaimed = SpaceReclaimed
                        }
                        package enum CodingKeys: String, CodingKey {
                            case VolumesDeleted
                            case SpaceReclaimed
                        }
                    }
                    /// - Remark: Generated from `#/paths/volumes/prune/POST/responses/200/content/application\/json`.
                    case json(Operations.VolumePrune.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.VolumePrune.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumePrune.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumePrune.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.VolumePrune.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.VolumePrune.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/volumes/prune/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/volumes/prune/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.VolumePrune.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.VolumePrune.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//volumes/prune/post(VolumePrune)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.VolumePrune.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.VolumePrune.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List networks
    ///
    /// Returns a list of networks. For details on the format, see the
    /// [network inspect endpoint](#operation/NetworkInspect).
    ///
    /// Note that it uses a different, smaller representation of a network than
    /// inspecting a single network. For example, the list of containers attached
    /// to the network is not propagated in API versions 1.28 and up.
    ///
    ///
    /// - Remark: HTTP `GET /networks`.
    /// - Remark: Generated from `#/paths//networks/get(NetworkList)`.
    package enum NetworkList {
        package static let id: Swift.String = "NetworkList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/GET/query`.
            package struct Query: Sendable, Hashable {
                /// JSON encoded value of the filters (a `map[string][]string`) to process
                /// on the networks list.
                ///
                /// Available filters:
                ///
                /// - `dangling=<boolean>` When set to `true` (or `1`), returns all
                ///    networks that are not in use by a container. When set to `false`
                ///    (or `0`), only networks that are in use by one or more
                ///    containers are returned.
                /// - `driver=<driver-name>` Matches a network's driver.
                /// - `id=<network-id>` Matches all or part of a network ID.
                /// - `label=<key>` or `label=<key>=<value>` of a network label.
                /// - `name=<network-name>` Matches all or part of a network name.
                /// - `scope=["swarm"|"global"|"local"]` Filters networks by scope (`swarm`, `global`, or `local`).
                /// - `type=["custom"|"builtin"]` Filters networks by type. The `custom` keyword returns all user-defined networks.
                ///
                ///
                /// - Remark: Generated from `#/paths/networks/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: JSON encoded value of the filters (a `map[string][]string`) to process
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.NetworkList.Input.Query
            /// - Remark: Generated from `#/paths/networks/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NetworkList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.NetworkList.Input.Query = .init(),
                headers: Operations.NetworkList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Network])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Network] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//networks/get(NetworkList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.NetworkList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//networks/get(NetworkList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NetworkList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NetworkList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inspect a network
    ///
    /// - Remark: HTTP `GET /networks/{id}`.
    /// - Remark: Generated from `#/paths//networks/{id}/get(NetworkInspect)`.
    package enum NetworkInspect {
        package static let id: Swift.String = "NetworkInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// Network ID or name
                ///
                /// - Remark: Generated from `#/paths/networks/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Network ID or name
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.NetworkInspect.Input.Path
            /// - Remark: Generated from `#/paths/networks/{id}/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Detailed inspect output for troubleshooting
                ///
                /// - Remark: Generated from `#/paths/networks/{id}/GET/query/verbose`.
                package var verbose: Swift.Bool?
                /// Filter the network by scope (swarm, global, or local)
                ///
                /// - Remark: Generated from `#/paths/networks/{id}/GET/query/scope`.
                package var scope: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - verbose: Detailed inspect output for troubleshooting
                ///   - scope: Filter the network by scope (swarm, global, or local)
                package init(
                    verbose: Swift.Bool? = nil,
                    scope: Swift.String? = nil
                ) {
                    self.verbose = verbose
                    self.scope = scope
                }
            }
            package var query: Operations.NetworkInspect.Input.Query
            /// - Remark: Generated from `#/paths/networks/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NetworkInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.NetworkInspect.Input.Path,
                query: Operations.NetworkInspect.Input.Query = .init(),
                headers: Operations.NetworkInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Network)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Network {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/get(NetworkInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.NetworkInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Network not found
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/get(NetworkInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.NetworkInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.NetworkInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/get(NetworkInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NetworkInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NetworkInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a network
    ///
    /// - Remark: HTTP `DELETE /networks/{id}`.
    /// - Remark: Generated from `#/paths//networks/{id}/delete(NetworkDelete)`.
    package enum NetworkDelete {
        package static let id: Swift.String = "NetworkDelete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// Network ID or name
                ///
                /// - Remark: Generated from `#/paths/networks/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Network ID or name
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.NetworkDelete.Input.Path
            /// - Remark: Generated from `#/paths/networks/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NetworkDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.NetworkDelete.Input.Path,
                headers: Operations.NetworkDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/delete(NetworkDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.NetworkDelete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.NetworkDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/DELETE/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/DELETE/responses/403/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkDelete.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkDelete.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// operation not supported for pre-defined networks
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/delete(NetworkDelete)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.NetworkDelete.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.NetworkDelete.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/DELETE/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such network
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/delete(NetworkDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.NetworkDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.NetworkDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/DELETE/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/DELETE/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkDelete.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/delete(NetworkDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NetworkDelete.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NetworkDelete.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Create a network
    ///
    /// - Remark: HTTP `POST /networks/create`.
    /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)`.
    package enum NetworkCreate {
        package static let id: Swift.String = "NetworkCreate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/create/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NetworkCreate.Input.Headers
            /// - Remark: Generated from `#/paths/networks/create/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The network's name.
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Name`.
                    package var Name: Swift.String
                    /// Name of the network driver plugin to use.
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Driver`.
                    package var Driver: Swift.String?
                    /// The level at which the network exists (e.g. `swarm` for cluster-wide
                    /// or `local` for machine level).
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Scope`.
                    package var Scope: Swift.String?
                    /// Restrict external access to the network.
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Internal`.
                    package var Internal: Swift.Bool?
                    /// Globally scoped network is manually attachable by regular
                    /// containers from workers in swarm mode.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Attachable`.
                    package var Attachable: Swift.Bool?
                    /// Ingress network is the network which provides the routing-mesh
                    /// in swarm mode.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Ingress`.
                    package var Ingress: Swift.Bool?
                    /// Creates a config-only network. Config-only networks are placeholder
                    /// networks for network configurations to be used by other networks.
                    /// Config-only networks cannot be used directly to run containers
                    /// or services.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/ConfigOnly`.
                    package var ConfigOnly: Swift.Bool?
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/ConfigFrom`.
                    package var ConfigFrom: Components.Schemas.ConfigReference?
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/IPAM`.
                    package var IPAM: Components.Schemas.IPAM?
                    /// Enable IPv6 on the network.
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/EnableIPv6`.
                    package var EnableIPv6: Swift.Bool?
                    /// Network specific options to be used by the drivers.
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Options`.
                    package struct OptionsPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        package var additionalProperties: [String: Swift.String]
                        /// Creates a new `OptionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        package init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        package init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        package func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// Network specific options to be used by the drivers.
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Options`.
                    package var Options: Operations.NetworkCreate.Input.Body.jsonPayload.OptionsPayload?
                    /// User-defined key/value metadata.
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Labels`.
                    package struct LabelsPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        package var additionalProperties: [String: Swift.String]
                        /// Creates a new `LabelsPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        package init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        package init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        package func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// User-defined key/value metadata.
                    ///
                    /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/json/Labels`.
                    package var Labels: Operations.NetworkCreate.Input.Body.jsonPayload.LabelsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - Name: The network's name.
                    ///   - Driver: Name of the network driver plugin to use.
                    ///   - Scope: The level at which the network exists (e.g. `swarm` for cluster-wide
                    ///   - Internal: Restrict external access to the network.
                    ///   - Attachable: Globally scoped network is manually attachable by regular
                    ///   - Ingress: Ingress network is the network which provides the routing-mesh
                    ///   - ConfigOnly: Creates a config-only network. Config-only networks are placeholder
                    ///   - ConfigFrom:
                    ///   - IPAM:
                    ///   - EnableIPv6: Enable IPv6 on the network.
                    ///   - Options: Network specific options to be used by the drivers.
                    ///   - Labels: User-defined key/value metadata.
                    package init(
                        Name: Swift.String,
                        Driver: Swift.String? = nil,
                        Scope: Swift.String? = nil,
                        Internal: Swift.Bool? = nil,
                        Attachable: Swift.Bool? = nil,
                        Ingress: Swift.Bool? = nil,
                        ConfigOnly: Swift.Bool? = nil,
                        ConfigFrom: Components.Schemas.ConfigReference? = nil,
                        IPAM: Components.Schemas.IPAM? = nil,
                        EnableIPv6: Swift.Bool? = nil,
                        Options: Operations.NetworkCreate.Input.Body.jsonPayload.OptionsPayload? = nil,
                        Labels: Operations.NetworkCreate.Input.Body.jsonPayload.LabelsPayload? = nil
                    ) {
                        self.Name = Name
                        self.Driver = Driver
                        self.Scope = Scope
                        self.Internal = Internal
                        self.Attachable = Attachable
                        self.Ingress = Ingress
                        self.ConfigOnly = ConfigOnly
                        self.ConfigFrom = ConfigFrom
                        self.IPAM = IPAM
                        self.EnableIPv6 = EnableIPv6
                        self.Options = Options
                        self.Labels = Labels
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Name
                        case Driver
                        case Scope
                        case Internal
                        case Attachable
                        case Ingress
                        case ConfigOnly
                        case ConfigFrom
                        case IPAM
                        case EnableIPv6
                        case Options
                        case Labels
                    }
                }
                /// - Remark: Generated from `#/paths/networks/create/POST/requestBody/content/application\/json`.
                case json(Operations.NetworkCreate.Input.Body.jsonPayload)
            }
            package var body: Operations.NetworkCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.NetworkCreate.Input.Headers = .init(),
                body: Operations.NetworkCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/create/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/create/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.NetworkCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.NetworkCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkCreate.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkCreate.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Network created successfully
            ///
            /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.NetworkCreate.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.NetworkCreate.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/create/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/create/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkCreate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkCreate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NetworkCreate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.NetworkCreate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/create/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/create/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkCreate.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkCreate.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden operation. This happens when trying to create a network named after a pre-defined network,
            /// or when trying to create an overlay network on a daemon which is not part of a Swarm cluster.
            ///
            ///
            /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.NetworkCreate.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.NetworkCreate.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/create/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/create/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkCreate.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkCreate.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// plugin not found
            ///
            /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.NetworkCreate.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.NetworkCreate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/create/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/create/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkCreate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkCreate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//networks/create/post(NetworkCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NetworkCreate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NetworkCreate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Connect a container to a network
    ///
    /// The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
    ///
    /// - Remark: HTTP `POST /networks/{id}/connect`.
    /// - Remark: Generated from `#/paths//networks/{id}/connect/post(NetworkConnect)`.
    package enum NetworkConnect {
        package static let id: Swift.String = "NetworkConnect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/path`.
            package struct Path: Sendable, Hashable {
                /// Network ID or name
                ///
                /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Network ID or name
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.NetworkConnect.Input.Path
            /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkConnect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkConnect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NetworkConnect.Input.Headers
            /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The ID or name of the container to connect to the network.
                    ///
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/requestBody/json/Container`.
                    package var Container: Swift.String?
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/requestBody/json/EndpointConfig`.
                    package var EndpointConfig: Components.Schemas.EndpointSettings?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - Container: The ID or name of the container to connect to the network.
                    ///   - EndpointConfig:
                    package init(
                        Container: Swift.String? = nil,
                        EndpointConfig: Components.Schemas.EndpointSettings? = nil
                    ) {
                        self.Container = Container
                        self.EndpointConfig = EndpointConfig
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Container
                        case EndpointConfig
                    }
                }
                /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/requestBody/content/application\/json`.
                case json(Operations.NetworkConnect.Input.Body.jsonPayload)
            }
            package var body: Operations.NetworkConnect.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.NetworkConnect.Input.Path,
                headers: Operations.NetworkConnect.Input.Headers = .init(),
                body: Operations.NetworkConnect.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/connect/post(NetworkConnect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkConnect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.NetworkConnect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkConnect.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkConnect.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/connect/post(NetworkConnect)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NetworkConnect.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.NetworkConnect.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/403/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkConnect.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkConnect.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Operation forbidden
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/connect/post(NetworkConnect)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.NetworkConnect.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.NetworkConnect.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkConnect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkConnect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Network or container not found
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/connect/post(NetworkConnect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.NetworkConnect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.NetworkConnect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/connect/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkConnect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkConnect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/connect/post(NetworkConnect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NetworkConnect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NetworkConnect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Disconnect a container from a network
    ///
    /// - Remark: HTTP `POST /networks/{id}/disconnect`.
    /// - Remark: Generated from `#/paths//networks/{id}/disconnect/post(NetworkDisconnect)`.
    package enum NetworkDisconnect {
        package static let id: Swift.String = "NetworkDisconnect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/path`.
            package struct Path: Sendable, Hashable {
                /// Network ID or name
                ///
                /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Network ID or name
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.NetworkDisconnect.Input.Path
            /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDisconnect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkDisconnect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NetworkDisconnect.Input.Headers
            /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The ID or name of the container to disconnect from the network.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/requestBody/json/Container`.
                    package var Container: Swift.String?
                    /// Force the container to disconnect from the network.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/requestBody/json/Force`.
                    package var Force: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - Container: The ID or name of the container to disconnect from the network.
                    ///   - Force: Force the container to disconnect from the network.
                    package init(
                        Container: Swift.String? = nil,
                        Force: Swift.Bool? = nil
                    ) {
                        self.Container = Container
                        self.Force = Force
                    }
                    package enum CodingKeys: String, CodingKey {
                        case Container
                        case Force
                    }
                }
                /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/requestBody/content/application\/json`.
                case json(Operations.NetworkDisconnect.Input.Body.jsonPayload)
            }
            package var body: Operations.NetworkDisconnect.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.NetworkDisconnect.Input.Path,
                headers: Operations.NetworkDisconnect.Input.Headers = .init(),
                body: Operations.NetworkDisconnect.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/disconnect/post(NetworkDisconnect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkDisconnect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.NetworkDisconnect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/responses/403/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkDisconnect.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkDisconnect.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Operation not supported for swarm scoped networks
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/disconnect/post(NetworkDisconnect)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.NetworkDisconnect.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.NetworkDisconnect.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkDisconnect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkDisconnect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Network or container not found
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/disconnect/post(NetworkDisconnect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.NetworkDisconnect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.NetworkDisconnect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/{id}/disconnect/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkDisconnect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkDisconnect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//networks/{id}/disconnect/post(NetworkDisconnect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NetworkDisconnect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NetworkDisconnect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Delete unused networks
    ///
    /// - Remark: HTTP `POST /networks/prune`.
    /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)`.
    package enum NetworkPrune {
        package static let id: Swift.String = "NetworkPrune"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/prune/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
                ///
                /// Available filters:
                /// - `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
                /// - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.
                ///
                ///
                /// - Remark: Generated from `#/paths/networks/prune/POST/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.NetworkPrune.Input.Query
            /// - Remark: Generated from `#/paths/networks/prune/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkPrune.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NetworkPrune.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NetworkPrune.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.NetworkPrune.Input.Query = .init(),
                headers: Operations.NetworkPrune.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/prune/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/prune/POST/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// Networks that were deleted
                        ///
                        /// - Remark: Generated from `#/paths/networks/prune/POST/responses/200/content/json/NetworksDeleted`.
                        package var NetworksDeleted: [Swift.String]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - NetworksDeleted: Networks that were deleted
                        package init(NetworksDeleted: [Swift.String]? = nil) {
                            self.NetworksDeleted = NetworksDeleted
                        }
                        package enum CodingKeys: String, CodingKey {
                            case NetworksDeleted
                        }
                    }
                    /// - Remark: Generated from `#/paths/networks/prune/POST/responses/200/content/application\/json`.
                    case json(Operations.NetworkPrune.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.NetworkPrune.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkPrune.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkPrune.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NetworkPrune.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.NetworkPrune.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/prune/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/prune/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NetworkPrune.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NetworkPrune.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//networks/prune/post(NetworkPrune)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NetworkPrune.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NetworkPrune.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List plugins
    ///
    /// Returns information about installed plugins.
    ///
    /// - Remark: HTTP `GET /plugins`.
    /// - Remark: Generated from `#/paths//plugins/get(PluginList)`.
    package enum PluginList {
        package static let id: Swift.String = "PluginList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/GET/query`.
            package struct Query: Sendable, Hashable {
                /// A JSON encoded value of the filters (a `map[string][]string`) to
                /// process on the plugin list.
                ///
                /// Available filters:
                ///
                /// - `capability=<capability name>`
                /// - `enable=<true>|<false>`
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.PluginList.Input.Query
            /// - Remark: Generated from `#/paths/plugins/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.PluginList.Input.Query = .init(),
                headers: Operations.PluginList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Plugin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Plugin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//plugins/get(PluginList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PluginList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PluginList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//plugins/get(PluginList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get plugin privileges
    ///
    /// - Remark: HTTP `GET /plugins/privileges`.
    /// - Remark: Generated from `#/paths//plugins/privileges/get(GetPluginPrivileges)`.
    package enum GetPluginPrivileges {
        package static let id: Swift.String = "GetPluginPrivileges"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/privileges/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The name of the plugin. The `:latest` tag is optional, and is the
                /// default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/privileges/GET/query/remote`.
                package var remote: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - remote: The name of the plugin. The `:latest` tag is optional, and is the
                package init(remote: Swift.String) {
                    self.remote = remote
                }
            }
            package var query: Operations.GetPluginPrivileges.Input.Query
            /// - Remark: Generated from `#/paths/plugins/privileges/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPluginPrivileges.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPluginPrivileges.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.GetPluginPrivileges.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.GetPluginPrivileges.Input.Query,
                headers: Operations.GetPluginPrivileges.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/privileges/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/privileges/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.PluginPrivilege])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.PluginPrivilege] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/privileges/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.GetPluginPrivileges.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.GetPluginPrivileges.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//plugins/privileges/get(GetPluginPrivileges)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetPluginPrivileges.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.GetPluginPrivileges.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/privileges/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/privileges/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/privileges/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.GetPluginPrivileges.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.GetPluginPrivileges.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//plugins/privileges/get(GetPluginPrivileges)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetPluginPrivileges.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.GetPluginPrivileges.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Install a plugin
    ///
    /// Pulls and installs a plugin. After the plugin is installed, it can be
    /// enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).
    ///
    ///
    /// - Remark: HTTP `POST /plugins/pull`.
    /// - Remark: Generated from `#/paths//plugins/pull/post(PluginPull)`.
    package enum PluginPull {
        package static let id: Swift.String = "PluginPull"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/pull/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Remote reference for plugin to install.
                ///
                /// The `:latest` tag is optional, and is used as the default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/pull/POST/query/remote`.
                package var remote: Swift.String
                /// Local name for the pulled plugin.
                ///
                /// The `:latest` tag is optional, and is used as the default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/pull/POST/query/name`.
                package var name: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - remote: Remote reference for plugin to install.
                ///   - name: Local name for the pulled plugin.
                package init(
                    remote: Swift.String,
                    name: Swift.String? = nil
                ) {
                    self.remote = remote
                    self.name = name
                }
            }
            package var query: Operations.PluginPull.Input.Query
            /// - Remark: Generated from `#/paths/plugins/pull/POST/header`.
            package struct Headers: Sendable, Hashable {
                /// A base64url-encoded auth configuration to use when pulling a plugin
                /// from a registry.
                ///
                /// Refer to the [authentication section](#section/Authentication) for
                /// details.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/pull/POST/header/X-Registry-Auth`.
                package var X_hyphen_Registry_hyphen_Auth: Swift.String?
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginPull.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: A base64url-encoded auth configuration to use when pulling a plugin
                ///   - accept:
                package init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginPull.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginPull.Input.Headers
            package var body: Components.RequestBodies.PluginPrivilegeArray?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                query: Operations.PluginPull.Input.Query,
                headers: Operations.PluginPull.Input.Headers = .init(),
                body: Components.RequestBodies.PluginPrivilegeArray? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//plugins/pull/post(PluginPull)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.PluginPull.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.PluginPull.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/pull/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/pull/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginPull.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginPull.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//plugins/pull/post(PluginPull)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginPull.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginPull.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inspect a plugin
    ///
    /// - Remark: HTTP `GET /plugins/{name}/json`.
    /// - Remark: Generated from `#/paths//plugins/{name}/json/get(PluginInspect)`.
    package enum PluginInspect {
        package static let id: Swift.String = "PluginInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The name of the plugin. The `:latest` tag is optional, and is the
                /// default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: The name of the plugin. The `:latest` tag is optional, and is the
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.PluginInspect.Input.Path
            /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.PluginInspect.Input.Path,
                headers: Operations.PluginInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Plugin)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Plugin {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/json/get(PluginInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PluginInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PluginInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// plugin is not installed
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/json/get(PluginInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PluginInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.PluginInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/json/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/json/get(PluginInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Remove a plugin
    ///
    /// - Remark: HTTP `DELETE /plugins/{name}`.
    /// - Remark: Generated from `#/paths//plugins/{name}/delete(PluginDelete)`.
    package enum PluginDelete {
        package static let id: Swift.String = "PluginDelete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The name of the plugin. The `:latest` tag is optional, and is the
                /// default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: The name of the plugin. The `:latest` tag is optional, and is the
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.PluginDelete.Input.Path
            /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/query`.
            package struct Query: Sendable, Hashable {
                /// Disable the plugin before removing. This may result in issues if the
                /// plugin is in use by a container.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/query/force`.
                package var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: Disable the plugin before removing. This may result in issues if the
                package init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            package var query: Operations.PluginDelete.Input.Query
            /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.PluginDelete.Input.Path,
                query: Operations.PluginDelete.Input.Query = .init(),
                headers: Operations.PluginDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.Plugin)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Plugin {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/delete(PluginDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PluginDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PluginDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// plugin is not installed
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/delete(PluginDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PluginDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.PluginDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/DELETE/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginDelete.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/delete(PluginDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginDelete.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginDelete.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Enable a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/enable`.
    /// - Remark: Generated from `#/paths//plugins/{name}/enable/post(PluginEnable)`.
    package enum PluginEnable {
        package static let id: Swift.String = "PluginEnable"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The name of the plugin. The `:latest` tag is optional, and is the
                /// default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: The name of the plugin. The `:latest` tag is optional, and is the
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.PluginEnable.Input.Path
            /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Set the HTTP client timeout (in seconds)
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/query/timeout`.
                package var timeout: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - timeout: Set the HTTP client timeout (in seconds)
                package init(timeout: Swift.Int? = nil) {
                    self.timeout = timeout
                }
            }
            package var query: Operations.PluginEnable.Input.Query
            /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginEnable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginEnable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginEnable.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.PluginEnable.Input.Path,
                query: Operations.PluginEnable.Input.Query = .init(),
                headers: Operations.PluginEnable.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/enable/post(PluginEnable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PluginEnable.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PluginEnable.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginEnable.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginEnable.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// plugin is not installed
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/enable/post(PluginEnable)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PluginEnable.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.PluginEnable.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/enable/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginEnable.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginEnable.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/enable/post(PluginEnable)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginEnable.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginEnable.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Disable a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/disable`.
    /// - Remark: Generated from `#/paths//plugins/{name}/disable/post(PluginDisable)`.
    package enum PluginDisable {
        package static let id: Swift.String = "PluginDisable"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The name of the plugin. The `:latest` tag is optional, and is the
                /// default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: The name of the plugin. The `:latest` tag is optional, and is the
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.PluginDisable.Input.Path
            /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Force disable a plugin even if still in use.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/query/force`.
                package var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: Force disable a plugin even if still in use.
                package init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            package var query: Operations.PluginDisable.Input.Query
            /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginDisable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginDisable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginDisable.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.PluginDisable.Input.Path,
                query: Operations.PluginDisable.Input.Query = .init(),
                headers: Operations.PluginDisable.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/disable/post(PluginDisable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PluginDisable.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PluginDisable.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginDisable.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginDisable.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// plugin is not installed
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/disable/post(PluginDisable)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PluginDisable.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.PluginDisable.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/disable/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginDisable.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginDisable.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/disable/post(PluginDisable)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginDisable.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginDisable.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Upgrade a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/upgrade`.
    /// - Remark: Generated from `#/paths//plugins/{name}/upgrade/post(PluginUpgrade)`.
    package enum PluginUpgrade {
        package static let id: Swift.String = "PluginUpgrade"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The name of the plugin. The `:latest` tag is optional, and is the
                /// default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: The name of the plugin. The `:latest` tag is optional, and is the
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.PluginUpgrade.Input.Path
            /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Remote reference to upgrade to.
                ///
                /// The `:latest` tag is optional, and is used as the default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/query/remote`.
                package var remote: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - remote: Remote reference to upgrade to.
                package init(remote: Swift.String) {
                    self.remote = remote
                }
            }
            package var query: Operations.PluginUpgrade.Input.Query
            /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/header`.
            package struct Headers: Sendable, Hashable {
                /// A base64url-encoded auth configuration to use when pulling a plugin
                /// from a registry.
                ///
                /// Refer to the [authentication section](#section/Authentication) for
                /// details.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/header/X-Registry-Auth`.
                package var X_hyphen_Registry_hyphen_Auth: Swift.String?
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginUpgrade.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: A base64url-encoded auth configuration to use when pulling a plugin
                ///   - accept:
                package init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginUpgrade.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginUpgrade.Input.Headers
            package var body: Components.RequestBodies.PluginPrivilegeArray?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.PluginUpgrade.Input.Path,
                query: Operations.PluginUpgrade.Input.Query,
                headers: Operations.PluginUpgrade.Input.Headers = .init(),
                body: Components.RequestBodies.PluginPrivilegeArray? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/upgrade/post(PluginUpgrade)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.PluginUpgrade.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.PluginUpgrade.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginUpgrade.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginUpgrade.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// plugin not installed
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/upgrade/post(PluginUpgrade)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PluginUpgrade.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.PluginUpgrade.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/upgrade/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginUpgrade.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginUpgrade.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/upgrade/post(PluginUpgrade)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginUpgrade.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginUpgrade.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Create a plugin
    ///
    /// - Remark: HTTP `POST /plugins/create`.
    /// - Remark: Generated from `#/paths//plugins/create/post(PluginCreate)`.
    package enum PluginCreate {
        package static let id: Swift.String = "PluginCreate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/create/POST/query`.
            package struct Query: Sendable, Hashable {
                /// The name of the plugin. The `:latest` tag is optional, and is the
                /// default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/create/POST/query/name`.
                package var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: The name of the plugin. The `:latest` tag is optional, and is the
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var query: Operations.PluginCreate.Input.Query
            /// - Remark: Generated from `#/paths/plugins/create/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginCreate.Input.Headers
            /// - Remark: Generated from `#/paths/plugins/create/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/create/POST/requestBody/content/application\/x-tar`.
                case application_x_hyphen_tar(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.PluginCreate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                query: Operations.PluginCreate.Input.Query,
                headers: Operations.PluginCreate.Input.Headers = .init(),
                body: Operations.PluginCreate.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//plugins/create/post(PluginCreate)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.PluginCreate.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.PluginCreate.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/create/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/create/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/create/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginCreate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginCreate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//plugins/create/post(PluginCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginCreate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginCreate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Push a plugin
    ///
    /// Push a plugin to the registry.
    ///
    ///
    /// - Remark: HTTP `POST /plugins/{name}/push`.
    /// - Remark: Generated from `#/paths//plugins/{name}/push/post(PluginPush)`.
    package enum PluginPush {
        package static let id: Swift.String = "PluginPush"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/{name}/push/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The name of the plugin. The `:latest` tag is optional, and is the
                /// default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/push/POST/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: The name of the plugin. The `:latest` tag is optional, and is the
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.PluginPush.Input.Path
            /// - Remark: Generated from `#/paths/plugins/{name}/push/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginPush.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginPush.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginPush.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.PluginPush.Input.Path,
                headers: Operations.PluginPush.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/push/post(PluginPush)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PluginPush.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PluginPush.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/push/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/push/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/push/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginPush.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginPush.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// plugin not installed
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/push/post(PluginPush)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PluginPush.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.PluginPush.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/push/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/push/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/push/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginPush.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginPush.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/push/post(PluginPush)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginPush.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginPush.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Configure a plugin
    ///
    /// - Remark: HTTP `POST /plugins/{name}/set`.
    /// - Remark: Generated from `#/paths//plugins/{name}/set/post(PluginSet)`.
    package enum PluginSet {
        package static let id: Swift.String = "PluginSet"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The name of the plugin. The `:latest` tag is optional, and is the
                /// default if omitted.
                ///
                ///
                /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: The name of the plugin. The `:latest` tag is optional, and is the
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.PluginSet.Input.Path
            /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PluginSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PluginSet.Input.Headers
            /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/requestBody/content/application\/json`.
                case json([Swift.String])
            }
            package var body: Operations.PluginSet.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.PluginSet.Input.Path,
                headers: Operations.PluginSet.Input.Headers = .init(),
                body: Operations.PluginSet.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// No error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/set/post(PluginSet)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.PluginSet.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.PluginSet.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginSet.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginSet.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Plugin not installed
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/set/post(PluginSet)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PluginSet.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.PluginSet.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/plugins/{name}/set/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PluginSet.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PluginSet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//plugins/{name}/set/post(PluginSet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PluginSet.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PluginSet.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// List nodes
    ///
    /// - Remark: HTTP `GET /nodes`.
    /// - Remark: Generated from `#/paths//nodes/get(NodeList)`.
    package enum NodeList {
        package static let id: Swift.String = "NodeList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/nodes/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).
                ///
                /// Available filters:
                /// - `id=<node id>`
                /// - `label=<engine label>`
                /// - `membership=`(`accepted`|`pending`)`
                /// - `name=<node name>`
                /// - `node.label=<node label>`
                /// - `role=`(`manager`|`worker`)`
                ///
                ///
                /// - Remark: Generated from `#/paths/nodes/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.NodeList.Input.Query
            /// - Remark: Generated from `#/paths/nodes/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NodeList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NodeList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NodeList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.NodeList.Input.Query = .init(),
                headers: Operations.NodeList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Node])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Node] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//nodes/get(NodeList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NodeList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.NodeList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//nodes/get(NodeList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NodeList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NodeList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/GET/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeList.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeList.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//nodes/get(NodeList)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.NodeList.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.NodeList.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Inspect a node
    ///
    /// - Remark: HTTP `GET /nodes/{id}`.
    /// - Remark: Generated from `#/paths//nodes/{id}/get(NodeInspect)`.
    package enum NodeInspect {
        package static let id: Swift.String = "NodeInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/nodes/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The ID or name of the node
                ///
                /// - Remark: Generated from `#/paths/nodes/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The ID or name of the node
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.NodeInspect.Input.Path
            /// - Remark: Generated from `#/paths/nodes/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NodeInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NodeInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NodeInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.NodeInspect.Input.Path,
                headers: Operations.NodeInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Node)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Node {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/get(NodeInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NodeInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.NodeInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such node
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/get(NodeInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.NodeInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.NodeInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/get(NodeInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NodeInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NodeInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/GET/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeInspect.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeInspect.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/get(NodeInspect)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.NodeInspect.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.NodeInspect.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Delete a node
    ///
    /// - Remark: HTTP `DELETE /nodes/{id}`.
    /// - Remark: Generated from `#/paths//nodes/{id}/delete(NodeDelete)`.
    package enum NodeDelete {
        package static let id: Swift.String = "NodeDelete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The ID or name of the node
                ///
                /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The ID or name of the node
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.NodeDelete.Input.Path
            /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/query`.
            package struct Query: Sendable, Hashable {
                /// Force remove a node from the swarm
                ///
                /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/query/force`.
                package var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: Force remove a node from the swarm
                package init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            package var query: Operations.NodeDelete.Input.Query
            /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NodeDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NodeDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NodeDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.NodeDelete.Input.Path,
                query: Operations.NodeDelete.Input.Query = .init(),
                headers: Operations.NodeDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/delete(NodeDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NodeDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.NodeDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such node
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/delete(NodeDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.NodeDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.NodeDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeDelete.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/delete(NodeDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NodeDelete.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NodeDelete.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/DELETE/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeDelete.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeDelete.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/delete(NodeDelete)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.NodeDelete.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.NodeDelete.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Update a node
    ///
    /// - Remark: HTTP `POST /nodes/{id}/update`.
    /// - Remark: Generated from `#/paths//nodes/{id}/update/post(NodeUpdate)`.
    package enum NodeUpdate {
        package static let id: Swift.String = "NodeUpdate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The ID of the node
                ///
                /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The ID of the node
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.NodeUpdate.Input.Path
            /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/query`.
            package struct Query: Sendable, Hashable {
                /// The version number of the node object being updated. This is required
                /// to avoid conflicting writes.
                ///
                ///
                /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/query/version`.
                package var version: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - version: The version number of the node object being updated. This is required
                package init(version: Swift.Int64) {
                    self.version = version
                }
            }
            package var query: Operations.NodeUpdate.Input.Query
            /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NodeUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.NodeUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.NodeUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.NodeSpec)
                /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.NodeUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.NodeUpdate.Input.Path,
                query: Operations.NodeUpdate.Input.Query,
                headers: Operations.NodeUpdate.Input.Headers = .init(),
                body: Operations.NodeUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/update/post(NodeUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.NodeUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.NodeUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/update/post(NodeUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.NodeUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.NodeUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeUpdate.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeUpdate.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such node
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/update/post(NodeUpdate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.NodeUpdate.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.NodeUpdate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeUpdate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeUpdate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/update/post(NodeUpdate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.NodeUpdate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.NodeUpdate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/nodes/{id}/update/POST/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.NodeUpdate.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.NodeUpdate.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//nodes/{id}/update/post(NodeUpdate)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.NodeUpdate.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.NodeUpdate.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Inspect swarm
    ///
    /// - Remark: HTTP `GET /swarm`.
    /// - Remark: Generated from `#/paths//swarm/get(SwarmInspect)`.
    package enum SwarmInspect {
        package static let id: Swift.String = "SwarmInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/swarm/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SwarmInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.SwarmInspect.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Swarm)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Swarm {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//swarm/get(SwarmInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SwarmInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SwarmInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/GET/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such swarm
            ///
            /// - Remark: Generated from `#/paths//swarm/get(SwarmInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.SwarmInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.SwarmInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//swarm/get(SwarmInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SwarmInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SwarmInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/GET/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmInspect.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmInspect.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//swarm/get(SwarmInspect)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SwarmInspect.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SwarmInspect.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Initialize a new swarm
    ///
    /// - Remark: HTTP `POST /swarm/init`.
    /// - Remark: Generated from `#/paths//swarm/init/post(SwarmInit)`.
    package enum SwarmInit {
        package static let id: Swift.String = "SwarmInit"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/swarm/init/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmInit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmInit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SwarmInit.Input.Headers
            /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// Listen address used for inter-manager communication, as well
                    /// as determining the networking interface used for the VXLAN
                    /// Tunnel Endpoint (VTEP). This can either be an address/port
                    /// combination in the form `192.168.1.1:4567`, or an interface
                    /// followed by a port number, like `eth0:4567`. If the port number
                    /// is omitted, the default swarm listening port is used.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/json/ListenAddr`.
                    package var ListenAddr: Swift.String?
                    /// Externally reachable address advertised to other nodes. This
                    /// can either be an address/port combination in the form
                    /// `192.168.1.1:4567`, or an interface followed by a port number,
                    /// like `eth0:4567`. If the port number is omitted, the port
                    /// number from the listen address is used. If `AdvertiseAddr` is
                    /// not specified, it will be automatically detected when possible.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/json/AdvertiseAddr`.
                    package var AdvertiseAddr: Swift.String?
                    /// Address or interface to use for data path traffic (format:
                    /// `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                    /// like `eth0`. If `DataPathAddr` is unspecified, the same address
                    /// as `AdvertiseAddr` is used.
                    ///
                    /// The `DataPathAddr` specifies the address that global scope
                    /// network drivers will publish towards other  nodes in order to
                    /// reach the containers running on this node. Using this parameter
                    /// it is possible to separate the container data traffic from the
                    /// management traffic of the cluster.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/json/DataPathAddr`.
                    package var DataPathAddr: Swift.String?
                    /// DataPathPort specifies the data path port number for data traffic.
                    /// Acceptable port range is 1024 to 49151.
                    /// if no port is set or is set to 0, default port 4789 will be used.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/json/DataPathPort`.
                    package var DataPathPort: Swift.Int?
                    /// Default Address Pool specifies default subnet pools for global
                    /// scope networks.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/json/DefaultAddrPool`.
                    package var DefaultAddrPool: [Swift.String]?
                    /// Force creation of a new swarm.
                    ///
                    /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/json/ForceNewCluster`.
                    package var ForceNewCluster: Swift.Bool?
                    /// SubnetSize specifies the subnet size of the networks created
                    /// from the default subnet pool.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/json/SubnetSize`.
                    package var SubnetSize: Swift.Int?
                    /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/json/Spec`.
                    package var Spec: Components.Schemas.SwarmSpec?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ListenAddr: Listen address used for inter-manager communication, as well
                    ///   - AdvertiseAddr: Externally reachable address advertised to other nodes. This
                    ///   - DataPathAddr: Address or interface to use for data path traffic (format:
                    ///   - DataPathPort: DataPathPort specifies the data path port number for data traffic.
                    ///   - DefaultAddrPool: Default Address Pool specifies default subnet pools for global
                    ///   - ForceNewCluster: Force creation of a new swarm.
                    ///   - SubnetSize: SubnetSize specifies the subnet size of the networks created
                    ///   - Spec:
                    package init(
                        ListenAddr: Swift.String? = nil,
                        AdvertiseAddr: Swift.String? = nil,
                        DataPathAddr: Swift.String? = nil,
                        DataPathPort: Swift.Int? = nil,
                        DefaultAddrPool: [Swift.String]? = nil,
                        ForceNewCluster: Swift.Bool? = nil,
                        SubnetSize: Swift.Int? = nil,
                        Spec: Components.Schemas.SwarmSpec? = nil
                    ) {
                        self.ListenAddr = ListenAddr
                        self.AdvertiseAddr = AdvertiseAddr
                        self.DataPathAddr = DataPathAddr
                        self.DataPathPort = DataPathPort
                        self.DefaultAddrPool = DefaultAddrPool
                        self.ForceNewCluster = ForceNewCluster
                        self.SubnetSize = SubnetSize
                        self.Spec = Spec
                    }
                    package enum CodingKeys: String, CodingKey {
                        case ListenAddr
                        case AdvertiseAddr
                        case DataPathAddr
                        case DataPathPort
                        case DefaultAddrPool
                        case ForceNewCluster
                        case SubnetSize
                        case Spec
                    }
                }
                /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/content/application\/json`.
                case json(Operations.SwarmInit.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/swarm/init/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.SwarmInit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.SwarmInit.Input.Headers = .init(),
                body: Operations.SwarmInit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/init/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/init/POST/responses/200/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/init/POST/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmInit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmInit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//swarm/init/post(SwarmInit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SwarmInit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SwarmInit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/init/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/init/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/init/POST/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmInit.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmInit.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//swarm/init/post(SwarmInit)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SwarmInit.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.SwarmInit.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/init/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/init/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/init/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmInit.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmInit.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//swarm/init/post(SwarmInit)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SwarmInit.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SwarmInit.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/init/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/init/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/init/POST/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmInit.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmInit.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is already part of a swarm
            ///
            /// - Remark: Generated from `#/paths//swarm/init/post(SwarmInit)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SwarmInit.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SwarmInit.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Join an existing swarm
    ///
    /// - Remark: HTTP `POST /swarm/join`.
    /// - Remark: Generated from `#/paths//swarm/join/post(SwarmJoin)`.
    package enum SwarmJoin {
        package static let id: Swift.String = "SwarmJoin"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/swarm/join/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmJoin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmJoin.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SwarmJoin.Input.Headers
            /// - Remark: Generated from `#/paths/swarm/join/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/join/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// Listen address used for inter-manager communication if the node
                    /// gets promoted to manager, as well as determining the networking
                    /// interface used for the VXLAN Tunnel Endpoint (VTEP).
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/join/POST/requestBody/json/ListenAddr`.
                    package var ListenAddr: Swift.String?
                    /// Externally reachable address advertised to other nodes. This
                    /// can either be an address/port combination in the form
                    /// `192.168.1.1:4567`, or an interface followed by a port number,
                    /// like `eth0:4567`. If the port number is omitted, the port
                    /// number from the listen address is used. If `AdvertiseAddr` is
                    /// not specified, it will be automatically detected when possible.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/join/POST/requestBody/json/AdvertiseAddr`.
                    package var AdvertiseAddr: Swift.String?
                    /// Address or interface to use for data path traffic (format:
                    /// `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                    /// like `eth0`. If `DataPathAddr` is unspecified, the same address
                    /// as `AdvertiseAddr` is used.
                    ///
                    /// The `DataPathAddr` specifies the address that global scope
                    /// network drivers will publish towards other nodes in order to
                    /// reach the containers running on this node. Using this parameter
                    /// it is possible to separate the container data traffic from the
                    /// management traffic of the cluster.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/join/POST/requestBody/json/DataPathAddr`.
                    package var DataPathAddr: Swift.String?
                    /// Addresses of manager nodes already participating in the swarm.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/swarm/join/POST/requestBody/json/RemoteAddrs`.
                    package var RemoteAddrs: [Swift.String]?
                    /// Secret token for joining this swarm.
                    ///
                    /// - Remark: Generated from `#/paths/swarm/join/POST/requestBody/json/JoinToken`.
                    package var JoinToken: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ListenAddr: Listen address used for inter-manager communication if the node
                    ///   - AdvertiseAddr: Externally reachable address advertised to other nodes. This
                    ///   - DataPathAddr: Address or interface to use for data path traffic (format:
                    ///   - RemoteAddrs: Addresses of manager nodes already participating in the swarm.
                    ///   - JoinToken: Secret token for joining this swarm.
                    package init(
                        ListenAddr: Swift.String? = nil,
                        AdvertiseAddr: Swift.String? = nil,
                        DataPathAddr: Swift.String? = nil,
                        RemoteAddrs: [Swift.String]? = nil,
                        JoinToken: Swift.String? = nil
                    ) {
                        self.ListenAddr = ListenAddr
                        self.AdvertiseAddr = AdvertiseAddr
                        self.DataPathAddr = DataPathAddr
                        self.RemoteAddrs = RemoteAddrs
                        self.JoinToken = JoinToken
                    }
                    package enum CodingKeys: String, CodingKey {
                        case ListenAddr
                        case AdvertiseAddr
                        case DataPathAddr
                        case RemoteAddrs
                        case JoinToken
                    }
                }
                /// - Remark: Generated from `#/paths/swarm/join/POST/requestBody/content/application\/json`.
                case json(Operations.SwarmJoin.Input.Body.jsonPayload)
                /// - Remark: Generated from `#/paths/swarm/join/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.SwarmJoin.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.SwarmJoin.Input.Headers = .init(),
                body: Operations.SwarmJoin.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//swarm/join/post(SwarmJoin)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SwarmJoin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SwarmJoin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/join/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/join/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/join/POST/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmJoin.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmJoin.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//swarm/join/post(SwarmJoin)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SwarmJoin.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.SwarmJoin.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/join/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/join/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/join/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmJoin.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmJoin.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//swarm/join/post(SwarmJoin)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SwarmJoin.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SwarmJoin.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/join/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/join/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/join/POST/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmJoin.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmJoin.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is already part of a swarm
            ///
            /// - Remark: Generated from `#/paths//swarm/join/post(SwarmJoin)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SwarmJoin.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SwarmJoin.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Leave a swarm
    ///
    /// - Remark: HTTP `POST /swarm/leave`.
    /// - Remark: Generated from `#/paths//swarm/leave/post(SwarmLeave)`.
    package enum SwarmLeave {
        package static let id: Swift.String = "SwarmLeave"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/swarm/leave/POST/query`.
            package struct Query: Sendable, Hashable {
                /// Force leave swarm, even if this is the last manager or that it will
                /// break the cluster.
                ///
                ///
                /// - Remark: Generated from `#/paths/swarm/leave/POST/query/force`.
                package var force: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - force: Force leave swarm, even if this is the last manager or that it will
                package init(force: Swift.Bool? = nil) {
                    self.force = force
                }
            }
            package var query: Operations.SwarmLeave.Input.Query
            /// - Remark: Generated from `#/paths/swarm/leave/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmLeave.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmLeave.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SwarmLeave.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.SwarmLeave.Input.Query = .init(),
                headers: Operations.SwarmLeave.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//swarm/leave/post(SwarmLeave)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SwarmLeave.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SwarmLeave.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/leave/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/leave/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/leave/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmLeave.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmLeave.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//swarm/leave/post(SwarmLeave)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SwarmLeave.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SwarmLeave.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/leave/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/leave/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/leave/POST/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmLeave.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmLeave.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//swarm/leave/post(SwarmLeave)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SwarmLeave.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SwarmLeave.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Update a swarm
    ///
    /// - Remark: HTTP `POST /swarm/update`.
    /// - Remark: Generated from `#/paths//swarm/update/post(SwarmUpdate)`.
    package enum SwarmUpdate {
        package static let id: Swift.String = "SwarmUpdate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/swarm/update/POST/query`.
            package struct Query: Sendable, Hashable {
                /// The version number of the swarm object being updated. This is
                /// required to avoid conflicting writes.
                ///
                ///
                /// - Remark: Generated from `#/paths/swarm/update/POST/query/version`.
                package var version: Swift.Int64
                /// Rotate the worker join token.
                ///
                /// - Remark: Generated from `#/paths/swarm/update/POST/query/rotateWorkerToken`.
                package var rotateWorkerToken: Swift.Bool?
                /// Rotate the manager join token.
                ///
                /// - Remark: Generated from `#/paths/swarm/update/POST/query/rotateManagerToken`.
                package var rotateManagerToken: Swift.Bool?
                /// Rotate the manager unlock key.
                ///
                /// - Remark: Generated from `#/paths/swarm/update/POST/query/rotateManagerUnlockKey`.
                package var rotateManagerUnlockKey: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - version: The version number of the swarm object being updated. This is
                ///   - rotateWorkerToken: Rotate the worker join token.
                ///   - rotateManagerToken: Rotate the manager join token.
                ///   - rotateManagerUnlockKey: Rotate the manager unlock key.
                package init(
                    version: Swift.Int64,
                    rotateWorkerToken: Swift.Bool? = nil,
                    rotateManagerToken: Swift.Bool? = nil,
                    rotateManagerUnlockKey: Swift.Bool? = nil
                ) {
                    self.version = version
                    self.rotateWorkerToken = rotateWorkerToken
                    self.rotateManagerToken = rotateManagerToken
                    self.rotateManagerUnlockKey = rotateManagerUnlockKey
                }
            }
            package var query: Operations.SwarmUpdate.Input.Query
            /// - Remark: Generated from `#/paths/swarm/update/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SwarmUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/swarm/update/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SwarmSpec)
                /// - Remark: Generated from `#/paths/swarm/update/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.SwarmUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                query: Operations.SwarmUpdate.Input.Query,
                headers: Operations.SwarmUpdate.Input.Headers = .init(),
                body: Operations.SwarmUpdate.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//swarm/update/post(SwarmUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SwarmUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SwarmUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/update/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/update/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/update/POST/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//swarm/update/post(SwarmUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SwarmUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.SwarmUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/update/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/update/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/update/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmUpdate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmUpdate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//swarm/update/post(SwarmUpdate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SwarmUpdate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SwarmUpdate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/update/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/update/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/update/POST/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmUpdate.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmUpdate.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//swarm/update/post(SwarmUpdate)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SwarmUpdate.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SwarmUpdate.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Get the unlock key
    ///
    /// - Remark: HTTP `GET /swarm/unlockkey`.
    /// - Remark: Generated from `#/paths//swarm/unlockkey/get(SwarmUnlockkey)`.
    package enum SwarmUnlockkey {
        package static let id: Swift.String = "SwarmUnlockkey"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmUnlockkey.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmUnlockkey.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SwarmUnlockkey.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.SwarmUnlockkey.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/200/content/json`.
                    package struct jsonPayload: Codable, Hashable, Sendable {
                        /// The swarm's unlock key.
                        ///
                        /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/200/content/json/UnlockKey`.
                        package var UnlockKey: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - UnlockKey: The swarm's unlock key.
                        package init(UnlockKey: Swift.String? = nil) {
                            self.UnlockKey = UnlockKey
                        }
                        package enum CodingKeys: String, CodingKey {
                            case UnlockKey
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/200/content/application\/json`.
                    case json(Operations.SwarmUnlockkey.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.SwarmUnlockkey.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmUnlockkey.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmUnlockkey.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//swarm/unlockkey/get(SwarmUnlockkey)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SwarmUnlockkey.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SwarmUnlockkey.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmUnlockkey.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmUnlockkey.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//swarm/unlockkey/get(SwarmUnlockkey)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SwarmUnlockkey.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SwarmUnlockkey.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/swarm/unlockkey/GET/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmUnlockkey.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmUnlockkey.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//swarm/unlockkey/get(SwarmUnlockkey)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SwarmUnlockkey.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SwarmUnlockkey.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Unlock a locked manager
    ///
    /// - Remark: HTTP `POST /swarm/unlock`.
    /// - Remark: Generated from `#/paths//swarm/unlock/post(SwarmUnlock)`.
    package enum SwarmUnlock {
        package static let id: Swift.String = "SwarmUnlock"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/swarm/unlock/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmUnlock.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SwarmUnlock.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SwarmUnlock.Input.Headers
            /// - Remark: Generated from `#/paths/swarm/unlock/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/unlock/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// The swarm's unlock key.
                    ///
                    /// - Remark: Generated from `#/paths/swarm/unlock/POST/requestBody/json/UnlockKey`.
                    package var UnlockKey: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - UnlockKey: The swarm's unlock key.
                    package init(UnlockKey: Swift.String? = nil) {
                        self.UnlockKey = UnlockKey
                    }
                    package enum CodingKeys: String, CodingKey {
                        case UnlockKey
                    }
                }
                /// - Remark: Generated from `#/paths/swarm/unlock/POST/requestBody/content/application\/json`.
                case json(Operations.SwarmUnlock.Input.Body.jsonPayload)
            }
            package var body: Operations.SwarmUnlock.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.SwarmUnlock.Input.Headers = .init(),
                body: Operations.SwarmUnlock.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//swarm/unlock/post(SwarmUnlock)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SwarmUnlock.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SwarmUnlock.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/unlock/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/unlock/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmUnlock.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmUnlock.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//swarm/unlock/post(SwarmUnlock)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SwarmUnlock.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SwarmUnlock.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swarm/unlock/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swarm/unlock/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SwarmUnlock.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SwarmUnlock.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//swarm/unlock/post(SwarmUnlock)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SwarmUnlock.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SwarmUnlock.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List services
    ///
    /// - Remark: HTTP `GET /services`.
    /// - Remark: Generated from `#/paths//services/get(ServiceList)`.
    package enum ServiceList {
        package static let id: Swift.String = "ServiceList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/services/GET/query`.
            package struct Query: Sendable, Hashable {
                /// A JSON encoded value of the filters (a `map[string][]string`) to
                /// process on the services list.
                ///
                /// Available filters:
                ///
                /// - `id=<service id>`
                /// - `label=<service label>`
                /// - `mode=["replicated"|"global"]`
                /// - `name=<service name>`
                ///
                ///
                /// - Remark: Generated from `#/paths/services/GET/query/filters`.
                package var filters: Swift.String?
                /// Include service status, with count of running and desired tasks.
                ///
                ///
                /// - Remark: Generated from `#/paths/services/GET/query/status`.
                package var status: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to
                ///   - status: Include service status, with count of running and desired tasks.
                package init(
                    filters: Swift.String? = nil,
                    status: Swift.Bool? = nil
                ) {
                    self.filters = filters
                    self.status = status
                }
            }
            package var query: Operations.ServiceList.Input.Query
            /// - Remark: Generated from `#/paths/services/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ServiceList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.ServiceList.Input.Query = .init(),
                headers: Operations.ServiceList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Service])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Service] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//services/get(ServiceList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ServiceList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ServiceList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//services/get(ServiceList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ServiceList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ServiceList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/GET/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceList.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceList.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//services/get(ServiceList)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ServiceList.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ServiceList.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Create a service
    ///
    /// - Remark: HTTP `POST /services/create`.
    /// - Remark: Generated from `#/paths//services/create/post(ServiceCreate)`.
    package enum ServiceCreate {
        package static let id: Swift.String = "ServiceCreate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/services/create/POST/header`.
            package struct Headers: Sendable, Hashable {
                /// A base64url-encoded auth configuration for pulling from private
                /// registries.
                ///
                /// Refer to the [authentication section](#section/Authentication) for
                /// details.
                ///
                ///
                /// - Remark: Generated from `#/paths/services/create/POST/header/X-Registry-Auth`.
                package var X_hyphen_Registry_hyphen_Auth: Swift.String?
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: A base64url-encoded auth configuration for pulling from private
                ///   - accept:
                package init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceCreate.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            package var headers: Operations.ServiceCreate.Input.Headers
            /// - Remark: Generated from `#/paths/services/create/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/create/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/services/create/POST/requestBody/json/value1`.
                    package var value1: Components.Schemas.ServiceSpec
                    /// - Remark: Generated from `#/paths/services/create/POST/requestBody/json/value2`.
                    package var value2: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    package init(
                        value1: Components.Schemas.ServiceSpec,
                        value2: OpenAPIRuntime.OpenAPIObjectContainer
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    package init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/services/create/POST/requestBody/content/application\/json`.
                case json(Operations.ServiceCreate.Input.Body.jsonPayload)
            }
            package var body: Operations.ServiceCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.ServiceCreate.Input.Headers = .init(),
                body: Operations.ServiceCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/create/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/create/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.ServiceCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ServiceCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceCreate.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceCreate.Output.Created.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//services/create/post(ServiceCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ServiceCreate.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ServiceCreate.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/create/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/create/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceCreate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceCreate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//services/create/post(ServiceCreate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ServiceCreate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ServiceCreate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/create/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/create/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceCreate.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceCreate.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// network is not eligible for services
            ///
            /// - Remark: Generated from `#/paths//services/create/post(ServiceCreate)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ServiceCreate.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.ServiceCreate.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/create/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/create/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceCreate.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceCreate.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// name conflicts with an existing service
            ///
            /// - Remark: Generated from `#/paths//services/create/post(ServiceCreate)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ServiceCreate.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ServiceCreate.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/create/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/create/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceCreate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceCreate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//services/create/post(ServiceCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ServiceCreate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ServiceCreate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/create/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/create/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceCreate.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceCreate.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//services/create/post(ServiceCreate)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ServiceCreate.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ServiceCreate.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inspect a service
    ///
    /// - Remark: HTTP `GET /services/{id}`.
    /// - Remark: Generated from `#/paths//services/{id}/get(ServiceInspect)`.
    package enum ServiceInspect {
        package static let id: Swift.String = "ServiceInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/services/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of service.
                ///
                /// - Remark: Generated from `#/paths/services/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of service.
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ServiceInspect.Input.Path
            /// - Remark: Generated from `#/paths/services/{id}/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Fill empty fields with default values.
                ///
                /// - Remark: Generated from `#/paths/services/{id}/GET/query/insertDefaults`.
                package var insertDefaults: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - insertDefaults: Fill empty fields with default values.
                package init(insertDefaults: Swift.Bool? = nil) {
                    self.insertDefaults = insertDefaults
                }
            }
            package var query: Operations.ServiceInspect.Input.Query
            /// - Remark: Generated from `#/paths/services/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ServiceInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ServiceInspect.Input.Path,
                query: Operations.ServiceInspect.Input.Query = .init(),
                headers: Operations.ServiceInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Service)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Service {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//services/{id}/get(ServiceInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ServiceInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ServiceInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/GET/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such service
            ///
            /// - Remark: Generated from `#/paths//services/{id}/get(ServiceInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ServiceInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ServiceInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/GET/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//services/{id}/get(ServiceInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ServiceInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ServiceInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/GET/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceInspect.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceInspect.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//services/{id}/get(ServiceInspect)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ServiceInspect.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ServiceInspect.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Delete a service
    ///
    /// - Remark: HTTP `DELETE /services/{id}`.
    /// - Remark: Generated from `#/paths//services/{id}/delete(ServiceDelete)`.
    package enum ServiceDelete {
        package static let id: Swift.String = "ServiceDelete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/services/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of service.
                ///
                /// - Remark: Generated from `#/paths/services/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of service.
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ServiceDelete.Input.Path
            /// - Remark: Generated from `#/paths/services/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ServiceDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ServiceDelete.Input.Path,
                headers: Operations.ServiceDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//services/{id}/delete(ServiceDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ServiceDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ServiceDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/DELETE/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such service
            ///
            /// - Remark: Generated from `#/paths//services/{id}/delete(ServiceDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ServiceDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ServiceDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/DELETE/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/DELETE/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceDelete.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//services/{id}/delete(ServiceDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ServiceDelete.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ServiceDelete.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/DELETE/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/DELETE/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/DELETE/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceDelete.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceDelete.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//services/{id}/delete(ServiceDelete)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ServiceDelete.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ServiceDelete.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Update a service
    ///
    /// - Remark: HTTP `POST /services/{id}/update`.
    /// - Remark: Generated from `#/paths//services/{id}/update/post(ServiceUpdate)`.
    package enum ServiceUpdate {
        package static let id: Swift.String = "ServiceUpdate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/services/{id}/update/POST/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of service.
                ///
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of service.
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ServiceUpdate.Input.Path
            /// - Remark: Generated from `#/paths/services/{id}/update/POST/query`.
            package struct Query: Sendable, Hashable {
                /// The version number of the service object being updated. This is
                /// required to avoid conflicting writes.
                /// This version number should be the value as currently set on the
                /// service *before* the update. You can find the current version by
                /// calling `GET /services/{id}`
                ///
                ///
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/query/version`.
                package var version: Swift.Int
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/query/registryAuthFrom`.
                @frozen package enum registryAuthFromPayload: String, Codable, Hashable, Sendable {
                    case spec = "spec"
                    case previous_hyphen_spec = "previous-spec"
                }
                /// If the `X-Registry-Auth` header is not specified, this parameter
                /// indicates where to find registry authorization credentials.
                ///
                ///
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/query/registryAuthFrom`.
                package var registryAuthFrom: Operations.ServiceUpdate.Input.Query.registryAuthFromPayload?
                /// Set to this parameter to `previous` to cause a server-side rollback
                /// to the previous service spec. The supplied spec will be ignored in
                /// this case.
                ///
                ///
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/query/rollback`.
                package var rollback: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - version: The version number of the service object being updated. This is
                ///   - registryAuthFrom: If the `X-Registry-Auth` header is not specified, this parameter
                ///   - rollback: Set to this parameter to `previous` to cause a server-side rollback
                package init(
                    version: Swift.Int,
                    registryAuthFrom: Operations.ServiceUpdate.Input.Query.registryAuthFromPayload? = nil,
                    rollback: Swift.String? = nil
                ) {
                    self.version = version
                    self.registryAuthFrom = registryAuthFrom
                    self.rollback = rollback
                }
            }
            package var query: Operations.ServiceUpdate.Input.Query
            /// - Remark: Generated from `#/paths/services/{id}/update/POST/header`.
            package struct Headers: Sendable, Hashable {
                /// A base64url-encoded auth configuration for pulling from private
                /// registries.
                ///
                /// Refer to the [authentication section](#section/Authentication) for
                /// details.
                ///
                ///
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/header/X-Registry-Auth`.
                package var X_hyphen_Registry_hyphen_Auth: Swift.String?
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Registry_hyphen_Auth: A base64url-encoded auth configuration for pulling from private
                ///   - accept:
                package init(
                    X_hyphen_Registry_hyphen_Auth: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceUpdate.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Registry_hyphen_Auth = X_hyphen_Registry_hyphen_Auth
                    self.accept = accept
                }
            }
            package var headers: Operations.ServiceUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/services/{id}/update/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/services/{id}/update/POST/requestBody/json/value1`.
                    package var value1: Components.Schemas.ServiceSpec
                    /// - Remark: Generated from `#/paths/services/{id}/update/POST/requestBody/json/value2`.
                    package var value2: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    package init(
                        value1: Components.Schemas.ServiceSpec,
                        value2: OpenAPIRuntime.OpenAPIObjectContainer
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    package init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/requestBody/content/application\/json`.
                case json(Operations.ServiceUpdate.Input.Body.jsonPayload)
            }
            package var body: Operations.ServiceUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ServiceUpdate.Input.Path,
                query: Operations.ServiceUpdate.Input.Query,
                headers: Operations.ServiceUpdate.Input.Headers = .init(),
                body: Operations.ServiceUpdate.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ServiceUpdateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ServiceUpdateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//services/{id}/update/post(ServiceUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ServiceUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ServiceUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//services/{id}/update/post(ServiceUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ServiceUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ServiceUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceUpdate.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceUpdate.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such service
            ///
            /// - Remark: Generated from `#/paths//services/{id}/update/post(ServiceUpdate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ServiceUpdate.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ServiceUpdate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceUpdate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceUpdate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//services/{id}/update/post(ServiceUpdate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ServiceUpdate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ServiceUpdate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/update/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceUpdate.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceUpdate.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//services/{id}/update/post(ServiceUpdate)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ServiceUpdate.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ServiceUpdate.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get service logs
    ///
    /// Get `stdout` and `stderr` logs from a service. See also
    /// [`/containers/{id}/logs`](#operation/ContainerLogs).
    ///
    /// **Note**: This endpoint works only for services with the `local`,
    /// `json-file` or `journald` logging drivers.
    ///
    ///
    /// - Remark: HTTP `GET /services/{id}/logs`.
    /// - Remark: Generated from `#/paths//services/{id}/logs/get(ServiceLogs)`.
    package enum ServiceLogs {
        package static let id: Swift.String = "ServiceLogs"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/services/{id}/logs/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID or name of the service
                ///
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID or name of the service
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ServiceLogs.Input.Path
            /// - Remark: Generated from `#/paths/services/{id}/logs/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Show service context and extra details provided to logs.
                ///
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/query/details`.
                package var details: Swift.Bool?
                /// Keep connection after returning logs.
                ///
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/query/follow`.
                package var follow: Swift.Bool?
                /// Return logs from `stdout`
                ///
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/query/stdout`.
                package var stdout: Swift.Bool?
                /// Return logs from `stderr`
                ///
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/query/stderr`.
                package var stderr: Swift.Bool?
                /// Only return logs since this time, as a UNIX timestamp
                ///
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/query/since`.
                package var since: Swift.Int?
                /// Add timestamps to every log line
                ///
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/query/timestamps`.
                package var timestamps: Swift.Bool?
                /// Only return this number of log lines from the end of the logs.
                /// Specify as an integer or `all` to output all log lines.
                ///
                ///
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/query/tail`.
                package var tail: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - details: Show service context and extra details provided to logs.
                ///   - follow: Keep connection after returning logs.
                ///   - stdout: Return logs from `stdout`
                ///   - stderr: Return logs from `stderr`
                ///   - since: Only return logs since this time, as a UNIX timestamp
                ///   - timestamps: Add timestamps to every log line
                ///   - tail: Only return this number of log lines from the end of the logs.
                package init(
                    details: Swift.Bool? = nil,
                    follow: Swift.Bool? = nil,
                    stdout: Swift.Bool? = nil,
                    stderr: Swift.Bool? = nil,
                    since: Swift.Int? = nil,
                    timestamps: Swift.Bool? = nil,
                    tail: Swift.String? = nil
                ) {
                    self.details = details
                    self.follow = follow
                    self.stdout = stdout
                    self.stderr = stderr
                    self.since = since
                    self.timestamps = timestamps
                    self.tail = tail
                }
            }
            package var query: Operations.ServiceLogs.Input.Query
            /// - Remark: Generated from `#/paths/services/{id}/logs/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ServiceLogs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ServiceLogs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ServiceLogs.Input.Path,
                query: Operations.ServiceLogs.Input.Query = .init(),
                headers: Operations.ServiceLogs.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/200/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/200/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceLogs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceLogs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// logs returned as a stream in response body
            ///
            /// - Remark: Generated from `#/paths//services/{id}/logs/get(ServiceLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ServiceLogs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ServiceLogs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/404/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/404/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/404/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceLogs.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceLogs.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such service
            ///
            /// - Remark: Generated from `#/paths//services/{id}/logs/get(ServiceLogs)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ServiceLogs.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ServiceLogs.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/500/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/500/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceLogs.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceLogs.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//services/{id}/logs/get(ServiceLogs)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ServiceLogs.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ServiceLogs.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/503/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/services/{id}/logs/GET/responses/503/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ServiceLogs.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ServiceLogs.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//services/{id}/logs/get(ServiceLogs)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ServiceLogs.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ServiceLogs.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_vnd_period_docker_period_raw_hyphen_stream
            case application_vnd_period_docker_period_multiplexed_hyphen_stream
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/vnd.docker.raw-stream":
                    self = .application_vnd_period_docker_period_raw_hyphen_stream
                case "application/vnd.docker.multiplexed-stream":
                    self = .application_vnd_period_docker_period_multiplexed_hyphen_stream
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_vnd_period_docker_period_raw_hyphen_stream:
                    return "application/vnd.docker.raw-stream"
                case .application_vnd_period_docker_period_multiplexed_hyphen_stream:
                    return "application/vnd.docker.multiplexed-stream"
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_vnd_period_docker_period_raw_hyphen_stream,
                    .application_vnd_period_docker_period_multiplexed_hyphen_stream,
                    .json
                ]
            }
        }
    }
    /// List tasks
    ///
    /// - Remark: HTTP `GET /tasks`.
    /// - Remark: Generated from `#/paths//tasks/get(TaskList)`.
    package enum TaskList {
        package static let id: Swift.String = "TaskList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tasks/GET/query`.
            package struct Query: Sendable, Hashable {
                /// A JSON encoded value of the filters (a `map[string][]string`) to
                /// process on the tasks list.
                ///
                /// Available filters:
                ///
                /// - `desired-state=(running | shutdown | accepted)`
                /// - `id=<task id>`
                /// - `label=key` or `label="key=value"`
                /// - `name=<task name>`
                /// - `node=<node id or name>`
                /// - `service=<service name>`
                ///
                ///
                /// - Remark: Generated from `#/paths/tasks/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.TaskList.Input.Query
            /// - Remark: Generated from `#/paths/tasks/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TaskList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TaskList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.TaskList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.TaskList.Input.Query = .init(),
                headers: Operations.TaskList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Task])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Task] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//tasks/get(TaskList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TaskList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.TaskList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//tasks/get(TaskList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.TaskList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.TaskList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskList.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskList.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//tasks/get(TaskList)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.TaskList.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.TaskList.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inspect a task
    ///
    /// - Remark: HTTP `GET /tasks/{id}`.
    /// - Remark: Generated from `#/paths//tasks/{id}/get(TaskInspect)`.
    package enum TaskInspect {
        package static let id: Swift.String = "TaskInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tasks/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID of the task
                ///
                /// - Remark: Generated from `#/paths/tasks/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID of the task
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.TaskInspect.Input.Path
            /// - Remark: Generated from `#/paths/tasks/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TaskInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TaskInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.TaskInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.TaskInspect.Input.Path,
                headers: Operations.TaskInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Task)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Task {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//tasks/{id}/get(TaskInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TaskInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.TaskInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such task
            ///
            /// - Remark: Generated from `#/paths//tasks/{id}/get(TaskInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.TaskInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.TaskInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/{id}/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/{id}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//tasks/{id}/get(TaskInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.TaskInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.TaskInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/{id}/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/{id}/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskInspect.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskInspect.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//tasks/{id}/get(TaskInspect)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.TaskInspect.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.TaskInspect.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get task logs
    ///
    /// Get `stdout` and `stderr` logs from a task.
    /// See also [`/containers/{id}/logs`](#operation/ContainerLogs).
    ///
    /// **Note**: This endpoint works only for services with the `local`,
    /// `json-file` or `journald` logging drivers.
    ///
    ///
    /// - Remark: HTTP `GET /tasks/{id}/logs`.
    /// - Remark: Generated from `#/paths//tasks/{id}/logs/get(TaskLogs)`.
    package enum TaskLogs {
        package static let id: Swift.String = "TaskLogs"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID of the task
                ///
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID of the task
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.TaskLogs.Input.Path
            /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Show task context and extra details provided to logs.
                ///
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/query/details`.
                package var details: Swift.Bool?
                /// Keep connection after returning logs.
                ///
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/query/follow`.
                package var follow: Swift.Bool?
                /// Return logs from `stdout`
                ///
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/query/stdout`.
                package var stdout: Swift.Bool?
                /// Return logs from `stderr`
                ///
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/query/stderr`.
                package var stderr: Swift.Bool?
                /// Only return logs since this time, as a UNIX timestamp
                ///
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/query/since`.
                package var since: Swift.Int?
                /// Add timestamps to every log line
                ///
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/query/timestamps`.
                package var timestamps: Swift.Bool?
                /// Only return this number of log lines from the end of the logs.
                /// Specify as an integer or `all` to output all log lines.
                ///
                ///
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/query/tail`.
                package var tail: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - details: Show task context and extra details provided to logs.
                ///   - follow: Keep connection after returning logs.
                ///   - stdout: Return logs from `stdout`
                ///   - stderr: Return logs from `stderr`
                ///   - since: Only return logs since this time, as a UNIX timestamp
                ///   - timestamps: Add timestamps to every log line
                ///   - tail: Only return this number of log lines from the end of the logs.
                package init(
                    details: Swift.Bool? = nil,
                    follow: Swift.Bool? = nil,
                    stdout: Swift.Bool? = nil,
                    stderr: Swift.Bool? = nil,
                    since: Swift.Int? = nil,
                    timestamps: Swift.Bool? = nil,
                    tail: Swift.String? = nil
                ) {
                    self.details = details
                    self.follow = follow
                    self.stdout = stdout
                    self.stderr = stderr
                    self.since = since
                    self.timestamps = timestamps
                    self.tail = tail
                }
            }
            package var query: Operations.TaskLogs.Input.Query
            /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TaskLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.TaskLogs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.TaskLogs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.TaskLogs.Input.Path,
                query: Operations.TaskLogs.Input.Query = .init(),
                headers: Operations.TaskLogs.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/200/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/200/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskLogs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskLogs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// logs returned as a stream in response body
            ///
            /// - Remark: Generated from `#/paths//tasks/{id}/logs/get(TaskLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.TaskLogs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.TaskLogs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/404/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/404/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/404/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskLogs.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskLogs.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such task
            ///
            /// - Remark: Generated from `#/paths//tasks/{id}/logs/get(TaskLogs)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.TaskLogs.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.TaskLogs.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/500/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/500/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskLogs.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskLogs.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//tasks/{id}/logs/get(TaskLogs)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.TaskLogs.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.TaskLogs.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/503/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.raw-stream",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/tasks/{id}/logs/GET/responses/503/content/application\/vnd.docker.multiplexed-stream`.
                    case application_vnd_period_docker_period_multiplexed_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_multiplexed_hyphen_stream`.
                    package var application_vnd_period_docker_period_multiplexed_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_multiplexed_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.docker.multiplexed-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.TaskLogs.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.TaskLogs.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//tasks/{id}/logs/get(TaskLogs)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.TaskLogs.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.TaskLogs.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_vnd_period_docker_period_raw_hyphen_stream
            case application_vnd_period_docker_period_multiplexed_hyphen_stream
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/vnd.docker.raw-stream":
                    self = .application_vnd_period_docker_period_raw_hyphen_stream
                case "application/vnd.docker.multiplexed-stream":
                    self = .application_vnd_period_docker_period_multiplexed_hyphen_stream
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_vnd_period_docker_period_raw_hyphen_stream:
                    return "application/vnd.docker.raw-stream"
                case .application_vnd_period_docker_period_multiplexed_hyphen_stream:
                    return "application/vnd.docker.multiplexed-stream"
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_vnd_period_docker_period_raw_hyphen_stream,
                    .application_vnd_period_docker_period_multiplexed_hyphen_stream,
                    .json
                ]
            }
        }
    }
    /// List secrets
    ///
    /// - Remark: HTTP `GET /secrets`.
    /// - Remark: Generated from `#/paths//secrets/get(SecretList)`.
    package enum SecretList {
        package static let id: Swift.String = "SecretList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secrets/GET/query`.
            package struct Query: Sendable, Hashable {
                /// A JSON encoded value of the filters (a `map[string][]string`) to
                /// process on the secrets list.
                ///
                /// Available filters:
                ///
                /// - `id=<secret id>`
                /// - `label=<key> or label=<key>=value`
                /// - `name=<secret name>`
                /// - `names=<secret name>`
                ///
                ///
                /// - Remark: Generated from `#/paths/secrets/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.SecretList.Input.Query
            /// - Remark: Generated from `#/paths/secrets/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SecretList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.SecretList.Input.Query = .init(),
                headers: Operations.SecretList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Secret])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Secret] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//secrets/get(SecretList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SecretList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SecretList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//secrets/get(SecretList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SecretList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SecretList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretList.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretList.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//secrets/get(SecretList)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SecretList.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SecretList.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a secret
    ///
    /// - Remark: HTTP `POST /secrets/create`.
    /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)`.
    package enum SecretCreate {
        package static let id: Swift.String = "SecretCreate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secrets/create/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SecretCreate.Input.Headers
            /// - Remark: Generated from `#/paths/secrets/create/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/create/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/secrets/create/POST/requestBody/json/value1`.
                    package var value1: Components.Schemas.SecretSpec
                    /// - Remark: Generated from `#/paths/secrets/create/POST/requestBody/json/value2`.
                    package var value2: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    package init(
                        value1: Components.Schemas.SecretSpec,
                        value2: OpenAPIRuntime.OpenAPIObjectContainer
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    package init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/secrets/create/POST/requestBody/content/application\/json`.
                case json(Operations.SecretCreate.Input.Body.jsonPayload)
            }
            package var body: Operations.SecretCreate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.SecretCreate.Input.Headers = .init(),
                body: Operations.SecretCreate.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/create/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/create/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.IdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.IdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretCreate.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretCreate.Output.Created.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.SecretCreate.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.SecretCreate.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/create/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/create/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretCreate.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretCreate.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// name conflicts with an existing object
            ///
            /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.SecretCreate.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.SecretCreate.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/create/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/create/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretCreate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretCreate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SecretCreate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SecretCreate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/create/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/create/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretCreate.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretCreate.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//secrets/create/post(SecretCreate)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SecretCreate.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SecretCreate.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inspect a secret
    ///
    /// - Remark: HTTP `GET /secrets/{id}`.
    /// - Remark: Generated from `#/paths//secrets/{id}/get(SecretInspect)`.
    package enum SecretInspect {
        package static let id: Swift.String = "SecretInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secrets/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID of the secret
                ///
                /// - Remark: Generated from `#/paths/secrets/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID of the secret
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.SecretInspect.Input.Path
            /// - Remark: Generated from `#/paths/secrets/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SecretInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.SecretInspect.Input.Path,
                headers: Operations.SecretInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Secret)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Secret {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/get(SecretInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SecretInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SecretInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// secret not found
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/get(SecretInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.SecretInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.SecretInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/get(SecretInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SecretInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SecretInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretInspect.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretInspect.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/get(SecretInspect)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SecretInspect.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SecretInspect.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a secret
    ///
    /// - Remark: HTTP `DELETE /secrets/{id}`.
    /// - Remark: Generated from `#/paths//secrets/{id}/delete(SecretDelete)`.
    package enum SecretDelete {
        package static let id: Swift.String = "SecretDelete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secrets/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// ID of the secret
                ///
                /// - Remark: Generated from `#/paths/secrets/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID of the secret
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.SecretDelete.Input.Path
            /// - Remark: Generated from `#/paths/secrets/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SecretDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.SecretDelete.Input.Path,
                headers: Operations.SecretDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/delete(SecretDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.SecretDelete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.SecretDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// secret not found
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/delete(SecretDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.SecretDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.SecretDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/DELETE/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretDelete.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/delete(SecretDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SecretDelete.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SecretDelete.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/DELETE/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/DELETE/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretDelete.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretDelete.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/delete(SecretDelete)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SecretDelete.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SecretDelete.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a Secret
    ///
    /// - Remark: HTTP `POST /secrets/{id}/update`.
    /// - Remark: Generated from `#/paths//secrets/{id}/update/post(SecretUpdate)`.
    package enum SecretUpdate {
        package static let id: Swift.String = "SecretUpdate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The ID or name of the secret
                ///
                /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The ID or name of the secret
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.SecretUpdate.Input.Path
            /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/query`.
            package struct Query: Sendable, Hashable {
                /// The version number of the secret object being updated. This is
                /// required to avoid conflicting writes.
                ///
                ///
                /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/query/version`.
                package var version: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - version: The version number of the secret object being updated. This is
                package init(version: Swift.Int64) {
                    self.version = version
                }
            }
            package var query: Operations.SecretUpdate.Input.Query
            /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SecretUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.SecretUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SecretSpec)
                /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.SecretUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.SecretUpdate.Input.Path,
                query: Operations.SecretUpdate.Input.Query,
                headers: Operations.SecretUpdate.Input.Headers = .init(),
                body: Operations.SecretUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/update/post(SecretUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SecretUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.SecretUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/update/post(SecretUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SecretUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.SecretUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretUpdate.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretUpdate.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such secret
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/update/post(SecretUpdate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.SecretUpdate.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.SecretUpdate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretUpdate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretUpdate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/update/post(SecretUpdate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.SecretUpdate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.SecretUpdate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/secrets/{id}/update/POST/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.SecretUpdate.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.SecretUpdate.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//secrets/{id}/update/post(SecretUpdate)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.SecretUpdate.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.SecretUpdate.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// List configs
    ///
    /// - Remark: HTTP `GET /configs`.
    /// - Remark: Generated from `#/paths//configs/get(ConfigList)`.
    package enum ConfigList {
        package static let id: Swift.String = "ConfigList"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/configs/GET/query`.
            package struct Query: Sendable, Hashable {
                /// A JSON encoded value of the filters (a `map[string][]string`) to
                /// process on the configs list.
                ///
                /// Available filters:
                ///
                /// - `id=<config id>`
                /// - `label=<key> or label=<key>=value`
                /// - `name=<config name>`
                /// - `names=<config name>`
                ///
                ///
                /// - Remark: Generated from `#/paths/configs/GET/query/filters`.
                package var filters: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filters: A JSON encoded value of the filters (a `map[string][]string`) to
                package init(filters: Swift.String? = nil) {
                    self.filters = filters
                }
            }
            package var query: Operations.ConfigList.Input.Query
            /// - Remark: Generated from `#/paths/configs/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ConfigList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.ConfigList.Input.Query = .init(),
                headers: Operations.ConfigList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Config])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Config] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//configs/get(ConfigList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConfigList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ConfigList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigList.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigList.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//configs/get(ConfigList)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ConfigList.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ConfigList.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigList.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigList.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//configs/get(ConfigList)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ConfigList.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ConfigList.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a config
    ///
    /// - Remark: HTTP `POST /configs/create`.
    /// - Remark: Generated from `#/paths//configs/create/post(ConfigCreate)`.
    package enum ConfigCreate {
        package static let id: Swift.String = "ConfigCreate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/configs/create/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ConfigCreate.Input.Headers
            /// - Remark: Generated from `#/paths/configs/create/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/create/POST/requestBody/json`.
                package struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/configs/create/POST/requestBody/json/value1`.
                    package var value1: Components.Schemas.ConfigSpec
                    /// - Remark: Generated from `#/paths/configs/create/POST/requestBody/json/value2`.
                    package var value2: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    package init(
                        value1: Components.Schemas.ConfigSpec,
                        value2: OpenAPIRuntime.OpenAPIObjectContainer
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    package init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/configs/create/POST/requestBody/content/application\/json`.
                case json(Operations.ConfigCreate.Input.Body.jsonPayload)
            }
            package var body: Operations.ConfigCreate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.ConfigCreate.Input.Headers = .init(),
                body: Operations.ConfigCreate.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/create/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/create/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.IdResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.IdResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigCreate.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigCreate.Output.Created.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//configs/create/post(ConfigCreate)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ConfigCreate.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ConfigCreate.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/create/POST/responses/409/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/create/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigCreate.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigCreate.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// name conflicts with an existing object
            ///
            /// - Remark: Generated from `#/paths//configs/create/post(ConfigCreate)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.ConfigCreate.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Operations.ConfigCreate.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/create/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/create/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigCreate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigCreate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//configs/create/post(ConfigCreate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ConfigCreate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ConfigCreate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/create/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/create/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigCreate.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigCreate.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//configs/create/post(ConfigCreate)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ConfigCreate.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ConfigCreate.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inspect a config
    ///
    /// - Remark: HTTP `GET /configs/{id}`.
    /// - Remark: Generated from `#/paths//configs/{id}/get(ConfigInspect)`.
    package enum ConfigInspect {
        package static let id: Swift.String = "ConfigInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/configs/{id}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// ID of the config
                ///
                /// - Remark: Generated from `#/paths/configs/{id}/GET/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID of the config
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ConfigInspect.Input.Path
            /// - Remark: Generated from `#/paths/configs/{id}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ConfigInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ConfigInspect.Input.Path,
                headers: Operations.ConfigInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Config)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Config {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/get(ConfigInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConfigInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ConfigInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/GET/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigInspect.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigInspect.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// config not found
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/get(ConfigInspect)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ConfigInspect.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ConfigInspect.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/get(ConfigInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ConfigInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ConfigInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/GET/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigInspect.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigInspect.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/get(ConfigInspect)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ConfigInspect.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ConfigInspect.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a config
    ///
    /// - Remark: HTTP `DELETE /configs/{id}`.
    /// - Remark: Generated from `#/paths//configs/{id}/delete(ConfigDelete)`.
    package enum ConfigDelete {
        package static let id: Swift.String = "ConfigDelete"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/configs/{id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// ID of the config
                ///
                /// - Remark: Generated from `#/paths/configs/{id}/DELETE/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: ID of the config
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ConfigDelete.Input.Path
            /// - Remark: Generated from `#/paths/configs/{id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ConfigDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ConfigDelete.Input.Path,
                headers: Operations.ConfigDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/delete(ConfigDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ConfigDelete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ConfigDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/DELETE/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// config not found
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/delete(ConfigDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ConfigDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ConfigDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/DELETE/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/DELETE/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigDelete.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigDelete.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/delete(ConfigDelete)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ConfigDelete.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ConfigDelete.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/DELETE/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/DELETE/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigDelete.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigDelete.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/delete(ConfigDelete)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ConfigDelete.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ConfigDelete.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a Config
    ///
    /// - Remark: HTTP `POST /configs/{id}/update`.
    /// - Remark: Generated from `#/paths//configs/{id}/update/post(ConfigUpdate)`.
    package enum ConfigUpdate {
        package static let id: Swift.String = "ConfigUpdate"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/configs/{id}/update/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The ID or name of the config
                ///
                /// - Remark: Generated from `#/paths/configs/{id}/update/POST/path/id`.
                package var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The ID or name of the config
                package init(id: Swift.String) {
                    self.id = id
                }
            }
            package var path: Operations.ConfigUpdate.Input.Path
            /// - Remark: Generated from `#/paths/configs/{id}/update/POST/query`.
            package struct Query: Sendable, Hashable {
                /// The version number of the config object being updated. This is
                /// required to avoid conflicting writes.
                ///
                ///
                /// - Remark: Generated from `#/paths/configs/{id}/update/POST/query/version`.
                package var version: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - version: The version number of the config object being updated. This is
                package init(version: Swift.Int64) {
                    self.version = version
                }
            }
            package var query: Operations.ConfigUpdate.Input.Query
            /// - Remark: Generated from `#/paths/configs/{id}/update/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ConfigUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ConfigUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/configs/{id}/update/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ConfigSpec)
                /// - Remark: Generated from `#/paths/configs/{id}/update/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            package var body: Operations.ConfigUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ConfigUpdate.Input.Path,
                query: Operations.ConfigUpdate.Input.Query,
                headers: Operations.ConfigUpdate.Input.Headers = .init(),
                body: Operations.ConfigUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                package init() {}
            }
            /// no error
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/update/post(ConfigUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ConfigUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ConfigUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/400/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/update/post(ConfigUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ConfigUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.ConfigUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/404/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigUpdate.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigUpdate.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// no such config
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/update/post(ConfigUpdate)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ConfigUpdate.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ConfigUpdate.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigUpdate.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigUpdate.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/update/post(ConfigUpdate)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.ConfigUpdate.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.ConfigUpdate.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/configs/{id}/update/POST/responses/503/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    package var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ConfigUpdate.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ConfigUpdate.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// node is not part of a swarm
            ///
            /// - Remark: Generated from `#/paths//configs/{id}/update/post(ConfigUpdate)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ConfigUpdate.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ConfigUpdate.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// Get image information from the registry
    ///
    /// Return image digest and platform information by contacting the registry.
    ///
    ///
    /// - Remark: HTTP `GET /distribution/{name}/json`.
    /// - Remark: Generated from `#/paths//distribution/{name}/json/get(DistributionInspect)`.
    package enum DistributionInspect {
        package static let id: Swift.String = "DistributionInspect"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/distribution/{name}/json/GET/path`.
            package struct Path: Sendable, Hashable {
                /// Image name or id
                ///
                /// - Remark: Generated from `#/paths/distribution/{name}/json/GET/path/name`.
                package var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name: Image name or id
                package init(name: Swift.String) {
                    self.name = name
                }
            }
            package var path: Operations.DistributionInspect.Input.Path
            /// - Remark: Generated from `#/paths/distribution/{name}/json/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DistributionInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DistributionInspect.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.DistributionInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.DistributionInspect.Input.Path,
                headers: Operations.DistributionInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/distribution/{name}/json/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/distribution/{name}/json/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DistributionInspect)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.DistributionInspect {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.DistributionInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.DistributionInspect.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// descriptor and platform information
            ///
            /// - Remark: Generated from `#/paths//distribution/{name}/json/get(DistributionInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DistributionInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.DistributionInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/distribution/{name}/json/GET/responses/401/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/distribution/{name}/json/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.DistributionInspect.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.DistributionInspect.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Failed authentication or no image found
            ///
            /// - Remark: Generated from `#/paths//distribution/{name}/json/get(DistributionInspect)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DistributionInspect.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.DistributionInspect.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/distribution/{name}/json/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/distribution/{name}/json/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.DistributionInspect.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.DistributionInspect.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//distribution/{name}/json/get(DistributionInspect)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.DistributionInspect.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.DistributionInspect.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Initialize interactive session
    ///
    /// Start a new interactive session with a server. Session allows server to
    /// call back to the client for advanced capabilities.
    ///
    /// ### Hijacking
    ///
    /// This endpoint hijacks the HTTP connection to HTTP2 transport that allows
    /// the client to expose gPRC services on that connection.
    ///
    /// For example, the client sends this request to upgrade the connection:
    ///
    /// ```
    /// POST /session HTTP/1.1
    /// Upgrade: h2c
    /// Connection: Upgrade
    /// ```
    ///
    /// The Docker daemon responds with a `101 UPGRADED` response follow with
    /// the raw stream:
    ///
    /// ```
    /// HTTP/1.1 101 UPGRADED
    /// Connection: Upgrade
    /// Upgrade: h2c
    /// ```
    ///
    ///
    /// - Remark: HTTP `POST /session`.
    /// - Remark: Generated from `#/paths//session/post(Session)`.
    package enum Session {
        package static let id: Swift.String = "Session"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/session/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Session.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Session.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.Session.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.Session.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct SwitchingProtocols: Sendable, Hashable {
                /// Creates a new `SwitchingProtocols`.
                package init() {}
            }
            /// no error, hijacking successful
            ///
            /// - Remark: Generated from `#/paths//session/post(Session)/responses/101`.
            ///
            /// HTTP response code: `101 switchingProtocols`.
            case switchingProtocols(Operations.Session.Output.SwitchingProtocols)
            /// The associated value of the enum case if `self` is `.switchingProtocols`.
            ///
            /// - Throws: An error if `self` is not `.switchingProtocols`.
            /// - SeeAlso: `.switchingProtocols`.
            package var switchingProtocols: Operations.Session.Output.SwitchingProtocols {
                get throws {
                    switch self {
                    case let .switchingProtocols(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "switchingProtocols",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/session/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/session/POST/responses/400/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.Session.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.Session.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad parameter
            ///
            /// - Remark: Generated from `#/paths//session/post(Session)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.Session.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.Session.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/session/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/session/POST/responses/500/content/application\/vnd.docker.raw-stream`.
                    case application_vnd_period_docker_period_raw_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    /// - SeeAlso: `.application_vnd_period_docker_period_raw_hyphen_stream`.
                    package var application_vnd_period_docker_period_raw_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_docker_period_raw_hyphen_stream(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.Session.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.Session.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// server error
            ///
            /// - Remark: Generated from `#/paths//session/post(Session)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.Session.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.Session.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_vnd_period_docker_period_raw_hyphen_stream
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/vnd.docker.raw-stream":
                    self = .application_vnd_period_docker_period_raw_hyphen_stream
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_vnd_period_docker_period_raw_hyphen_stream:
                    return "application/vnd.docker.raw-stream"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_vnd_period_docker_period_raw_hyphen_stream
                ]
            }
        }
    }
}
